
EEG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a96c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800ab0c  0800ab0c  0000bb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b088  0800b088  0000d1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b088  0800b088  0000c088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b090  0800b090  0000d1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b090  0800b090  0000c090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b094  0800b094  0000c094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800b098  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b44  200001ec  0800b284  0000d1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d30  0800b284  0000dd30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013516  00000000  00000000  0000d21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dd6  00000000  00000000  00020732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00024508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd0  00000000  00000000  00025650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab5e  00000000  00000000  00026320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a40  00000000  00000000  00040e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c11  00000000  00000000  000558be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e74cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005324  00000000  00000000  000e7514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ec838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aaf4 	.word	0x0800aaf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800aaf4 	.word	0x0800aaf4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be0:	f000 b988 	b.w	8000ef4 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	468e      	mov	lr, r1
 8000c04:	4604      	mov	r4, r0
 8000c06:	4688      	mov	r8, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14a      	bne.n	8000ca2 <__udivmoddi4+0xa6>
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	4617      	mov	r7, r2
 8000c10:	d962      	bls.n	8000cd8 <__udivmoddi4+0xdc>
 8000c12:	fab2 f682 	clz	r6, r2
 8000c16:	b14e      	cbz	r6, 8000c2c <__udivmoddi4+0x30>
 8000c18:	f1c6 0320 	rsb	r3, r6, #32
 8000c1c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	40b7      	lsls	r7, r6
 8000c26:	ea43 0808 	orr.w	r8, r3, r8
 8000c2a:	40b4      	lsls	r4, r6
 8000c2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c30:	fa1f fc87 	uxth.w	ip, r7
 8000c34:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c38:	0c23      	lsrs	r3, r4, #16
 8000c3a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c42:	fb01 f20c 	mul.w	r2, r1, ip
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0x62>
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c50:	f080 80ea 	bcs.w	8000e28 <__udivmoddi4+0x22c>
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f240 80e7 	bls.w	8000e28 <__udivmoddi4+0x22c>
 8000c5a:	3902      	subs	r1, #2
 8000c5c:	443b      	add	r3, r7
 8000c5e:	1a9a      	subs	r2, r3, r2
 8000c60:	b2a3      	uxth	r3, r4
 8000c62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c72:	459c      	cmp	ip, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x8e>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c7c:	f080 80d6 	bcs.w	8000e2c <__udivmoddi4+0x230>
 8000c80:	459c      	cmp	ip, r3
 8000c82:	f240 80d3 	bls.w	8000e2c <__udivmoddi4+0x230>
 8000c86:	443b      	add	r3, r7
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8e:	eba3 030c 	sub.w	r3, r3, ip
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa2>
 8000c96:	40f3      	lsrs	r3, r6
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xb6>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb0>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa2>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x14c>
 8000cba:	4573      	cmp	r3, lr
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xc8>
 8000cbe:	4282      	cmp	r2, r0
 8000cc0:	f200 8105 	bhi.w	8000ece <__udivmoddi4+0x2d2>
 8000cc4:	1a84      	subs	r4, r0, r2
 8000cc6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	4690      	mov	r8, r2
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d0e5      	beq.n	8000c9e <__udivmoddi4+0xa2>
 8000cd2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd6:	e7e2      	b.n	8000c9e <__udivmoddi4+0xa2>
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f000 8090 	beq.w	8000dfe <__udivmoddi4+0x202>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f040 80a4 	bne.w	8000e30 <__udivmoddi4+0x234>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	0c03      	lsrs	r3, r0, #16
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	b280      	uxth	r0, r0
 8000cf2:	b2bc      	uxth	r4, r7
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cfa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d02:	fb04 f20c 	mul.w	r2, r4, ip
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x11e>
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d10:	d202      	bcs.n	8000d18 <__udivmoddi4+0x11c>
 8000d12:	429a      	cmp	r2, r3
 8000d14:	f200 80e0 	bhi.w	8000ed8 <__udivmoddi4+0x2dc>
 8000d18:	46c4      	mov	ip, r8
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d20:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d24:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d28:	fb02 f404 	mul.w	r4, r2, r4
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	d907      	bls.n	8000d40 <__udivmoddi4+0x144>
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x142>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f200 80ca 	bhi.w	8000ed2 <__udivmoddi4+0x2d6>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	1b1b      	subs	r3, r3, r4
 8000d42:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x98>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa0e f401 	lsl.w	r4, lr, r1
 8000d58:	fa20 f306 	lsr.w	r3, r0, r6
 8000d5c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d60:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d64:	4323      	orrs	r3, r4
 8000d66:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6a:	fa1f fc87 	uxth.w	ip, r7
 8000d6e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d72:	0c1c      	lsrs	r4, r3, #16
 8000d74:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d78:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d7c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1a0>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d8e:	f080 809c 	bcs.w	8000eca <__udivmoddi4+0x2ce>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	f240 8099 	bls.w	8000eca <__udivmoddi4+0x2ce>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	eba4 040e 	sub.w	r4, r4, lr
 8000da0:	fa1f fe83 	uxth.w	lr, r3
 8000da4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000db0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db4:	45a4      	cmp	ip, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1ce>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dbe:	f080 8082 	bcs.w	8000ec6 <__udivmoddi4+0x2ca>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d97f      	bls.n	8000ec6 <__udivmoddi4+0x2ca>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dce:	eba4 040c 	sub.w	r4, r4, ip
 8000dd2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd6:	4564      	cmp	r4, ip
 8000dd8:	4673      	mov	r3, lr
 8000dda:	46e1      	mov	r9, ip
 8000ddc:	d362      	bcc.n	8000ea4 <__udivmoddi4+0x2a8>
 8000dde:	d05f      	beq.n	8000ea0 <__udivmoddi4+0x2a4>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x1fe>
 8000de2:	ebb8 0203 	subs.w	r2, r8, r3
 8000de6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	fa22 f301 	lsr.w	r3, r2, r1
 8000df2:	431e      	orrs	r6, r3
 8000df4:	40cc      	lsrs	r4, r1
 8000df6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	e74f      	b.n	8000c9e <__udivmoddi4+0xa2>
 8000dfe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e02:	0c01      	lsrs	r1, r0, #16
 8000e04:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e08:	b280      	uxth	r0, r0
 8000e0a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4638      	mov	r0, r7
 8000e12:	463c      	mov	r4, r7
 8000e14:	46b8      	mov	r8, r7
 8000e16:	46be      	mov	lr, r7
 8000e18:	2620      	movs	r6, #32
 8000e1a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1e:	eba2 0208 	sub.w	r2, r2, r8
 8000e22:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e26:	e766      	b.n	8000cf6 <__udivmoddi4+0xfa>
 8000e28:	4601      	mov	r1, r0
 8000e2a:	e718      	b.n	8000c5e <__udivmoddi4+0x62>
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	e72c      	b.n	8000c8a <__udivmoddi4+0x8e>
 8000e30:	f1c6 0220 	rsb	r2, r6, #32
 8000e34:	fa2e f302 	lsr.w	r3, lr, r2
 8000e38:	40b7      	lsls	r7, r6
 8000e3a:	40b1      	lsls	r1, r6
 8000e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e44:	430a      	orrs	r2, r1
 8000e46:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e50:	0c11      	lsrs	r1, r2, #16
 8000e52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e56:	fb08 f904 	mul.w	r9, r8, r4
 8000e5a:	40b0      	lsls	r0, r6
 8000e5c:	4589      	cmp	r9, r1
 8000e5e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e62:	b280      	uxth	r0, r0
 8000e64:	d93e      	bls.n	8000ee4 <__udivmoddi4+0x2e8>
 8000e66:	1879      	adds	r1, r7, r1
 8000e68:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e6c:	d201      	bcs.n	8000e72 <__udivmoddi4+0x276>
 8000e6e:	4589      	cmp	r9, r1
 8000e70:	d81f      	bhi.n	8000eb2 <__udivmoddi4+0x2b6>
 8000e72:	eba1 0109 	sub.w	r1, r1, r9
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fb09 f804 	mul.w	r8, r9, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	b292      	uxth	r2, r2
 8000e84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e88:	4542      	cmp	r2, r8
 8000e8a:	d229      	bcs.n	8000ee0 <__udivmoddi4+0x2e4>
 8000e8c:	18ba      	adds	r2, r7, r2
 8000e8e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e92:	d2c4      	bcs.n	8000e1e <__udivmoddi4+0x222>
 8000e94:	4542      	cmp	r2, r8
 8000e96:	d2c2      	bcs.n	8000e1e <__udivmoddi4+0x222>
 8000e98:	f1a9 0102 	sub.w	r1, r9, #2
 8000e9c:	443a      	add	r2, r7
 8000e9e:	e7be      	b.n	8000e1e <__udivmoddi4+0x222>
 8000ea0:	45f0      	cmp	r8, lr
 8000ea2:	d29d      	bcs.n	8000de0 <__udivmoddi4+0x1e4>
 8000ea4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eac:	3801      	subs	r0, #1
 8000eae:	46e1      	mov	r9, ip
 8000eb0:	e796      	b.n	8000de0 <__udivmoddi4+0x1e4>
 8000eb2:	eba7 0909 	sub.w	r9, r7, r9
 8000eb6:	4449      	add	r1, r9
 8000eb8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ebc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec0:	fb09 f804 	mul.w	r8, r9, r4
 8000ec4:	e7db      	b.n	8000e7e <__udivmoddi4+0x282>
 8000ec6:	4673      	mov	r3, lr
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1ce>
 8000eca:	4650      	mov	r0, sl
 8000ecc:	e766      	b.n	8000d9c <__udivmoddi4+0x1a0>
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e6fd      	b.n	8000cce <__udivmoddi4+0xd2>
 8000ed2:	443b      	add	r3, r7
 8000ed4:	3a02      	subs	r2, #2
 8000ed6:	e733      	b.n	8000d40 <__udivmoddi4+0x144>
 8000ed8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000edc:	443b      	add	r3, r7
 8000ede:	e71c      	b.n	8000d1a <__udivmoddi4+0x11e>
 8000ee0:	4649      	mov	r1, r9
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x222>
 8000ee4:	eba1 0109 	sub.w	r1, r1, r9
 8000ee8:	46c4      	mov	ip, r8
 8000eea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eee:	fb09 f804 	mul.w	r8, r9, r4
 8000ef2:	e7c4      	b.n	8000e7e <__udivmoddi4+0x282>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4a07      	ldr	r2, [pc, #28]	@ (8000f24 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	4a06      	ldr	r2, [pc, #24]	@ (8000f28 <vApplicationGetIdleTaskMemory+0x30>)
 8000f0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2280      	movs	r2, #128	@ 0x80
 8000f14:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000208 	.word	0x20000208
 8000f28:	2000025c 	.word	0x2000025c
 8000f2c:	00000000 	.word	0x00000000

08000f30 <generateSignal>:
uint16_t sample_index = 0;
const float freq = 10.0f;  // 10 Hz waveform
const float phase_increment = 2 * PI * freq / SAMPLING_FREQ_HZ;

void generateSignal(uint8_t *tx_buffer)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b09a      	sub	sp, #104	@ 0x68
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    static float phase = 0.0f;
    static uint16_t sample_index = 0;

    const float freq = 10.0f;
 8000f38:	4ba3      	ldr	r3, [pc, #652]	@ (80011c8 <generateSignal+0x298>)
 8000f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const float phase_increment = 2 * PI * freq / SAMPLING_FREQ_HZ;
 8000f3c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000f3e:	f7ff fb03 	bl	8000548 <__aeabi_f2d>
 8000f42:	a39f      	add	r3, pc, #636	@ (adr r3, 80011c0 <generateSignal+0x290>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb56 	bl	80005f8 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b9c      	ldr	r3, [pc, #624]	@ (80011cc <generateSignal+0x29c>)
 8000f5a:	f7ff fc77 	bl	800084c <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	f7ff fde1 	bl	8000b2c <__aeabi_d2f>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	65bb      	str	r3, [r7, #88]	@ 0x58

    // 1. Sine Wave
    int32_t ch1 = (int32_t)(10 * sinf(phase));
 8000f6e:	4b98      	ldr	r3, [pc, #608]	@ (80011d0 <generateSignal+0x2a0>)
 8000f70:	edd3 7a00 	vldr	s15, [r3]
 8000f74:	eeb0 0a67 	vmov.f32	s0, s15
 8000f78:	f008 ff0e 	bl	8009d98 <sinf>
 8000f7c:	eef0 7a40 	vmov.f32	s15, s0
 8000f80:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f8c:	ee17 3a90 	vmov	r3, s15
 8000f90:	657b      	str	r3, [r7, #84]	@ 0x54

    // 2. Cosine Wave
    int32_t ch2 = (int32_t)(10 * cosf(phase));
 8000f92:	4b8f      	ldr	r3, [pc, #572]	@ (80011d0 <generateSignal+0x2a0>)
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9c:	f008 feb8 	bl	8009d10 <cosf>
 8000fa0:	eef0 7a40 	vmov.f32	s15, s0
 8000fa4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb0:	ee17 3a90 	vmov	r3, s15
 8000fb4:	653b      	str	r3, [r7, #80]	@ 0x50

    // 3. Sawtooth Wave (range -10 to +10)
    float saw = fmodf(phase, 2 * PI) / (2 * PI);  // 0.0 to 1.0
 8000fb6:	4b86      	ldr	r3, [pc, #536]	@ (80011d0 <generateSignal+0x2a0>)
 8000fb8:	edd3 7a00 	vldr	s15, [r3]
 8000fbc:	eddf 0a85 	vldr	s1, [pc, #532]	@ 80011d4 <generateSignal+0x2a4>
 8000fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc4:	f008 fe84 	bl	8009cd0 <fmodf>
 8000fc8:	ee10 3a10 	vmov	r3, s0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fabb 	bl	8000548 <__aeabi_f2d>
 8000fd2:	a37b      	add	r3, pc, #492	@ (adr r3, 80011c0 <generateSignal+0x290>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff fc38 	bl	800084c <__aeabi_ddiv>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fda2 	bl	8000b2c <__aeabi_d2f>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int32_t ch3 = (int32_t)(20 * saw - 10);       // -10 to 10
 8000fec:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000ff0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ffc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001004:	ee17 3a90 	vmov	r3, s15
 8001008:	64bb      	str	r3, [r7, #72]	@ 0x48

    // 4. Triangle Wave (range -10 to +10)
    float tri = 2.0f * fabsf(2.0f * saw - 1.0f);  // 0 to 2 -> 0 to 1 to 0
 800100a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800100e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001012:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001016:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800101a:	eef0 7ae7 	vabs.f32	s15, s15
 800101e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001022:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    int32_t ch4 = (int32_t)(20 * (tri - 0.5f));   // -10 to 10
 8001026:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800102a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800102e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001032:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103e:	ee17 3a90 	vmov	r3, s15
 8001042:	643b      	str	r3, [r7, #64]	@ 0x40

    // 5. Square Wave
    int32_t ch5 = (sinf(phase) > 0) ? 10 : -10;
 8001044:	4b62      	ldr	r3, [pc, #392]	@ (80011d0 <generateSignal+0x2a0>)
 8001046:	edd3 7a00 	vldr	s15, [r3]
 800104a:	eeb0 0a67 	vmov.f32	s0, s15
 800104e:	f008 fea3 	bl	8009d98 <sinf>
 8001052:	eef0 7a40 	vmov.f32	s15, s0
 8001056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	dd01      	ble.n	8001064 <generateSignal+0x134>
 8001060:	230a      	movs	r3, #10
 8001062:	e001      	b.n	8001068 <generateSignal+0x138>
 8001064:	f06f 0309 	mvn.w	r3, #9
 8001068:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // 6. White Noise
    int32_t ch6 = (rand() % 21) - 10;  // random value from -10 to 10
 800106a:	f007 fe0d 	bl	8008c88 <rand>
 800106e:	4601      	mov	r1, r0
 8001070:	4b59      	ldr	r3, [pc, #356]	@ (80011d8 <generateSignal+0x2a8>)
 8001072:	fb83 2301 	smull	r2, r3, r3, r1
 8001076:	109a      	asrs	r2, r3, #2
 8001078:	17cb      	asrs	r3, r1, #31
 800107a:	1ad2      	subs	r2, r2, r3
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	00da      	lsls	r2, r3, #3
 8001084:	1ad2      	subs	r2, r2, r3
 8001086:	1a8a      	subs	r2, r1, r2
 8001088:	f1a2 030a 	sub.w	r3, r2, #10
 800108c:	63bb      	str	r3, [r7, #56]	@ 0x38

    // 7. Step Function (every 100 samples)
    int32_t ch7 = (sample_index % 200 < 100) ? 10 : -10;
 800108e:	4b53      	ldr	r3, [pc, #332]	@ (80011dc <generateSignal+0x2ac>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	4a53      	ldr	r2, [pc, #332]	@ (80011e0 <generateSignal+0x2b0>)
 8001094:	fba2 1203 	umull	r1, r2, r2, r3
 8001098:	0992      	lsrs	r2, r2, #6
 800109a:	21c8      	movs	r1, #200	@ 0xc8
 800109c:	fb01 f202 	mul.w	r2, r1, r2
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	2b63      	cmp	r3, #99	@ 0x63
 80010a6:	d801      	bhi.n	80010ac <generateSignal+0x17c>
 80010a8:	230a      	movs	r3, #10
 80010aa:	e001      	b.n	80010b0 <generateSignal+0x180>
 80010ac:	f06f 0309 	mvn.w	r3, #9
 80010b0:	637b      	str	r3, [r7, #52]	@ 0x34

    // 8. Exponential Decay (simulate decay curve)
    float decay = expf(-phase);
 80010b2:	4b47      	ldr	r3, [pc, #284]	@ (80011d0 <generateSignal+0x2a0>)
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	eef1 7a67 	vneg.f32	s15, s15
 80010bc:	eeb0 0a67 	vmov.f32	s0, s15
 80010c0:	f008 fdd0 	bl	8009c64 <expf>
 80010c4:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    int32_t ch8 = (int32_t)(10 * decay);
 80010c8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80010cc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80010d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d8:	ee17 3a90 	vmov	r3, s15
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    int32_t values[CHANNELS] = {
 80010de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010f0:	61bb      	str	r3, [r7, #24]
 80010f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010f8:	623b      	str	r3, [r7, #32]
 80010fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8
    };

    // Pack into tx_buffer
    uint8_t *ptr = tx_buffer;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	667b      	str	r3, [r7, #100]	@ 0x64
    for (int ch = 0; ch < CHANNELS; ++ch)
 8001102:	2300      	movs	r3, #0
 8001104:	663b      	str	r3, [r7, #96]	@ 0x60
 8001106:	e024      	b.n	8001152 <generateSignal+0x222>
    {
        int32_t val = values[ch];
 8001108:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	3368      	adds	r3, #104	@ 0x68
 800110e:	443b      	add	r3, r7
 8001110:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
        *ptr++ = val & 0xFF;
 8001116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	667a      	str	r2, [r7, #100]	@ 0x64
 800111c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	701a      	strb	r2, [r3, #0]
        *ptr++ = (val >> 8) & 0xFF;
 8001122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001124:	1219      	asrs	r1, r3, #8
 8001126:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	667a      	str	r2, [r7, #100]	@ 0x64
 800112c:	b2ca      	uxtb	r2, r1
 800112e:	701a      	strb	r2, [r3, #0]
        *ptr++ = (val >> 16) & 0xFF;
 8001130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001132:	1419      	asrs	r1, r3, #16
 8001134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	667a      	str	r2, [r7, #100]	@ 0x64
 800113a:	b2ca      	uxtb	r2, r1
 800113c:	701a      	strb	r2, [r3, #0]
        *ptr++ = (val >> 24) & 0xFF;
 800113e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001140:	0e19      	lsrs	r1, r3, #24
 8001142:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	667a      	str	r2, [r7, #100]	@ 0x64
 8001148:	b2ca      	uxtb	r2, r1
 800114a:	701a      	strb	r2, [r3, #0]
    for (int ch = 0; ch < CHANNELS; ++ch)
 800114c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800114e:	3301      	adds	r3, #1
 8001150:	663b      	str	r3, [r7, #96]	@ 0x60
 8001152:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001154:	2b07      	cmp	r3, #7
 8001156:	ddd7      	ble.n	8001108 <generateSignal+0x1d8>
    }

    // Update state
    phase += phase_increment;
 8001158:	4b1d      	ldr	r3, [pc, #116]	@ (80011d0 <generateSignal+0x2a0>)
 800115a:	ed93 7a00 	vldr	s14, [r3]
 800115e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001166:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <generateSignal+0x2a0>)
 8001168:	edc3 7a00 	vstr	s15, [r3]
    if (phase > 2 * PI) phase -= 2 * PI;
 800116c:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <generateSignal+0x2a0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9e9 	bl	8000548 <__aeabi_f2d>
 8001176:	a312      	add	r3, pc, #72	@ (adr r3, 80011c0 <generateSignal+0x290>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fccc 	bl	8000b18 <__aeabi_dcmpgt>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d012      	beq.n	80011ac <generateSignal+0x27c>
 8001186:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <generateSignal+0x2a0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9dc 	bl	8000548 <__aeabi_f2d>
 8001190:	a30b      	add	r3, pc, #44	@ (adr r3, 80011c0 <generateSignal+0x290>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff f877 	bl	8000288 <__aeabi_dsub>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fcc3 	bl	8000b2c <__aeabi_d2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a09      	ldr	r2, [pc, #36]	@ (80011d0 <generateSignal+0x2a0>)
 80011aa:	6013      	str	r3, [r2, #0]
    sample_index++;
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <generateSignal+0x2ac>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <generateSignal+0x2ac>)
 80011b6:	801a      	strh	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	3768      	adds	r7, #104	@ 0x68
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	53c8d4f1 	.word	0x53c8d4f1
 80011c4:	401921fb 	.word	0x401921fb
 80011c8:	41200000 	.word	0x41200000
 80011cc:	4092c000 	.word	0x4092c000
 80011d0:	20000460 	.word	0x20000460
 80011d4:	40c90fdb 	.word	0x40c90fdb
 80011d8:	30c30c31 	.word	0x30c30c31
 80011dc:	20000464 	.word	0x20000464
 80011e0:	51eb851f 	.word	0x51eb851f

080011e4 <main>:




int main(void)
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
  HAL_Init();
 80011ea:	f000 fa71 	bl	80016d0 <HAL_Init>
  SystemClock_Config();
 80011ee:	f000 f84b 	bl	8001288 <SystemClock_Config>
  MX_GPIO_Init();
 80011f2:	f000 f8b5 	bl	8001360 <MX_GPIO_Init>

  osThreadDef(streamTask, StartStreamTask, osPriorityHigh, 0, 128);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <main+0x3c>)
 80011f8:	1d3c      	adds	r4, r7, #4
 80011fa:	461d      	mov	r5, r3
 80011fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  streamTaskHandle = osThreadCreate(osThread(streamTask), NULL);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f005 fab5 	bl	800677c <osThreadCreate>
 8001212:	4603      	mov	r3, r0
 8001214:	4a03      	ldr	r2, [pc, #12]	@ (8001224 <main+0x40>)
 8001216:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8001218:	f005 faa9 	bl	800676e <osKernelStart>

  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <main+0x38>
 8001220:	0800ab18 	.word	0x0800ab18
 8001224:	2000045c 	.word	0x2000045c

08001228 <StartStreamTask>:
  }
}


void StartStreamTask(void const * argument)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    uint8_t tx_buffer[TX_BUFFER_SIZE];

    MX_USB_DEVICE_Init();
 8001230:	f006 fd00 	bl	8007c34 <MX_USB_DEVICE_Init>

    while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8001234:	e002      	b.n	800123c <StartStreamTask+0x14>
    {
        osDelay(100);
 8001236:	2064      	movs	r0, #100	@ 0x64
 8001238:	f005 faec 	bl	8006814 <osDelay>
    while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800123c:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <StartStreamTask+0x58>)
 800123e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b03      	cmp	r3, #3
 8001246:	d1f6      	bne.n	8001236 <StartStreamTask+0xe>
    }

    while (1)
    {
        if (is_streaming)
 8001248:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <StartStreamTask+0x5c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d012      	beq.n	8001276 <StartStreamTask+0x4e>
        {
            generateSignal(tx_buffer);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe6b 	bl	8000f30 <generateSignal>

            if (USBD_CUSTOM_BULK_SendData(&hUsbDeviceFS, tx_buffer, TX_BUFFER_SIZE) == USBD_OK)
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	2220      	movs	r2, #32
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	@ (8001280 <StartStreamTask+0x58>)
 8001264:	f006 fd16 	bl	8007c94 <USBD_CUSTOM_BULK_SendData>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1ec      	bne.n	8001248 <StartStreamTask+0x20>
            {
                osDelay((DELAY_US + 999) / 1000);  // Ensure delay in ms
 800126e:	2001      	movs	r0, #1
 8001270:	f005 fad0 	bl	8006814 <osDelay>
 8001274:	e7e8      	b.n	8001248 <StartStreamTask+0x20>
            }
        }
        else
        {
            osDelay(10);
 8001276:	200a      	movs	r0, #10
 8001278:	f005 facc 	bl	8006814 <osDelay>
        if (is_streaming)
 800127c:	e7e4      	b.n	8001248 <StartStreamTask+0x20>
 800127e:	bf00      	nop
 8001280:	200041c8 	.word	0x200041c8
 8001284:	200044a4 	.word	0x200044a4

08001288 <SystemClock_Config>:
}*/



void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	@ 0x50
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	2230      	movs	r2, #48	@ 0x30
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f007 fe39 	bl	8008f0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <SystemClock_Config+0xd0>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	4a28      	ldr	r2, [pc, #160]	@ (8001358 <SystemClock_Config+0xd0>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80012bc:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <SystemClock_Config+0xd0>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	4b23      	ldr	r3, [pc, #140]	@ (800135c <SystemClock_Config+0xd4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012d4:	4a21      	ldr	r2, [pc, #132]	@ (800135c <SystemClock_Config+0xd4>)
 80012d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <SystemClock_Config+0xd4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e8:	2301      	movs	r3, #1
 80012ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f2:	2302      	movs	r3, #2
 80012f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012fc:	2319      	movs	r3, #25
 80012fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001300:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001304:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001306:	2304      	movs	r3, #4
 8001308:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800130a:	2307      	movs	r3, #7
 800130c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130e:	f107 0320 	add.w	r3, r7, #32
 8001312:	4618      	mov	r0, r3
 8001314:	f001 ff5c 	bl	80031d0 <HAL_RCC_OscConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800131e:	f000 f871 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001322:	230f      	movs	r3, #15
 8001324:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001326:	2302      	movs	r3, #2
 8001328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001332:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2102      	movs	r1, #2
 800133e:	4618      	mov	r0, r3
 8001340:	f002 f9be 	bl	80036c0 <HAL_RCC_ClockConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800134a:	f000 f85b 	bl	8001404 <Error_Handler>
  }
}
 800134e:	bf00      	nop
 8001350:	3750      	adds	r7, #80	@ 0x50
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000

08001360 <MX_GPIO_Init>:



static void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b20      	ldr	r3, [pc, #128]	@ (80013fc <MX_GPIO_Init+0x9c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a1f      	ldr	r2, [pc, #124]	@ (80013fc <MX_GPIO_Init+0x9c>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <MX_GPIO_Init+0x9c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <MX_GPIO_Init+0x9c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a18      	ldr	r2, [pc, #96]	@ (80013fc <MX_GPIO_Init+0x9c>)
 800139c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <MX_GPIO_Init+0x9c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_GPIO_Init+0x9c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <MX_GPIO_Init+0x9c>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_GPIO_Init+0x9c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <MX_GPIO_Init+0xa0>)
 80013d2:	f000 fca9 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4619      	mov	r1, r3
 80013ee:	4804      	ldr	r0, [pc, #16]	@ (8001400 <MX_GPIO_Init+0xa0>)
 80013f0:	f000 fb16 	bl	8001a20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020800 	.word	0x40020800

08001404 <Error_Handler>:


void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <Error_Handler+0x8>

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_MspInit+0x54>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <HAL_MspInit+0x54>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001424:	6453      	str	r3, [r2, #68]	@ 0x44
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <HAL_MspInit+0x54>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_MspInit+0x54>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <HAL_MspInit+0x54>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	@ 0x40
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_MspInit+0x54>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	210f      	movs	r1, #15
 8001452:	f06f 0001 	mvn.w	r0, #1
 8001456:	f000 faac 	bl	80019b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <NMI_Handler+0x4>

08001470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <MemManage_Handler+0x4>

08001480 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <UsageFault_Handler+0x4>

08001490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a2:	f000 f967 	bl	8001774 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014a6:	f005 ff45 	bl	8007334 <xTaskGetSchedulerState>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d001      	beq.n	80014b4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014b0:	f006 f982 	bl	80077b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <OTG_FS_IRQHandler+0x10>)
 80014be:	f000 fd90 	bl	8001fe2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200046a8 	.word	0x200046a8

080014cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return 1;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_kill>:

int _kill(int pid, int sig)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014e6:	f007 fd73 	bl	8008fd0 <__errno>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2216      	movs	r2, #22
 80014ee:	601a      	str	r2, [r3, #0]
  return -1;
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_exit>:

void _exit (int status)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001504:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ffe7 	bl	80014dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800150e:	bf00      	nop
 8001510:	e7fd      	b.n	800150e <_exit+0x12>

08001512 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e00a      	b.n	800153a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001524:	f3af 8000 	nop.w
 8001528:	4601      	mov	r1, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	60ba      	str	r2, [r7, #8]
 8001530:	b2ca      	uxtb	r2, r1
 8001532:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	dbf0      	blt.n	8001524 <_read+0x12>
  }

  return len;
 8001542:	687b      	ldr	r3, [r7, #4]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e009      	b.n	8001572 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	60ba      	str	r2, [r7, #8]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	dbf1      	blt.n	800155e <_write+0x12>
  }
  return len;
 800157a:	687b      	ldr	r3, [r7, #4]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_close>:

int _close(int file)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ac:	605a      	str	r2, [r3, #4]
  return 0;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_isatty>:

int _isatty(int file)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015c4:	2301      	movs	r3, #1
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f007 fcd8 	bl	8008fd0 <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20010000 	.word	0x20010000
 800164c:	00000400 	.word	0x00000400
 8001650:	20000468 	.word	0x20000468
 8001654:	20004d30 	.word	0x20004d30

08001658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <SystemInit+0x20>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001662:	4a05      	ldr	r2, [pc, #20]	@ (8001678 <SystemInit+0x20>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001680:	f7ff ffea 	bl	8001658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001686:	490d      	ldr	r1, [pc, #52]	@ (80016bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800169c:	4c0a      	ldr	r4, [pc, #40]	@ (80016c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016aa:	f007 fc97 	bl	8008fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ae:	f7ff fd99 	bl	80011e4 <main>
  bx  lr    
 80016b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016bc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80016c0:	0800b098 	.word	0x0800b098
  ldr r2, =_sbss
 80016c4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80016c8:	20004d30 	.word	0x20004d30

080016cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <HAL_Init+0x40>)
 80016da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <HAL_Init+0x40>)
 80016e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a07      	ldr	r2, [pc, #28]	@ (8001710 <HAL_Init+0x40>)
 80016f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f000 f94f 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fe:	200f      	movs	r0, #15
 8001700:	f000 f808 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001704:	f7ff fe84 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_InitTick+0x54>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_InitTick+0x58>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172a:	fbb3 f3f1 	udiv	r3, r3, r1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f967 	bl	8001a06 <HAL_SYSTICK_Config>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e00e      	b.n	8001760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d80a      	bhi.n	800175e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001750:	f000 f92f 	bl	80019b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001754:	4a06      	ldr	r2, [pc, #24]	@ (8001770 <HAL_InitTick+0x5c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000000 	.word	0x20000000
 800176c:	20000008 	.word	0x20000008
 8001770:	20000004 	.word	0x20000004

08001774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008
 8001798:	2000046c 	.word	0x2000046c

0800179c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	2000046c 	.word	0x2000046c

080017b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ffee 	bl	800179c <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_Delay+0x44>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffde 	bl	800179c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	@ (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	@ (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	@ (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	@ 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800197c:	f7ff ff8e 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff29 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff3e 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff8e 	bl	80018f0 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5d 	bl	800189c <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff31 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	@ 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	e159      	b.n	8001cf0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	f040 8148 	bne.w	8001cea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d005      	beq.n	8001a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d130      	bne.n	8001ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 0201 	and.w	r2, r3, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d017      	beq.n	8001b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d123      	bne.n	8001b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	08da      	lsrs	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3208      	adds	r2, #8
 8001b5e:	69b9      	ldr	r1, [r7, #24]
 8001b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0203 	and.w	r2, r3, #3
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80a2 	beq.w	8001cea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b57      	ldr	r3, [pc, #348]	@ (8001d08 <HAL_GPIO_Init+0x2e8>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	4a56      	ldr	r2, [pc, #344]	@ (8001d08 <HAL_GPIO_Init+0x2e8>)
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb6:	4b54      	ldr	r3, [pc, #336]	@ (8001d08 <HAL_GPIO_Init+0x2e8>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc2:	4a52      	ldr	r2, [pc, #328]	@ (8001d0c <HAL_GPIO_Init+0x2ec>)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	220f      	movs	r2, #15
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a49      	ldr	r2, [pc, #292]	@ (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d019      	beq.n	8001c22 <HAL_GPIO_Init+0x202>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a48      	ldr	r2, [pc, #288]	@ (8001d14 <HAL_GPIO_Init+0x2f4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x1fe>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a47      	ldr	r2, [pc, #284]	@ (8001d18 <HAL_GPIO_Init+0x2f8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x1fa>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a46      	ldr	r2, [pc, #280]	@ (8001d1c <HAL_GPIO_Init+0x2fc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x1f6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a45      	ldr	r2, [pc, #276]	@ (8001d20 <HAL_GPIO_Init+0x300>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x1f2>
 8001c0e:	2304      	movs	r3, #4
 8001c10:	e008      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c16:	2303      	movs	r3, #3
 8001c18:	e004      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e002      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c22:	2300      	movs	r3, #0
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	f002 0203 	and.w	r2, r2, #3
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	4093      	lsls	r3, r2
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c34:	4935      	ldr	r1, [pc, #212]	@ (8001d0c <HAL_GPIO_Init+0x2ec>)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c42:	4b38      	ldr	r3, [pc, #224]	@ (8001d24 <HAL_GPIO_Init+0x304>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c66:	4a2f      	ldr	r2, [pc, #188]	@ (8001d24 <HAL_GPIO_Init+0x304>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d24 <HAL_GPIO_Init+0x304>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c90:	4a24      	ldr	r2, [pc, #144]	@ (8001d24 <HAL_GPIO_Init+0x304>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c96:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <HAL_GPIO_Init+0x304>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cba:	4a1a      	ldr	r2, [pc, #104]	@ (8001d24 <HAL_GPIO_Init+0x304>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <HAL_GPIO_Init+0x304>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d24 <HAL_GPIO_Init+0x304>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b0f      	cmp	r3, #15
 8001cf4:	f67f aea2 	bls.w	8001a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3724      	adds	r7, #36	@ 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40013800 	.word	0x40013800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020400 	.word	0x40020400
 8001d18:	40020800 	.word	0x40020800
 8001d1c:	40020c00 	.word	0x40020c00
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40013c00 	.word	0x40013c00

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d38:	787b      	ldrb	r3, [r7, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d44:	e003      	b.n	8001d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d46:	887b      	ldrh	r3, [r7, #2]
 8001d48:	041a      	lsls	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	619a      	str	r2, [r3, #24]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af02      	add	r7, sp, #8
 8001d60:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e101      	b.n	8001f70 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f006 fc86 	bl	8008698 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d9a:	d102      	bne.n	8001da2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f001 ff59 	bl	8003c5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7c1a      	ldrb	r2, [r3, #16]
 8001db4:	f88d 2000 	strb.w	r2, [sp]
 8001db8:	3304      	adds	r3, #4
 8001dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dbc:	f001 fe38 	bl	8003a30 <USB_CoreInit>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0ce      	b.n	8001f70 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 ff51 	bl	8003c80 <USB_SetCurrentMode>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0bf      	b.n	8001f70 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e04a      	b.n	8001e8c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	3315      	adds	r3, #21
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	3314      	adds	r3, #20
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	b298      	uxth	r0, r3
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	332e      	adds	r3, #46	@ 0x2e
 8001e32:	4602      	mov	r2, r0
 8001e34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	3318      	adds	r3, #24
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	331c      	adds	r3, #28
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	3320      	adds	r3, #32
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3324      	adds	r3, #36	@ 0x24
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	791b      	ldrb	r3, [r3, #4]
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d3af      	bcc.n	8001df6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	e044      	b.n	8001f26 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	3301      	adds	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	791b      	ldrb	r3, [r3, #4]
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3b5      	bcc.n	8001e9c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7c1a      	ldrb	r2, [r3, #16]
 8001f38:	f88d 2000 	strb.w	r2, [sp]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f40:	f001 feea 	bl	8003d18 <USB_DevInit>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00c      	b.n	8001f70 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 ff34 	bl	8004dd6 <USB_DevDisconnect>

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_PCD_Start+0x1c>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e022      	b.n	8001fda <HAL_PCD_Start+0x62>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d105      	bne.n	8001fbc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 fe3b 	bl	8003c3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f002 fee2 	bl	8004d94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fe2:	b590      	push	{r4, r7, lr}
 8001fe4:	b08d      	sub	sp, #52	@ 0x34
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 ffa0 	bl	8004f3e <USB_GetMode>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	f040 848c 	bne.w	800291e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f002 ff04 	bl	8004e18 <USB_ReadInterrupts>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8482 	beq.w	800291c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f002 fef1 	bl	8004e18 <USB_ReadInterrupts>
 8002036:	4603      	mov	r3, r0
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b02      	cmp	r3, #2
 800203e:	d107      	bne.n	8002050 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f002 0202 	and.w	r2, r2, #2
 800204e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f002 fedf 	bl	8004e18 <USB_ReadInterrupts>
 800205a:	4603      	mov	r3, r0
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b10      	cmp	r3, #16
 8002062:	d161      	bne.n	8002128 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0210 	bic.w	r2, r2, #16
 8002072:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	f003 020f 	and.w	r2, r3, #15
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800209a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800209e:	d124      	bne.n	80020ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d035      	beq.n	8002118 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	6a38      	ldr	r0, [r7, #32]
 80020c0:	f002 fd16 	bl	8004af0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020d0:	441a      	add	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020e2:	441a      	add	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	615a      	str	r2, [r3, #20]
 80020e8:	e016      	b.n	8002118 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80020f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80020f4:	d110      	bne.n	8002118 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020fc:	2208      	movs	r2, #8
 80020fe:	4619      	mov	r1, r3
 8002100:	6a38      	ldr	r0, [r7, #32]
 8002102:	f002 fcf5 	bl	8004af0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002112:	441a      	add	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699a      	ldr	r2, [r3, #24]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0210 	orr.w	r2, r2, #16
 8002126:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fe73 	bl	8004e18 <USB_ReadInterrupts>
 8002132:	4603      	mov	r3, r0
 8002134:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002138:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800213c:	f040 80a7 	bne.w	800228e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f002 fe78 	bl	8004e3e <USB_ReadDevAllOutEpInterrupt>
 800214e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002150:	e099      	b.n	8002286 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 808e 	beq.w	800227a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f002 fe9c 	bl	8004ea6 <USB_ReadDevOutEPInterrupt>
 800216e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00c      	beq.n	8002194 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002186:	461a      	mov	r2, r3
 8002188:	2301      	movs	r3, #1
 800218a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800218c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fe8c 	bl	8002eac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00c      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021aa:	461a      	mov	r2, r3
 80021ac:	2308      	movs	r3, #8
 80021ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80021b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 ff62 	bl	800307c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ce:	461a      	mov	r2, r3
 80021d0:	2310      	movs	r3, #16
 80021d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d030      	beq.n	8002240 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e6:	2b80      	cmp	r3, #128	@ 0x80
 80021e8:	d109      	bne.n	80021fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	78db      	ldrb	r3, [r3, #3]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d108      	bne.n	800222e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2200      	movs	r2, #0
 8002220:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f006 fb31 	bl	8008890 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800223a:	461a      	mov	r2, r3
 800223c:	2302      	movs	r3, #2
 800223e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002256:	461a      	mov	r2, r3
 8002258:	2320      	movs	r3, #32
 800225a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	4413      	add	r3, r2
 800226e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002272:	461a      	mov	r2, r3
 8002274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002278:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	3301      	adds	r3, #1
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002282:	085b      	lsrs	r3, r3, #1
 8002284:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002288:	2b00      	cmp	r3, #0
 800228a:	f47f af62 	bne.w	8002152 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f002 fdc0 	bl	8004e18 <USB_ReadInterrupts>
 8002298:	4603      	mov	r3, r0
 800229a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800229e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80022a2:	f040 80db 	bne.w	800245c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 fde1 	bl	8004e72 <USB_ReadDevAllInEpInterrupt>
 80022b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80022b6:	e0cd      	b.n	8002454 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80022b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80c2 	beq.w	8002448 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fe07 	bl	8004ee2 <USB_ReadDevInEPInterrupt>
 80022d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d057      	beq.n	8002390 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	2201      	movs	r2, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69f9      	ldr	r1, [r7, #28]
 80022fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002300:	4013      	ands	r3, r2
 8002302:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	4413      	add	r3, r2
 800230c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002310:	461a      	mov	r2, r3
 8002312:	2301      	movs	r3, #1
 8002314:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	799b      	ldrb	r3, [r3, #6]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d132      	bne.n	8002384 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3320      	adds	r3, #32
 800232e:	6819      	ldr	r1, [r3, #0]
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4403      	add	r3, r0
 800233e:	331c      	adds	r3, #28
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4419      	add	r1, r3
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4403      	add	r3, r0
 8002352:	3320      	adds	r3, #32
 8002354:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	2b00      	cmp	r3, #0
 800235a:	d113      	bne.n	8002384 <HAL_PCD_IRQHandler+0x3a2>
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3324      	adds	r3, #36	@ 0x24
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d108      	bne.n	8002384 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800237c:	461a      	mov	r2, r3
 800237e:	2101      	movs	r1, #1
 8002380:	f002 fe0e 	bl	8004fa0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4619      	mov	r1, r3
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f006 fa05 	bl	800879a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023a6:	461a      	mov	r2, r3
 80023a8:	2308      	movs	r3, #8
 80023aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023c2:	461a      	mov	r2, r3
 80023c4:	2310      	movs	r3, #16
 80023c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023de:	461a      	mov	r2, r3
 80023e0:	2340      	movs	r3, #64	@ 0x40
 80023e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d023      	beq.n	8002436 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80023ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023f0:	6a38      	ldr	r0, [r7, #32]
 80023f2:	f001 fdf5 	bl	8003fe0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80023f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	3310      	adds	r3, #16
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	3304      	adds	r3, #4
 8002408:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	78db      	ldrb	r3, [r3, #3]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d108      	bne.n	8002424 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2200      	movs	r2, #0
 8002416:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f006 fa48 	bl	80088b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002430:	461a      	mov	r2, r3
 8002432:	2302      	movs	r3, #2
 8002434:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002440:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fca5 	bl	8002d92 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	3301      	adds	r3, #1
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800244e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002450:	085b      	lsrs	r3, r3, #1
 8002452:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	f47f af2e 	bne.w	80022b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f002 fcd9 	bl	8004e18 <USB_ReadInterrupts>
 8002466:	4603      	mov	r3, r0
 8002468:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800246c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002470:	d122      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800248c:	2b01      	cmp	r3, #1
 800248e:	d108      	bne.n	80024a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002498:	2100      	movs	r1, #0
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fe8c 	bl	80031b8 <HAL_PCDEx_LPM_Callback>
 80024a0:	e002      	b.n	80024a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f006 f9e6 	bl	8008874 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80024b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 fcab 	bl	8004e18 <USB_ReadInterrupts>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024cc:	d112      	bne.n	80024f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d102      	bne.n	80024e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f006 f9a2 	bl	8008828 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80024f2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f002 fc8d 	bl	8004e18 <USB_ReadInterrupts>
 80024fe:	4603      	mov	r3, r0
 8002500:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002508:	f040 80b7 	bne.w	800267a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2110      	movs	r1, #16
 8002526:	4618      	mov	r0, r3
 8002528:	f001 fd5a 	bl	8003fe0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252c:	2300      	movs	r3, #0
 800252e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002530:	e046      	b.n	80025c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800253e:	461a      	mov	r2, r3
 8002540:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002544:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002556:	0151      	lsls	r1, r2, #5
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	440a      	add	r2, r1
 800255c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002560:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002564:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002572:	461a      	mov	r2, r3
 8002574:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002578:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800257a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800258a:	0151      	lsls	r1, r2, #5
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	440a      	add	r2, r1
 8002590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002594:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002598:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800259a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025aa:	0151      	lsls	r1, r2, #5
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	440a      	add	r2, r1
 80025b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80025b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80025b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025bc:	3301      	adds	r3, #1
 80025be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	791b      	ldrb	r3, [r3, #4]
 80025c4:	461a      	mov	r2, r3
 80025c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d3b2      	bcc.n	8002532 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025da:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80025de:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7bdb      	ldrb	r3, [r3, #15]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d016      	beq.n	8002616 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025f8:	f043 030b 	orr.w	r3, r3, #11
 80025fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800260e:	f043 030b 	orr.w	r3, r3, #11
 8002612:	6453      	str	r3, [r2, #68]	@ 0x44
 8002614:	e015      	b.n	8002642 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002624:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002628:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800262c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800263c:	f043 030b 	orr.w	r3, r3, #11
 8002640:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002650:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002654:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002664:	461a      	mov	r2, r3
 8002666:	f002 fc9b 	bl	8004fa0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f002 fbca 	bl	8004e18 <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800268a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800268e:	d123      	bne.n	80026d8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f002 fc60 	bl	8004f5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f001 fd17 	bl	80040d2 <USB_GetDevSpeed>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681c      	ldr	r4, [r3, #0]
 80026b0:	f001 f9b2 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 80026b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026ba:	461a      	mov	r2, r3
 80026bc:	4620      	mov	r0, r4
 80026be:	f001 fa1b 	bl	8003af8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f006 f891 	bl	80087ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80026d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f002 fb9b 	bl	8004e18 <USB_ReadInterrupts>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d10a      	bne.n	8002702 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f006 f86e 	bl	80087ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f002 0208 	and.w	r2, r2, #8
 8002700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f002 fb86 	bl	8004e18 <USB_ReadInterrupts>
 800270c:	4603      	mov	r3, r0
 800270e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002712:	2b80      	cmp	r3, #128	@ 0x80
 8002714:	d123      	bne.n	800275e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002722:	2301      	movs	r3, #1
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
 8002726:	e014      	b.n	8002752 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	b2db      	uxtb	r3, r3
 8002744:	4619      	mov	r1, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 faf2 	bl	8002d30 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	3301      	adds	r3, #1
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	791b      	ldrb	r3, [r3, #4]
 8002756:	461a      	mov	r2, r3
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	4293      	cmp	r3, r2
 800275c:	d3e4      	bcc.n	8002728 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f002 fb58 	bl	8004e18 <USB_ReadInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800276e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002772:	d13c      	bne.n	80027ee <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002774:	2301      	movs	r3, #1
 8002776:	627b      	str	r3, [r7, #36]	@ 0x24
 8002778:	e02b      	b.n	80027d2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4413      	add	r3, r2
 8002782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3318      	adds	r3, #24
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d115      	bne.n	80027cc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80027a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da12      	bge.n	80027cc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	3317      	adds	r3, #23
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	4619      	mov	r1, r3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fab2 	bl	8002d30 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	3301      	adds	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	791b      	ldrb	r3, [r3, #4]
 80027d6:	461a      	mov	r2, r3
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	4293      	cmp	r3, r2
 80027dc:	d3cd      	bcc.n	800277a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80027ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 fb10 	bl	8004e18 <USB_ReadInterrupts>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002802:	d156      	bne.n	80028b2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002804:	2301      	movs	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
 8002808:	e045      	b.n	8002896 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d12e      	bne.n	8002890 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002832:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002834:	2b00      	cmp	r3, #0
 8002836:	da2b      	bge.n	8002890 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	0c1a      	lsrs	r2, r3, #16
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002842:	4053      	eors	r3, r2
 8002844:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002848:	2b00      	cmp	r3, #0
 800284a:	d121      	bne.n	8002890 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002888:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800288c:	6053      	str	r3, [r2, #4]
            break;
 800288e:	e008      	b.n	80028a2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	3301      	adds	r3, #1
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	791b      	ldrb	r3, [r3, #4]
 800289a:	461a      	mov	r2, r3
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	4293      	cmp	r3, r2
 80028a0:	d3b3      	bcc.n	800280a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80028b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 faae 	bl	8004e18 <USB_ReadInterrupts>
 80028bc:	4603      	mov	r3, r0
 80028be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80028c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c6:	d10a      	bne.n	80028de <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f006 f805 	bl	80088d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80028dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f002 fa98 	bl	8004e18 <USB_ReadInterrupts>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d115      	bne.n	800291e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f005 fff5 	bl	80088f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	e000      	b.n	800291e <HAL_PCD_IRQHandler+0x93c>
      return;
 800291c:	bf00      	nop
    }
  }
}
 800291e:	3734      	adds	r7, #52	@ 0x34
 8002920:	46bd      	mov	sp, r7
 8002922:	bd90      	pop	{r4, r7, pc}

08002924 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_PCD_SetAddress+0x1a>
 800293a:	2302      	movs	r3, #2
 800293c:	e012      	b.n	8002964 <HAL_PCD_SetAddress+0x40>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f002 f9f7 	bl	8004d48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	4608      	mov	r0, r1
 8002976:	4611      	mov	r1, r2
 8002978:	461a      	mov	r2, r3
 800297a:	4603      	mov	r3, r0
 800297c:	70fb      	strb	r3, [r7, #3]
 800297e:	460b      	mov	r3, r1
 8002980:	803b      	strh	r3, [r7, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800298a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800298e:	2b00      	cmp	r3, #0
 8002990:	da0f      	bge.n	80029b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	f003 020f 	and.w	r2, r3, #15
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	3310      	adds	r3, #16
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	3304      	adds	r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	705a      	strb	r2, [r3, #1]
 80029b0:	e00f      	b.n	80029d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 020f 	and.w	r2, r3, #15
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	3304      	adds	r3, #4
 80029ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80029de:	883b      	ldrh	r3, [r7, #0]
 80029e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	78ba      	ldrb	r2, [r7, #2]
 80029ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	785b      	ldrb	r3, [r3, #1]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a00:	78bb      	ldrb	r3, [r7, #2]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d102      	bne.n	8002a0c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_PCD_EP_Open+0xae>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e00e      	b.n	8002a38 <HAL_PCD_EP_Open+0xcc>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68f9      	ldr	r1, [r7, #12]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 fb77 	bl	800411c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002a36:	7afb      	ldrb	r3, [r7, #11]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	da0f      	bge.n	8002a74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	f003 020f 	and.w	r2, r3, #15
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	3310      	adds	r3, #16
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	3304      	adds	r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	705a      	strb	r2, [r3, #1]
 8002a72:	e00f      	b.n	8002a94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	f003 020f 	and.w	r2, r3, #15
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_PCD_EP_Close+0x6e>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e00e      	b.n	8002acc <HAL_PCD_EP_Close+0x8c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68f9      	ldr	r1, [r7, #12]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 fbb5 	bl	800422c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ae4:	7afb      	ldrb	r3, [r7, #11]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2200      	movs	r2, #0
 8002b14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b16:	7afb      	ldrb	r3, [r7, #11]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	799b      	ldrb	r3, [r3, #6]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d102      	bne.n	8002b30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	799b      	ldrb	r3, [r3, #6]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	6979      	ldr	r1, [r7, #20]
 8002b3c:	f001 fc52 	bl	80043e4 <USB_EPStartXfer>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b086      	sub	sp, #24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	460b      	mov	r3, r1
 8002b58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	f003 020f 	and.w	r2, r3, #15
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	3310      	adds	r3, #16
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3304      	adds	r3, #4
 8002b70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2200      	movs	r2, #0
 8002b82:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2201      	movs	r2, #1
 8002b88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	799b      	ldrb	r3, [r3, #6]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d102      	bne.n	8002ba4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	799b      	ldrb	r3, [r3, #6]
 8002bac:	461a      	mov	r2, r3
 8002bae:	6979      	ldr	r1, [r7, #20]
 8002bb0:	f001 fc18 	bl	80043e4 <USB_EPStartXfer>

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	7912      	ldrb	r2, [r2, #4]
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e04f      	b.n	8002c7c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	da0f      	bge.n	8002c04 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	f003 020f 	and.w	r2, r3, #15
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	3310      	adds	r3, #16
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	705a      	strb	r2, [r3, #1]
 8002c02:	e00d      	b.n	8002c20 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	3304      	adds	r3, #4
 8002c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_PCD_EP_SetStall+0x82>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e01d      	b.n	8002c7c <HAL_PCD_EP_SetStall+0xbe>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68f9      	ldr	r1, [r7, #12]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 ffa6 	bl	8004ba0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7999      	ldrb	r1, [r3, #6]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f002 f997 	bl	8004fa0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	7912      	ldrb	r2, [r2, #4]
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e042      	b.n	8002d28 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	da0f      	bge.n	8002cca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 020f 	and.w	r2, r3, #15
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	3310      	adds	r3, #16
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	705a      	strb	r2, [r3, #1]
 8002cc8:	e00f      	b.n	8002cea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	f003 020f 	and.w	r2, r3, #15
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_PCD_EP_ClrStall+0x86>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e00e      	b.n	8002d28 <HAL_PCD_EP_ClrStall+0xa4>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68f9      	ldr	r1, [r7, #12]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 ffaf 	bl	8004c7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	da0c      	bge.n	8002d5e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	f003 020f 	and.w	r2, r3, #15
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	3310      	adds	r3, #16
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	e00c      	b.n	8002d78 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	f003 020f 	and.w	r2, r3, #15
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	3304      	adds	r3, #4
 8002d76:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68f9      	ldr	r1, [r7, #12]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f001 fdce 	bl	8004920 <USB_EPStopXfer>
 8002d84:	4603      	mov	r3, r0
 8002d86:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d88:	7afb      	ldrb	r3, [r7, #11]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b08a      	sub	sp, #40	@ 0x28
 8002d96:	af02      	add	r7, sp, #8
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	3310      	adds	r3, #16
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	3304      	adds	r3, #4
 8002db8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d901      	bls.n	8002dca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e06b      	b.n	8002ea2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d902      	bls.n	8002de6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3303      	adds	r3, #3
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dee:	e02a      	b.n	8002e46 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d902      	bls.n	8002e0c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	3303      	adds	r3, #3
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68d9      	ldr	r1, [r3, #12]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	4603      	mov	r3, r0
 8002e28:	6978      	ldr	r0, [r7, #20]
 8002e2a:	f001 fe23 	bl	8004a74 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	441a      	add	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	441a      	add	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d809      	bhi.n	8002e70 <PCD_WriteEmptyTxFifo+0xde>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d203      	bcs.n	8002e70 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1bf      	bne.n	8002df0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d811      	bhi.n	8002ea0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	2201      	movs	r2, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	6939      	ldr	r1, [r7, #16]
 8002e98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3720      	adds	r7, #32
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	333c      	adds	r3, #60	@ 0x3c
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	799b      	ldrb	r3, [r3, #6]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d17b      	bne.n	8002fda <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d015      	beq.n	8002f18 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	4a61      	ldr	r2, [pc, #388]	@ (8003074 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	f240 80b9 	bls.w	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80b3 	beq.w	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f14:	6093      	str	r3, [r2, #8]
 8002f16:	e0a7      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2320      	movs	r3, #32
 8002f32:	6093      	str	r3, [r2, #8]
 8002f34:	e098      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 8093 	bne.w	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	4a4b      	ldr	r2, [pc, #300]	@ (8003074 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d90f      	bls.n	8002f6a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f60:	461a      	mov	r2, r3
 8002f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f66:	6093      	str	r3, [r2, #8]
 8002f68:	e07e      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a1a      	ldr	r2, [r3, #32]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	0159      	lsls	r1, r3, #5
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f96:	1ad2      	subs	r2, r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d114      	bne.n	8002fcc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	f001 fff2 	bl	8004fa0 <USB_EP0_OutStart>
 8002fbc:	e006      	b.n	8002fcc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	441a      	add	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f005 fbc6 	bl	8008764 <HAL_PCD_DataOutStageCallback>
 8002fd8:	e046      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	4a26      	ldr	r2, [pc, #152]	@ (8003078 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d124      	bne.n	800302c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	e032      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	4413      	add	r3, r2
 8003014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003018:	461a      	mov	r2, r3
 800301a:	2320      	movs	r3, #32
 800301c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f005 fb9d 	bl	8008764 <HAL_PCD_DataOutStageCallback>
 800302a:	e01d      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d114      	bne.n	800305c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d108      	bne.n	800305c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003054:	461a      	mov	r2, r3
 8003056:	2100      	movs	r1, #0
 8003058:	f001 ffa2 	bl	8004fa0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f005 fb7e 	bl	8008764 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3720      	adds	r7, #32
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	4f54300a 	.word	0x4f54300a
 8003078:	4f54310a 	.word	0x4f54310a

0800307c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	333c      	adds	r3, #60	@ 0x3c
 8003094:	3304      	adds	r3, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4a15      	ldr	r2, [pc, #84]	@ (8003104 <PCD_EP_OutSetupPacket_int+0x88>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d90e      	bls.n	80030d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030c8:	461a      	mov	r2, r3
 80030ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f005 fb35 	bl	8008740 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <PCD_EP_OutSetupPacket_int+0x88>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d90c      	bls.n	80030f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	799b      	ldrb	r3, [r3, #6]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d108      	bne.n	80030f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030f0:	461a      	mov	r2, r3
 80030f2:	2101      	movs	r1, #1
 80030f4:	f001 ff54 	bl	8004fa0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	4f54300a 	.word	0x4f54300a

08003108 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
 8003114:	4613      	mov	r3, r2
 8003116:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d107      	bne.n	8003136 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003126:	883b      	ldrh	r3, [r7, #0]
 8003128:	0419      	lsls	r1, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	430a      	orrs	r2, r1
 8003132:	629a      	str	r2, [r3, #40]	@ 0x28
 8003134:	e028      	b.n	8003188 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4413      	add	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	e00d      	b.n	8003166 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	3340      	adds	r3, #64	@ 0x40
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	4413      	add	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	3301      	adds	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	3b01      	subs	r3, #1
 800316c:	429a      	cmp	r2, r3
 800316e:	d3ec      	bcc.n	800314a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003170:	883b      	ldrh	r3, [r7, #0]
 8003172:	0418      	lsls	r0, r3, #16
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6819      	ldr	r1, [r3, #0]
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	3b01      	subs	r3, #1
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	4302      	orrs	r2, r0
 8003180:	3340      	adds	r3, #64	@ 0x40
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	887a      	ldrh	r2, [r7, #2]
 80031a8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e267      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d075      	beq.n	80032da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031ee:	4b88      	ldr	r3, [pc, #544]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d00c      	beq.n	8003214 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fa:	4b85      	ldr	r3, [pc, #532]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003202:	2b08      	cmp	r3, #8
 8003204:	d112      	bne.n	800322c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003206:	4b82      	ldr	r3, [pc, #520]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003212:	d10b      	bne.n	800322c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	4b7e      	ldr	r3, [pc, #504]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d05b      	beq.n	80032d8 <HAL_RCC_OscConfig+0x108>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d157      	bne.n	80032d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e242      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003234:	d106      	bne.n	8003244 <HAL_RCC_OscConfig+0x74>
 8003236:	4b76      	ldr	r3, [pc, #472]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a75      	ldr	r2, [pc, #468]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e01d      	b.n	8003280 <HAL_RCC_OscConfig+0xb0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0x98>
 800324e:	4b70      	ldr	r3, [pc, #448]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6f      	ldr	r2, [pc, #444]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b6d      	ldr	r3, [pc, #436]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6c      	ldr	r2, [pc, #432]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0xb0>
 8003268:	4b69      	ldr	r3, [pc, #420]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a68      	ldr	r2, [pc, #416]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b66      	ldr	r3, [pc, #408]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a65      	ldr	r2, [pc, #404]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800327e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe fa88 	bl	800179c <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7fe fa84 	bl	800179c <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	@ 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e207      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0xc0>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fe fa74 	bl	800179c <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fe fa70 	bl	800179c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	@ 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1f3      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	4b51      	ldr	r3, [pc, #324]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0xe8>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d063      	beq.n	80033ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f2:	4b47      	ldr	r3, [pc, #284]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11c      	bne.n	8003338 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fe:	4b44      	ldr	r3, [pc, #272]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d116      	bne.n	8003338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	4b41      	ldr	r3, [pc, #260]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_RCC_OscConfig+0x152>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e1c7      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003322:	4b3b      	ldr	r3, [pc, #236]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4937      	ldr	r1, [pc, #220]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	e03a      	b.n	80033ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003340:	4b34      	ldr	r3, [pc, #208]	@ (8003414 <HAL_RCC_OscConfig+0x244>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fe fa29 	bl	800179c <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334e:	f7fe fa25 	bl	800179c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e1a8      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	4b2b      	ldr	r3, [pc, #172]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336c:	4b28      	ldr	r3, [pc, #160]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4925      	ldr	r1, [pc, #148]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
 8003380:	e015      	b.n	80033ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003382:	4b24      	ldr	r3, [pc, #144]	@ (8003414 <HAL_RCC_OscConfig+0x244>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fe fa08 	bl	800179c <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003390:	f7fe fa04 	bl	800179c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e187      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d036      	beq.n	8003428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d016      	beq.n	80033f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c2:	4b15      	ldr	r3, [pc, #84]	@ (8003418 <HAL_RCC_OscConfig+0x248>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fe f9e8 	bl	800179c <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fe f9e4 	bl	800179c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e167      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003410 <HAL_RCC_OscConfig+0x240>)
 80033e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x200>
 80033ee:	e01b      	b.n	8003428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f0:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_OscConfig+0x248>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7fe f9d1 	bl	800179c <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	e00e      	b.n	800341c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033fe:	f7fe f9cd 	bl	800179c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d907      	bls.n	800341c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e150      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
 8003410:	40023800 	.word	0x40023800
 8003414:	42470000 	.word	0x42470000
 8003418:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	4b88      	ldr	r3, [pc, #544]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 800341e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ea      	bne.n	80033fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8097 	beq.w	8003564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343a:	4b81      	ldr	r3, [pc, #516]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10f      	bne.n	8003466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	4b7d      	ldr	r3, [pc, #500]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	4a7c      	ldr	r2, [pc, #496]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 8003450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003454:	6413      	str	r3, [r2, #64]	@ 0x40
 8003456:	4b7a      	ldr	r3, [pc, #488]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003466:	4b77      	ldr	r3, [pc, #476]	@ (8003644 <HAL_RCC_OscConfig+0x474>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d118      	bne.n	80034a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003472:	4b74      	ldr	r3, [pc, #464]	@ (8003644 <HAL_RCC_OscConfig+0x474>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a73      	ldr	r2, [pc, #460]	@ (8003644 <HAL_RCC_OscConfig+0x474>)
 8003478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800347c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347e:	f7fe f98d 	bl	800179c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003486:	f7fe f989 	bl	800179c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e10c      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	4b6a      	ldr	r3, [pc, #424]	@ (8003644 <HAL_RCC_OscConfig+0x474>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d106      	bne.n	80034ba <HAL_RCC_OscConfig+0x2ea>
 80034ac:	4b64      	ldr	r3, [pc, #400]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b0:	4a63      	ldr	r2, [pc, #396]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b8:	e01c      	b.n	80034f4 <HAL_RCC_OscConfig+0x324>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b05      	cmp	r3, #5
 80034c0:	d10c      	bne.n	80034dc <HAL_RCC_OscConfig+0x30c>
 80034c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034da:	e00b      	b.n	80034f4 <HAL_RCC_OscConfig+0x324>
 80034dc:	4b58      	ldr	r3, [pc, #352]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e0:	4a57      	ldr	r2, [pc, #348]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e8:	4b55      	ldr	r3, [pc, #340]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ec:	4a54      	ldr	r2, [pc, #336]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80034ee:	f023 0304 	bic.w	r3, r3, #4
 80034f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d015      	beq.n	8003528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fe f94e 	bl	800179c <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003502:	e00a      	b.n	800351a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fe f94a 	bl	800179c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e0cb      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351a:	4b49      	ldr	r3, [pc, #292]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0ee      	beq.n	8003504 <HAL_RCC_OscConfig+0x334>
 8003526:	e014      	b.n	8003552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003528:	f7fe f938 	bl	800179c <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352e:	e00a      	b.n	8003546 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fe f934 	bl	800179c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0b5      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003546:	4b3e      	ldr	r3, [pc, #248]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ee      	bne.n	8003530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003558:	4b39      	ldr	r3, [pc, #228]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	4a38      	ldr	r2, [pc, #224]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 800355e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003562:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80a1 	beq.w	80036b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800356e:	4b34      	ldr	r3, [pc, #208]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b08      	cmp	r3, #8
 8003578:	d05c      	beq.n	8003634 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d141      	bne.n	8003606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	4b31      	ldr	r3, [pc, #196]	@ (8003648 <HAL_RCC_OscConfig+0x478>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe f908 	bl	800179c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003590:	f7fe f904 	bl	800179c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e087      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	4b27      	ldr	r3, [pc, #156]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	3b01      	subs	r3, #1
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d0:	061b      	lsls	r3, r3, #24
 80035d2:	491b      	ldr	r1, [pc, #108]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <HAL_RCC_OscConfig+0x478>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fe f8dd 	bl	800179c <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fe f8d9 	bl	800179c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e05c      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f8:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x416>
 8003604:	e054      	b.n	80036b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <HAL_RCC_OscConfig+0x478>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe f8c6 	bl	800179c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7fe f8c2 	bl	800179c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e045      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003626:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <HAL_RCC_OscConfig+0x470>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x444>
 8003632:	e03d      	b.n	80036b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d107      	bne.n	800364c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e038      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
 8003640:	40023800 	.word	0x40023800
 8003644:	40007000 	.word	0x40007000
 8003648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800364c:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <HAL_RCC_OscConfig+0x4ec>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d028      	beq.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d121      	bne.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d11a      	bne.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003684:	4293      	cmp	r3, r2
 8003686:	d111      	bne.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	3b01      	subs	r3, #1
 8003696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d107      	bne.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800

080036c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0cc      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d4:	4b68      	ldr	r3, [pc, #416]	@ (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d90c      	bls.n	80036fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b65      	ldr	r3, [pc, #404]	@ (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b63      	ldr	r3, [pc, #396]	@ (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0b8      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d020      	beq.n	800374a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003714:	4b59      	ldr	r3, [pc, #356]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a58      	ldr	r2, [pc, #352]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800371e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800372c:	4b53      	ldr	r3, [pc, #332]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a52      	ldr	r2, [pc, #328]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003738:	4b50      	ldr	r3, [pc, #320]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	494d      	ldr	r1, [pc, #308]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d044      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	4b47      	ldr	r3, [pc, #284]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d119      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e07f      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d003      	beq.n	800377e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377a:	2b03      	cmp	r3, #3
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377e:	4b3f      	ldr	r3, [pc, #252]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e06f      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378e:	4b3b      	ldr	r3, [pc, #236]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e067      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379e:	4b37      	ldr	r3, [pc, #220]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f023 0203 	bic.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4934      	ldr	r1, [pc, #208]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b0:	f7fd fff4 	bl	800179c <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b8:	f7fd fff0 	bl	800179c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e04f      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	4b2b      	ldr	r3, [pc, #172]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 020c 	and.w	r2, r3, #12
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	429a      	cmp	r2, r3
 80037de:	d1eb      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e0:	4b25      	ldr	r3, [pc, #148]	@ (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d20c      	bcs.n	8003808 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b22      	ldr	r3, [pc, #136]	@ (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b20      	ldr	r3, [pc, #128]	@ (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e032      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003814:	4b19      	ldr	r3, [pc, #100]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4916      	ldr	r1, [pc, #88]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003832:	4b12      	ldr	r3, [pc, #72]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	490e      	ldr	r1, [pc, #56]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003846:	f000 f821 	bl	800388c <HAL_RCC_GetSysClockFreq>
 800384a:	4602      	mov	r2, r0
 800384c:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	490a      	ldr	r1, [pc, #40]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	5ccb      	ldrb	r3, [r1, r3]
 800385a:	fa22 f303 	lsr.w	r3, r2, r3
 800385e:	4a09      	ldr	r2, [pc, #36]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003862:	4b09      	ldr	r3, [pc, #36]	@ (8003888 <HAL_RCC_ClockConfig+0x1c8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd ff54 	bl	8001714 <HAL_InitTick>

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40023c00 	.word	0x40023c00
 800387c:	40023800 	.word	0x40023800
 8003880:	0800aba8 	.word	0x0800aba8
 8003884:	20000000 	.word	0x20000000
 8003888:	20000004 	.word	0x20000004

0800388c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800388c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003890:	b090      	sub	sp, #64	@ 0x40
 8003892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a4:	4b59      	ldr	r3, [pc, #356]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d00d      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x40>
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	f200 80a1 	bhi.w	80039f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038be:	e09b      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b53      	ldr	r3, [pc, #332]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80038c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038c4:	e09b      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038c6:	4b53      	ldr	r3, [pc, #332]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80038c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038ca:	e098      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038cc:	4b4f      	ldr	r3, [pc, #316]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038d6:	4b4d      	ldr	r3, [pc, #308]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d028      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e2:	4b4a      	ldr	r3, [pc, #296]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	099b      	lsrs	r3, r3, #6
 80038e8:	2200      	movs	r2, #0
 80038ea:	623b      	str	r3, [r7, #32]
 80038ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038f4:	2100      	movs	r1, #0
 80038f6:	4b47      	ldr	r3, [pc, #284]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80038f8:	fb03 f201 	mul.w	r2, r3, r1
 80038fc:	2300      	movs	r3, #0
 80038fe:	fb00 f303 	mul.w	r3, r0, r3
 8003902:	4413      	add	r3, r2
 8003904:	4a43      	ldr	r2, [pc, #268]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003906:	fba0 1202 	umull	r1, r2, r0, r2
 800390a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800390c:	460a      	mov	r2, r1
 800390e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003912:	4413      	add	r3, r2
 8003914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003918:	2200      	movs	r2, #0
 800391a:	61bb      	str	r3, [r7, #24]
 800391c:	61fa      	str	r2, [r7, #28]
 800391e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003922:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003926:	f7fd f951 	bl	8000bcc <__aeabi_uldivmod>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4613      	mov	r3, r2
 8003930:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003932:	e053      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003934:	4b35      	ldr	r3, [pc, #212]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	2200      	movs	r2, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	617a      	str	r2, [r7, #20]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003946:	f04f 0b00 	mov.w	fp, #0
 800394a:	4652      	mov	r2, sl
 800394c:	465b      	mov	r3, fp
 800394e:	f04f 0000 	mov.w	r0, #0
 8003952:	f04f 0100 	mov.w	r1, #0
 8003956:	0159      	lsls	r1, r3, #5
 8003958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800395c:	0150      	lsls	r0, r2, #5
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	ebb2 080a 	subs.w	r8, r2, sl
 8003966:	eb63 090b 	sbc.w	r9, r3, fp
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003976:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800397a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800397e:	ebb2 0408 	subs.w	r4, r2, r8
 8003982:	eb63 0509 	sbc.w	r5, r3, r9
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	00eb      	lsls	r3, r5, #3
 8003990:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003994:	00e2      	lsls	r2, r4, #3
 8003996:	4614      	mov	r4, r2
 8003998:	461d      	mov	r5, r3
 800399a:	eb14 030a 	adds.w	r3, r4, sl
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	eb45 030b 	adc.w	r3, r5, fp
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039b2:	4629      	mov	r1, r5
 80039b4:	028b      	lsls	r3, r1, #10
 80039b6:	4621      	mov	r1, r4
 80039b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039bc:	4621      	mov	r1, r4
 80039be:	028a      	lsls	r2, r1, #10
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c6:	2200      	movs	r2, #0
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	60fa      	str	r2, [r7, #12]
 80039cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039d0:	f7fd f8fc 	bl	8000bcc <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4613      	mov	r3, r2
 80039da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039dc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	3301      	adds	r3, #1
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80039ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039f6:	e002      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039f8:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80039fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3740      	adds	r7, #64	@ 0x40
 8003a04:	46bd      	mov	sp, r7
 8003a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	00f42400 	.word	0x00f42400
 8003a14:	017d7840 	.word	0x017d7840

08003a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a1c:	4b03      	ldr	r3, [pc, #12]	@ (8003a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000000 	.word	0x20000000

08003a30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a30:	b084      	sub	sp, #16
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	f107 001c 	add.w	r0, r7, #28
 8003a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d123      	bne.n	8003a92 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f001 fae8 	bl	800505c <USB_CoreReset>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e01b      	b.n	8003aca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f001 fadc 	bl	800505c <USB_CoreReset>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003aa8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d106      	bne.n	8003abe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	639a      	str	r2, [r3, #56]	@ 0x38
 8003abc:	e005      	b.n	8003aca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003aca:	7fbb      	ldrb	r3, [r7, #30]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d10b      	bne.n	8003ae8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f043 0206 	orr.w	r2, r3, #6
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003af4:	b004      	add	sp, #16
 8003af6:	4770      	bx	lr

08003af8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d165      	bne.n	8003bd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4a41      	ldr	r2, [pc, #260]	@ (8003c14 <USB_SetTurnaroundTime+0x11c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d906      	bls.n	8003b22 <USB_SetTurnaroundTime+0x2a>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4a40      	ldr	r2, [pc, #256]	@ (8003c18 <USB_SetTurnaroundTime+0x120>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d202      	bcs.n	8003b22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b1c:	230f      	movs	r3, #15
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e062      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4a3c      	ldr	r2, [pc, #240]	@ (8003c18 <USB_SetTurnaroundTime+0x120>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d306      	bcc.n	8003b38 <USB_SetTurnaroundTime+0x40>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4a3b      	ldr	r2, [pc, #236]	@ (8003c1c <USB_SetTurnaroundTime+0x124>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d202      	bcs.n	8003b38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b32:	230e      	movs	r3, #14
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e057      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4a38      	ldr	r2, [pc, #224]	@ (8003c1c <USB_SetTurnaroundTime+0x124>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d306      	bcc.n	8003b4e <USB_SetTurnaroundTime+0x56>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4a37      	ldr	r2, [pc, #220]	@ (8003c20 <USB_SetTurnaroundTime+0x128>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d202      	bcs.n	8003b4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b48:	230d      	movs	r3, #13
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e04c      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4a33      	ldr	r2, [pc, #204]	@ (8003c20 <USB_SetTurnaroundTime+0x128>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d306      	bcc.n	8003b64 <USB_SetTurnaroundTime+0x6c>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4a32      	ldr	r2, [pc, #200]	@ (8003c24 <USB_SetTurnaroundTime+0x12c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d802      	bhi.n	8003b64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b5e:	230c      	movs	r3, #12
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e041      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4a2f      	ldr	r2, [pc, #188]	@ (8003c24 <USB_SetTurnaroundTime+0x12c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d906      	bls.n	8003b7a <USB_SetTurnaroundTime+0x82>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003c28 <USB_SetTurnaroundTime+0x130>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d802      	bhi.n	8003b7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b74:	230b      	movs	r3, #11
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	e036      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003c28 <USB_SetTurnaroundTime+0x130>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d906      	bls.n	8003b90 <USB_SetTurnaroundTime+0x98>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4a29      	ldr	r2, [pc, #164]	@ (8003c2c <USB_SetTurnaroundTime+0x134>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d802      	bhi.n	8003b90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b8a:	230a      	movs	r3, #10
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e02b      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4a26      	ldr	r2, [pc, #152]	@ (8003c2c <USB_SetTurnaroundTime+0x134>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d906      	bls.n	8003ba6 <USB_SetTurnaroundTime+0xae>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4a25      	ldr	r2, [pc, #148]	@ (8003c30 <USB_SetTurnaroundTime+0x138>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d202      	bcs.n	8003ba6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ba0:	2309      	movs	r3, #9
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e020      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4a21      	ldr	r2, [pc, #132]	@ (8003c30 <USB_SetTurnaroundTime+0x138>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d306      	bcc.n	8003bbc <USB_SetTurnaroundTime+0xc4>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4a20      	ldr	r2, [pc, #128]	@ (8003c34 <USB_SetTurnaroundTime+0x13c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d802      	bhi.n	8003bbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	e015      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003c34 <USB_SetTurnaroundTime+0x13c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d906      	bls.n	8003bd2 <USB_SetTurnaroundTime+0xda>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c38 <USB_SetTurnaroundTime+0x140>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d202      	bcs.n	8003bd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003bcc:	2307      	movs	r3, #7
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e00a      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003bd2:	2306      	movs	r3, #6
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e007      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003bde:	2309      	movs	r3, #9
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	e001      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003be4:	2309      	movs	r3, #9
 8003be6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	029b      	lsls	r3, r3, #10
 8003bfc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	00d8acbf 	.word	0x00d8acbf
 8003c18:	00e4e1c0 	.word	0x00e4e1c0
 8003c1c:	00f42400 	.word	0x00f42400
 8003c20:	01067380 	.word	0x01067380
 8003c24:	011a499f 	.word	0x011a499f
 8003c28:	01312cff 	.word	0x01312cff
 8003c2c:	014ca43f 	.word	0x014ca43f
 8003c30:	016e3600 	.word	0x016e3600
 8003c34:	01a6ab1f 	.word	0x01a6ab1f
 8003c38:	01e84800 	.word	0x01e84800

08003c3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f043 0201 	orr.w	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 0201 	bic.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d115      	bne.n	8003cce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003cae:	200a      	movs	r0, #10
 8003cb0:	f7fd fd80 	bl	80017b4 <HAL_Delay>
      ms += 10U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	330a      	adds	r3, #10
 8003cb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f001 f93f 	bl	8004f3e <USB_GetMode>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d01e      	beq.n	8003d04 <USB_SetCurrentMode+0x84>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2bc7      	cmp	r3, #199	@ 0xc7
 8003cca:	d9f0      	bls.n	8003cae <USB_SetCurrentMode+0x2e>
 8003ccc:	e01a      	b.n	8003d04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d115      	bne.n	8003d00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ce0:	200a      	movs	r0, #10
 8003ce2:	f7fd fd67 	bl	80017b4 <HAL_Delay>
      ms += 10U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	330a      	adds	r3, #10
 8003cea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f001 f926 	bl	8004f3e <USB_GetMode>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <USB_SetCurrentMode+0x84>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2bc7      	cmp	r3, #199	@ 0xc7
 8003cfc:	d9f0      	bls.n	8003ce0 <USB_SetCurrentMode+0x60>
 8003cfe:	e001      	b.n	8003d04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e005      	b.n	8003d10 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2bc8      	cmp	r3, #200	@ 0xc8
 8003d08:	d101      	bne.n	8003d0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d18:	b084      	sub	sp, #16
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	e009      	b.n	8003d4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	3340      	adds	r3, #64	@ 0x40
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	2200      	movs	r2, #0
 8003d44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b0e      	cmp	r3, #14
 8003d50:	d9f2      	bls.n	8003d38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11c      	bne.n	8003d94 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d68:	f043 0302 	orr.w	r3, r3, #2
 8003d6c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d92:	e00b      	b.n	8003dac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d98:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003db2:	461a      	mov	r2, r3
 8003db4:	2300      	movs	r3, #0
 8003db6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003db8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d10d      	bne.n	8003ddc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003dc8:	2100      	movs	r1, #0
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f968 	bl	80040a0 <USB_SetDevSpeed>
 8003dd0:	e008      	b.n	8003de4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f963 	bl	80040a0 <USB_SetDevSpeed>
 8003dda:	e003      	b.n	8003de4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ddc:	2103      	movs	r1, #3
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f95e 	bl	80040a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003de4:	2110      	movs	r1, #16
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8fa 	bl	8003fe0 <USB_FlushTxFifo>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f924 	bl	8004044 <USB_FlushRxFifo>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2300      	movs	r3, #0
 8003e10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e24:	461a      	mov	r2, r3
 8003e26:	2300      	movs	r3, #0
 8003e28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	e043      	b.n	8003eb8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e46:	d118      	bne.n	8003e7a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e013      	b.n	8003e8c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e70:	461a      	mov	r2, r3
 8003e72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	e008      	b.n	8003e8c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e86:	461a      	mov	r2, r3
 8003e88:	2300      	movs	r3, #0
 8003e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003eb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d3b5      	bcc.n	8003e30 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	e043      	b.n	8003f52 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003edc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ee0:	d118      	bne.n	8003f14 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	e013      	b.n	8003f26 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e008      	b.n	8003f26 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f20:	461a      	mov	r2, r3
 8003f22:	2300      	movs	r3, #0
 8003f24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f32:	461a      	mov	r2, r3
 8003f34:	2300      	movs	r3, #0
 8003f36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f44:	461a      	mov	r2, r3
 8003f46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f56:	461a      	mov	r2, r3
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d3b5      	bcc.n	8003eca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003f7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d105      	bne.n	8003f94 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f043 0210 	orr.w	r2, r3, #16
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	4b10      	ldr	r3, [pc, #64]	@ (8003fdc <USB_DevInit+0x2c4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fa0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f043 0208 	orr.w	r2, r3, #8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d107      	bne.n	8003fcc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fd8:	b004      	add	sp, #16
 8003fda:	4770      	bx	lr
 8003fdc:	803c3800 	.word	0x803c3800

08003fe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ffa:	d901      	bls.n	8004000 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e01b      	b.n	8004038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	daf2      	bge.n	8003fee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	019b      	lsls	r3, r3, #6
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3301      	adds	r3, #1
 800401c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004024:	d901      	bls.n	800402a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e006      	b.n	8004038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b20      	cmp	r3, #32
 8004034:	d0f0      	beq.n	8004018 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3301      	adds	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800405c:	d901      	bls.n	8004062 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e018      	b.n	8004094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	daf2      	bge.n	8004050 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2210      	movs	r2, #16
 8004072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004080:	d901      	bls.n	8004086 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e006      	b.n	8004094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b10      	cmp	r3, #16
 8004090:	d0f0      	beq.n	8004074 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040c0:	4313      	orrs	r3, r2
 80040c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b087      	sub	sp, #28
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0306 	and.w	r3, r3, #6
 80040ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
 80040f6:	e00a      	b.n	800410e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d002      	beq.n	8004104 <USB_GetDevSpeed+0x32>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b06      	cmp	r3, #6
 8004102:	d102      	bne.n	800410a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004104:	2302      	movs	r3, #2
 8004106:	75fb      	strb	r3, [r7, #23]
 8004108:	e001      	b.n	800410e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800410a:	230f      	movs	r3, #15
 800410c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004110:	4618      	mov	r0, r3
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d13a      	bne.n	80041ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	2101      	movs	r1, #1
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	b29b      	uxth	r3, r3
 8004150:	68f9      	ldr	r1, [r7, #12]
 8004152:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004156:	4313      	orrs	r3, r2
 8004158:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d155      	bne.n	800421c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	791b      	ldrb	r3, [r3, #4]
 800418a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800418c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	059b      	lsls	r3, r3, #22
 8004192:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004194:	4313      	orrs	r3, r2
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	0151      	lsls	r1, r2, #5
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	440a      	add	r2, r1
 800419e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	e036      	b.n	800421c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b4:	69da      	ldr	r2, [r3, #28]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	2101      	movs	r1, #1
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11a      	bne.n	800421c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	791b      	ldrb	r3, [r3, #4]
 8004200:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004202:	430b      	orrs	r3, r1
 8004204:	4313      	orrs	r3, r2
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	0151      	lsls	r1, r2, #5
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	440a      	add	r2, r1
 800420e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800421a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d161      	bne.n	800430c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800425a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800425e:	d11f      	bne.n	80042a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	0151      	lsls	r1, r2, #5
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	440a      	add	r2, r1
 8004276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800427a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800427e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	0151      	lsls	r1, r2, #5
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	440a      	add	r2, r1
 8004296:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800429a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800429e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	2101      	movs	r1, #1
 80042b2:	fa01 f303 	lsl.w	r3, r1, r3
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042c0:	4013      	ands	r3, r2
 80042c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	2101      	movs	r1, #1
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	b29b      	uxth	r3, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	68f9      	ldr	r1, [r7, #12]
 80042e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042e4:	4013      	ands	r3, r2
 80042e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	0159      	lsls	r1, r3, #5
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	440b      	add	r3, r1
 80042fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004302:	4619      	mov	r1, r3
 8004304:	4b35      	ldr	r3, [pc, #212]	@ (80043dc <USB_DeactivateEndpoint+0x1b0>)
 8004306:	4013      	ands	r3, r2
 8004308:	600b      	str	r3, [r1, #0]
 800430a:	e060      	b.n	80043ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800431e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004322:	d11f      	bne.n	8004364 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	0151      	lsls	r1, r2, #5
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	440a      	add	r2, r1
 800433a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800433e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004342:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	0151      	lsls	r1, r2, #5
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	440a      	add	r2, r1
 800435a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800435e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800436a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	2101      	movs	r1, #1
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	43db      	mvns	r3, r3
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004384:	4013      	ands	r3, r2
 8004386:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	2101      	movs	r1, #1
 800439a:	fa01 f303 	lsl.w	r3, r1, r3
 800439e:	041b      	lsls	r3, r3, #16
 80043a0:	43db      	mvns	r3, r3
 80043a2:	68f9      	ldr	r1, [r7, #12]
 80043a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043a8:	4013      	ands	r3, r2
 80043aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	0159      	lsls	r1, r3, #5
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	440b      	add	r3, r1
 80043c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c6:	4619      	mov	r1, r3
 80043c8:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <USB_DeactivateEndpoint+0x1b4>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	ec337800 	.word	0xec337800
 80043e0:	eff37800 	.word	0xeff37800

080043e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	@ 0x28
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	2b01      	cmp	r3, #1
 8004402:	f040 817f 	bne.w	8004704 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d132      	bne.n	8004474 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	0151      	lsls	r1, r2, #5
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	440a      	add	r2, r1
 8004424:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004428:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800442c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	440a      	add	r2, r1
 8004448:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800444c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	440a      	add	r2, r1
 8004468:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800446c:	0cdb      	lsrs	r3, r3, #19
 800446e:	04db      	lsls	r3, r3, #19
 8004470:	6113      	str	r3, [r2, #16]
 8004472:	e097      	b.n	80045a4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	0151      	lsls	r1, r2, #5
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	440a      	add	r2, r1
 800448a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800448e:	0cdb      	lsrs	r3, r3, #19
 8004490:	04db      	lsls	r3, r3, #19
 8004492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	0151      	lsls	r1, r2, #5
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	440a      	add	r2, r1
 80044aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80044b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80044b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d11a      	bne.n	80044f4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d903      	bls.n	80044d2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	0151      	lsls	r1, r2, #5
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	440a      	add	r2, r1
 80044e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044f0:	6113      	str	r3, [r2, #16]
 80044f2:	e044      	b.n	800457e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	4413      	add	r3, r2
 80044fe:	1e5a      	subs	r2, r3, #1
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	8afb      	ldrh	r3, [r7, #22]
 800451a:	04d9      	lsls	r1, r3, #19
 800451c:	4ba4      	ldr	r3, [pc, #656]	@ (80047b0 <USB_EPStartXfer+0x3cc>)
 800451e:	400b      	ands	r3, r1
 8004520:	69b9      	ldr	r1, [r7, #24]
 8004522:	0148      	lsls	r0, r1, #5
 8004524:	69f9      	ldr	r1, [r7, #28]
 8004526:	4401      	add	r1, r0
 8004528:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800452c:	4313      	orrs	r3, r2
 800452e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	791b      	ldrb	r3, [r3, #4]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d122      	bne.n	800457e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	0151      	lsls	r1, r2, #5
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	440a      	add	r2, r1
 800454e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004552:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004556:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	8afb      	ldrh	r3, [r7, #22]
 8004568:	075b      	lsls	r3, r3, #29
 800456a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800456e:	69b9      	ldr	r1, [r7, #24]
 8004570:	0148      	lsls	r0, r1, #5
 8004572:	69f9      	ldr	r1, [r7, #28]
 8004574:	4401      	add	r1, r0
 8004576:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800457a:	4313      	orrs	r3, r2
 800457c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004594:	69b9      	ldr	r1, [r7, #24]
 8004596:	0148      	lsls	r0, r1, #5
 8004598:	69f9      	ldr	r1, [r7, #28]
 800459a:	4401      	add	r1, r0
 800459c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80045a0:	4313      	orrs	r3, r2
 80045a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d14b      	bne.n	8004642 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d009      	beq.n	80045c6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045be:	461a      	mov	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	791b      	ldrb	r3, [r3, #4]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d128      	bne.n	8004620 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d110      	bne.n	8004600 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	0151      	lsls	r1, r2, #5
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	440a      	add	r2, r1
 80045f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e00f      	b.n	8004620 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800461a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800461e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	0151      	lsls	r1, r2, #5
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	440a      	add	r2, r1
 8004636:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800463a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	e166      	b.n	8004910 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	0151      	lsls	r1, r2, #5
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	440a      	add	r2, r1
 8004658:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800465c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004660:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	791b      	ldrb	r3, [r3, #4]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d015      	beq.n	8004696 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 814e 	beq.w	8004910 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800467a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	2101      	movs	r1, #1
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	69f9      	ldr	r1, [r7, #28]
 800468c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004690:	4313      	orrs	r3, r2
 8004692:	634b      	str	r3, [r1, #52]	@ 0x34
 8004694:	e13c      	b.n	8004910 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d110      	bne.n	80046c8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	0151      	lsls	r1, r2, #5
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	440a      	add	r2, r1
 80046bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e00f      	b.n	80046e8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	68d9      	ldr	r1, [r3, #12]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	781a      	ldrb	r2, [r3, #0]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	b298      	uxth	r0, r3
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	4603      	mov	r3, r0
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f9b9 	bl	8004a74 <USB_WritePacket>
 8004702:	e105      	b.n	8004910 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	0151      	lsls	r1, r2, #5
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	440a      	add	r2, r1
 800471a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800471e:	0cdb      	lsrs	r3, r3, #19
 8004720:	04db      	lsls	r3, r3, #19
 8004722:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	0151      	lsls	r1, r2, #5
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	440a      	add	r2, r1
 800473a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800473e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004742:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004746:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d132      	bne.n	80047b4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477c:	69b9      	ldr	r1, [r7, #24]
 800477e:	0148      	lsls	r0, r1, #5
 8004780:	69f9      	ldr	r1, [r7, #28]
 8004782:	4401      	add	r1, r0
 8004784:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004788:	4313      	orrs	r3, r2
 800478a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	0151      	lsls	r1, r2, #5
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	440a      	add	r2, r1
 80047a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047aa:	6113      	str	r3, [r2, #16]
 80047ac:	e062      	b.n	8004874 <USB_EPStartXfer+0x490>
 80047ae:	bf00      	nop
 80047b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d123      	bne.n	8004804 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d2:	69b9      	ldr	r1, [r7, #24]
 80047d4:	0148      	lsls	r0, r1, #5
 80047d6:	69f9      	ldr	r1, [r7, #28]
 80047d8:	4401      	add	r1, r0
 80047da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80047de:	4313      	orrs	r3, r2
 80047e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004800:	6113      	str	r3, [r2, #16]
 8004802:	e037      	b.n	8004874 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4413      	add	r3, r2
 800480e:	1e5a      	subs	r2, r3, #1
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	8afa      	ldrh	r2, [r7, #22]
 8004820:	fb03 f202 	mul.w	r2, r3, r2
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	8afb      	ldrh	r3, [r7, #22]
 8004838:	04d9      	lsls	r1, r3, #19
 800483a:	4b38      	ldr	r3, [pc, #224]	@ (800491c <USB_EPStartXfer+0x538>)
 800483c:	400b      	ands	r3, r1
 800483e:	69b9      	ldr	r1, [r7, #24]
 8004840:	0148      	lsls	r0, r1, #5
 8004842:	69f9      	ldr	r1, [r7, #28]
 8004844:	4401      	add	r1, r0
 8004846:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800484a:	4313      	orrs	r3, r2
 800484c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004864:	69b9      	ldr	r1, [r7, #24]
 8004866:	0148      	lsls	r0, r1, #5
 8004868:	69f9      	ldr	r1, [r7, #28]
 800486a:	4401      	add	r1, r0
 800486c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004870:	4313      	orrs	r3, r2
 8004872:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10d      	bne.n	8004896 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	68d9      	ldr	r1, [r3, #12]
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004892:	460a      	mov	r2, r1
 8004894:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	791b      	ldrb	r3, [r3, #4]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d128      	bne.n	80048f0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d110      	bne.n	80048d0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e00f      	b.n	80048f0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	0151      	lsls	r1, r2, #5
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	440a      	add	r2, r1
 8004906:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800490a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800490e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	1ff80000 	.word	0x1ff80000

08004920 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d14a      	bne.n	80049d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004952:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004956:	f040 8086 	bne.w	8004a66 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	7812      	ldrb	r2, [r2, #0]
 800496e:	0151      	lsls	r1, r2, #5
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	440a      	add	r2, r1
 8004974:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004978:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800497c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	7812      	ldrb	r2, [r2, #0]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	440a      	add	r2, r1
 8004998:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800499c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3301      	adds	r3, #1
 80049a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d902      	bls.n	80049b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	75fb      	strb	r3, [r7, #23]
          break;
 80049b6:	e056      	b.n	8004a66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049d0:	d0e7      	beq.n	80049a2 <USB_EPStopXfer+0x82>
 80049d2:	e048      	b.n	8004a66 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049ec:	d13b      	bne.n	8004a66 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	7812      	ldrb	r2, [r2, #0]
 8004a02:	0151      	lsls	r1, r2, #5
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	440a      	add	r2, r1
 8004a08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a10:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	7812      	ldrb	r2, [r2, #0]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d902      	bls.n	8004a4c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	75fb      	strb	r3, [r7, #23]
          break;
 8004a4a:	e00c      	b.n	8004a66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a64:	d0e7      	beq.n	8004a36 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b089      	sub	sp, #36	@ 0x24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	4611      	mov	r1, r2
 8004a80:	461a      	mov	r2, r3
 8004a82:	460b      	mov	r3, r1
 8004a84:	71fb      	strb	r3, [r7, #7]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d123      	bne.n	8004ae2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a9a:	88bb      	ldrh	r3, [r7, #4]
 8004a9c:	3303      	adds	r3, #3
 8004a9e:	089b      	lsrs	r3, r3, #2
 8004aa0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	e018      	b.n	8004ada <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	031a      	lsls	r2, r3, #12
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	3301      	adds	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d3e2      	bcc.n	8004aa8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3724      	adds	r7, #36	@ 0x24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b08b      	sub	sp, #44	@ 0x2c
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b16:	2300      	movs	r3, #0
 8004b18:	623b      	str	r3, [r7, #32]
 8004b1a:	e014      	b.n	8004b46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	3301      	adds	r3, #1
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b36:	3301      	adds	r3, #1
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	3301      	adds	r3, #1
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	6a3a      	ldr	r2, [r7, #32]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d3e6      	bcc.n	8004b1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b4e:	8bfb      	ldrh	r3, [r7, #30]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01e      	beq.n	8004b92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f107 0310 	add.w	r3, r7, #16
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	fa22 f303 	lsr.w	r3, r2, r3
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	701a      	strb	r2, [r3, #0]
      i++;
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	3301      	adds	r3, #1
 8004b84:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004b86:	8bfb      	ldrh	r3, [r7, #30]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b8c:	8bfb      	ldrh	r3, [r7, #30]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1ea      	bne.n	8004b68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	372c      	adds	r7, #44	@ 0x2c
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d12c      	bne.n	8004c16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	db12      	blt.n	8004bf4 <USB_EPSetStall+0x54>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00f      	beq.n	8004bf4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	0151      	lsls	r1, r2, #5
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	440a      	add	r2, r1
 8004bea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bf2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	0151      	lsls	r1, r2, #5
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	440a      	add	r2, r1
 8004c0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	e02b      	b.n	8004c6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	db12      	blt.n	8004c4e <USB_EPSetStall+0xae>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00f      	beq.n	8004c4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	0151      	lsls	r1, r2, #5
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	440a      	add	r2, r1
 8004c44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	0151      	lsls	r1, r2, #5
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	440a      	add	r2, r1
 8004c64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	785b      	ldrb	r3, [r3, #1]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d128      	bne.n	8004cea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	0151      	lsls	r1, r2, #5
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	440a      	add	r2, r1
 8004cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	791b      	ldrb	r3, [r3, #4]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d003      	beq.n	8004cc8 <USB_EPClearStall+0x4c>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	791b      	ldrb	r3, [r3, #4]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d138      	bne.n	8004d3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	e027      	b.n	8004d3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d04:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	791b      	ldrb	r3, [r3, #4]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d003      	beq.n	8004d1a <USB_EPClearStall+0x9e>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	791b      	ldrb	r3, [r3, #4]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d10f      	bne.n	8004d3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d66:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004d6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004d7c:	68f9      	ldr	r1, [r7, #12]
 8004d7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d82:	4313      	orrs	r3, r2
 8004d84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dc2:	f023 0302 	bic.w	r3, r3, #2
 8004dc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004df0:	f023 0303 	bic.w	r3, r3, #3
 8004df4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e04:	f043 0302 	orr.w	r3, r3, #2
 8004e08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e30:	68fb      	ldr	r3, [r7, #12]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	0c1b      	lsrs	r3, r3, #16
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b085      	sub	sp, #20
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	4013      	ands	r3, r2
 8004e94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	b29b      	uxth	r3, r3
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b087      	sub	sp, #28
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f12:	01db      	lsls	r3, r3, #7
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f30:	68bb      	ldr	r3, [r7, #8]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f74:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f78:	f023 0307 	bic.w	r3, r3, #7
 8004f7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	333c      	adds	r3, #60	@ 0x3c
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4a26      	ldr	r2, [pc, #152]	@ (8005058 <USB_EP0_OutStart+0xb8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d90a      	bls.n	8004fda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fd4:	d101      	bne.n	8004fda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e037      	b.n	800504a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ff4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ff8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005008:	f043 0318 	orr.w	r3, r3, #24
 800500c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800501c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005020:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005022:	7afb      	ldrb	r3, [r7, #11]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d10f      	bne.n	8005048 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800502e:	461a      	mov	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005042:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005046:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	4f54300a 	.word	0x4f54300a

0800505c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3301      	adds	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005074:	d901      	bls.n	800507a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e022      	b.n	80050c0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	daf2      	bge.n	8005068 <USB_CoreReset+0xc>

  count = 10U;
 8005082:	230a      	movs	r3, #10
 8005084:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005086:	e002      	b.n	800508e <USB_CoreReset+0x32>
  {
    count--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3b01      	subs	r3, #1
 800508c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f9      	bne.n	8005088 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f043 0201 	orr.w	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050ac:	d901      	bls.n	80050b2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e006      	b.n	80050c0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d0f0      	beq.n	80050a0 <USB_CoreReset+0x44>

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80050dc:	2303      	movs	r3, #3
 80050de:	e009      	b.n	80050f4 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	33b0      	adds	r3, #176	@ 0xb0
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005114:	2303      	movs	r3, #3
 8005116:	e01f      	b.n	8005158 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	79fa      	ldrb	r2, [r7, #7]
 800514a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f003 fbdf 	bl	8008910 <USBD_LL_Init>
 8005152:	4603      	mov	r3, r0
 8005154:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005156:	7dfb      	ldrb	r3, [r7, #23]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005174:	2303      	movs	r3, #3
 8005176:	e025      	b.n	80051c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	32ae      	adds	r2, #174	@ 0xae
 800518a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00f      	beq.n	80051b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	32ae      	adds	r2, #174	@ 0xae
 800519e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	f107 020e 	add.w	r2, r7, #14
 80051a8:	4610      	mov	r0, r2
 80051aa:	4798      	blx	r3
 80051ac:	4602      	mov	r2, r0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f003 fbe7 	bl	80089a8 <USBD_LL_Start>
 80051da:	4603      	mov	r3, r0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	460b      	mov	r3, r1
 8005204:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d009      	beq.n	8005228 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	78fa      	ldrb	r2, [r7, #3]
 800521e:	4611      	mov	r1, r2
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	4798      	blx	r3
 8005224:	4603      	mov	r3, r0
 8005226:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	460b      	mov	r3, r1
 800523c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	4611      	mov	r1, r2
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005258:	2303      	movs	r3, #3
 800525a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f001 f922 	bl	80064c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800528c:	461a      	mov	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800529a:	f003 031f 	and.w	r3, r3, #31
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d01a      	beq.n	80052d8 <USBD_LL_SetupStage+0x72>
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d822      	bhi.n	80052ec <USBD_LL_SetupStage+0x86>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <USBD_LL_SetupStage+0x4a>
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d00a      	beq.n	80052c4 <USBD_LL_SetupStage+0x5e>
 80052ae:	e01d      	b.n	80052ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fb77 	bl	80059ac <USBD_StdDevReq>
 80052be:	4603      	mov	r3, r0
 80052c0:	73fb      	strb	r3, [r7, #15]
      break;
 80052c2:	e020      	b.n	8005306 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fbdf 	bl	8005a90 <USBD_StdItfReq>
 80052d2:	4603      	mov	r3, r0
 80052d4:	73fb      	strb	r3, [r7, #15]
      break;
 80052d6:	e016      	b.n	8005306 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80052de:	4619      	mov	r1, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fc41 	bl	8005b68 <USBD_StdEPReq>
 80052e6:	4603      	mov	r3, r0
 80052e8:	73fb      	strb	r3, [r7, #15]
      break;
 80052ea:	e00c      	b.n	8005306 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80052f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	4619      	mov	r1, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f003 fbb4 	bl	8008a68 <USBD_LL_StallEP>
 8005300:	4603      	mov	r3, r0
 8005302:	73fb      	strb	r3, [r7, #15]
      break;
 8005304:	bf00      	nop
  }

  return ret;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	460b      	mov	r3, r1
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005322:	7afb      	ldrb	r3, [r7, #11]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d177      	bne.n	8005418 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800532e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005336:	2b03      	cmp	r3, #3
 8005338:	f040 80a1 	bne.w	800547e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	8992      	ldrh	r2, [r2, #12]
 8005344:	4293      	cmp	r3, r2
 8005346:	d91c      	bls.n	8005382 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	8992      	ldrh	r2, [r2, #12]
 8005350:	1a9a      	subs	r2, r3, r2
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	8992      	ldrh	r2, [r2, #12]
 800535e:	441a      	add	r2, r3
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	6919      	ldr	r1, [r3, #16]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	899b      	ldrh	r3, [r3, #12]
 800536c:	461a      	mov	r2, r3
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4293      	cmp	r3, r2
 8005374:	bf38      	it	cc
 8005376:	4613      	movcc	r3, r2
 8005378:	461a      	mov	r2, r3
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f001 f9a8 	bl	80066d0 <USBD_CtlContinueRx>
 8005380:	e07d      	b.n	800547e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	2b02      	cmp	r3, #2
 800538e:	d014      	beq.n	80053ba <USBD_LL_DataOutStage+0xaa>
 8005390:	2b02      	cmp	r3, #2
 8005392:	d81d      	bhi.n	80053d0 <USBD_LL_DataOutStage+0xc0>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <USBD_LL_DataOutStage+0x8e>
 8005398:	2b01      	cmp	r3, #1
 800539a:	d003      	beq.n	80053a4 <USBD_LL_DataOutStage+0x94>
 800539c:	e018      	b.n	80053d0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	75bb      	strb	r3, [r7, #22]
            break;
 80053a2:	e018      	b.n	80053d6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	4619      	mov	r1, r3
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 fa6e 	bl	8005890 <USBD_CoreFindIF>
 80053b4:	4603      	mov	r3, r0
 80053b6:	75bb      	strb	r3, [r7, #22]
            break;
 80053b8:	e00d      	b.n	80053d6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	4619      	mov	r1, r3
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fa70 	bl	80058aa <USBD_CoreFindEP>
 80053ca:	4603      	mov	r3, r0
 80053cc:	75bb      	strb	r3, [r7, #22]
            break;
 80053ce:	e002      	b.n	80053d6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	75bb      	strb	r3, [r7, #22]
            break;
 80053d4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80053d6:	7dbb      	ldrb	r3, [r7, #22]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d119      	bne.n	8005410 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d113      	bne.n	8005410 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80053e8:	7dba      	ldrb	r2, [r7, #22]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	32ae      	adds	r2, #174	@ 0xae
 80053ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00b      	beq.n	8005410 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80053f8:	7dba      	ldrb	r2, [r7, #22]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005400:	7dba      	ldrb	r2, [r7, #22]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	32ae      	adds	r2, #174	@ 0xae
 8005406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f001 f96e 	bl	80066f2 <USBD_CtlSendStatus>
 8005416:	e032      	b.n	800547e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005418:	7afb      	ldrb	r3, [r7, #11]
 800541a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800541e:	b2db      	uxtb	r3, r3
 8005420:	4619      	mov	r1, r3
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fa41 	bl	80058aa <USBD_CoreFindEP>
 8005428:	4603      	mov	r3, r0
 800542a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800542c:	7dbb      	ldrb	r3, [r7, #22]
 800542e:	2bff      	cmp	r3, #255	@ 0xff
 8005430:	d025      	beq.n	800547e <USBD_LL_DataOutStage+0x16e>
 8005432:	7dbb      	ldrb	r3, [r7, #22]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d122      	bne.n	800547e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b03      	cmp	r3, #3
 8005442:	d117      	bne.n	8005474 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005444:	7dba      	ldrb	r2, [r7, #22]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	32ae      	adds	r2, #174	@ 0xae
 800544a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00f      	beq.n	8005474 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005454:	7dba      	ldrb	r2, [r7, #22]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800545c:	7dba      	ldrb	r2, [r7, #22]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	32ae      	adds	r2, #174	@ 0xae
 8005462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	7afa      	ldrb	r2, [r7, #11]
 800546a:	4611      	mov	r1, r2
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	4798      	blx	r3
 8005470:	4603      	mov	r3, r0
 8005472:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800547a:	7dfb      	ldrb	r3, [r7, #23]
 800547c:	e000      	b.n	8005480 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	460b      	mov	r3, r1
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005496:	7afb      	ldrb	r3, [r7, #11]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d178      	bne.n	800558e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3314      	adds	r3, #20
 80054a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d163      	bne.n	8005574 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	8992      	ldrh	r2, [r2, #12]
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d91c      	bls.n	80054f2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	8992      	ldrh	r2, [r2, #12]
 80054c0:	1a9a      	subs	r2, r3, r2
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	8992      	ldrh	r2, [r2, #12]
 80054ce:	441a      	add	r2, r3
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	6919      	ldr	r1, [r3, #16]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	461a      	mov	r2, r3
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f001 f8c4 	bl	800666c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054e4:	2300      	movs	r3, #0
 80054e6:	2200      	movs	r2, #0
 80054e8:	2100      	movs	r1, #0
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f003 fb66 	bl	8008bbc <USBD_LL_PrepareReceive>
 80054f0:	e040      	b.n	8005574 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	899b      	ldrh	r3, [r3, #12]
 80054f6:	461a      	mov	r2, r3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d11c      	bne.n	800553a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005508:	4293      	cmp	r3, r2
 800550a:	d316      	bcc.n	800553a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005516:	429a      	cmp	r2, r3
 8005518:	d20f      	bcs.n	800553a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800551a:	2200      	movs	r2, #0
 800551c:	2100      	movs	r1, #0
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f001 f8a4 	bl	800666c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800552c:	2300      	movs	r3, #0
 800552e:	2200      	movs	r2, #0
 8005530:	2100      	movs	r1, #0
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f003 fb42 	bl	8008bbc <USBD_LL_PrepareReceive>
 8005538:	e01c      	b.n	8005574 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b03      	cmp	r3, #3
 8005544:	d10f      	bne.n	8005566 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005566:	2180      	movs	r1, #128	@ 0x80
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f003 fa7d 	bl	8008a68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f001 f8d2 	bl	8006718 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d03a      	beq.n	80055f4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7ff fe30 	bl	80051e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800558c:	e032      	b.n	80055f4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800558e:	7afb      	ldrb	r3, [r7, #11]
 8005590:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005594:	b2db      	uxtb	r3, r3
 8005596:	4619      	mov	r1, r3
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f986 	bl	80058aa <USBD_CoreFindEP>
 800559e:	4603      	mov	r3, r0
 80055a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80055a2:	7dfb      	ldrb	r3, [r7, #23]
 80055a4:	2bff      	cmp	r3, #255	@ 0xff
 80055a6:	d025      	beq.n	80055f4 <USBD_LL_DataInStage+0x16c>
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d122      	bne.n	80055f4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d11c      	bne.n	80055f4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80055ba:	7dfa      	ldrb	r2, [r7, #23]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	32ae      	adds	r2, #174	@ 0xae
 80055c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d014      	beq.n	80055f4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80055ca:	7dfa      	ldrb	r2, [r7, #23]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80055d2:	7dfa      	ldrb	r2, [r7, #23]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	32ae      	adds	r2, #174	@ 0xae
 80055d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	7afa      	ldrb	r2, [r7, #11]
 80055e0:	4611      	mov	r1, r2
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	4798      	blx	r3
 80055e6:	4603      	mov	r3, r0
 80055e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80055ea:	7dbb      	ldrb	r3, [r7, #22]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80055f0:	7dbb      	ldrb	r3, [r7, #22]
 80055f2:	e000      	b.n	80055f6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d014      	beq.n	8005664 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00e      	beq.n	8005664 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6852      	ldr	r2, [r2, #4]
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	4611      	mov	r1, r2
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005660:	2303      	movs	r3, #3
 8005662:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005664:	2340      	movs	r3, #64	@ 0x40
 8005666:	2200      	movs	r2, #0
 8005668:	2100      	movs	r1, #0
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f003 f9b7 	bl	80089de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2240      	movs	r2, #64	@ 0x40
 800567c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005680:	2340      	movs	r3, #64	@ 0x40
 8005682:	2200      	movs	r2, #0
 8005684:	2180      	movs	r1, #128	@ 0x80
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f003 f9a9 	bl	80089de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2240      	movs	r2, #64	@ 0x40
 8005698:	841a      	strh	r2, [r3, #32]

  return ret;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	78fa      	ldrb	r2, [r7, #3]
 80056b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d006      	beq.n	80056e6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2204      	movs	r2, #4
 80056ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b04      	cmp	r3, #4
 800570e:	d106      	bne.n	800571e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005716:	b2da      	uxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b03      	cmp	r3, #3
 800573e:	d110      	bne.n	8005762 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	32ae      	adds	r2, #174	@ 0xae
 8005782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800578a:	2303      	movs	r3, #3
 800578c:	e01c      	b.n	80057c8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b03      	cmp	r3, #3
 8005798:	d115      	bne.n	80057c6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	32ae      	adds	r2, #174	@ 0xae
 80057a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00b      	beq.n	80057c6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	32ae      	adds	r2, #174	@ 0xae
 80057b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	78fa      	ldrb	r2, [r7, #3]
 80057c0:	4611      	mov	r1, r2
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	32ae      	adds	r2, #174	@ 0xae
 80057e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e01c      	b.n	800582c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d115      	bne.n	800582a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	32ae      	adds	r2, #174	@ 0xae
 8005808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00b      	beq.n	800582a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	32ae      	adds	r2, #174	@ 0xae
 800581c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005822:	78fa      	ldrb	r2, [r7, #3]
 8005824:	4611      	mov	r1, r2
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00e      	beq.n	8005886 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6852      	ldr	r2, [r2, #4]
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	4611      	mov	r1, r2
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	4798      	blx	r3
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005882:	2303      	movs	r3, #3
 8005884:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005886:	7bfb      	ldrb	r3, [r7, #15]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800589c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80058b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	885b      	ldrh	r3, [r3, #2]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	7812      	ldrb	r2, [r2, #0]
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d91f      	bls.n	800592a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80058f0:	e013      	b.n	800591a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80058f2:	f107 030a 	add.w	r3, r7, #10
 80058f6:	4619      	mov	r1, r3
 80058f8:	6978      	ldr	r0, [r7, #20]
 80058fa:	f000 f81b 	bl	8005934 <USBD_GetNextDesc>
 80058fe:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	785b      	ldrb	r3, [r3, #1]
 8005904:	2b05      	cmp	r3, #5
 8005906:	d108      	bne.n	800591a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	789b      	ldrb	r3, [r3, #2]
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	429a      	cmp	r2, r3
 8005914:	d008      	beq.n	8005928 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	885b      	ldrh	r3, [r3, #2]
 800591e:	b29a      	uxth	r2, r3
 8005920:	897b      	ldrh	r3, [r7, #10]
 8005922:	429a      	cmp	r2, r3
 8005924:	d8e5      	bhi.n	80058f2 <USBD_GetEpDesc+0x2e>
 8005926:	e000      	b.n	800592a <USBD_GetEpDesc+0x66>
          break;
 8005928:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800592a:	693b      	ldr	r3, [r7, #16]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	7812      	ldrb	r2, [r2, #0]
 800594a:	4413      	add	r3, r2
 800594c:	b29a      	uxth	r2, r3
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4413      	add	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800595e:	68fb      	ldr	r3, [r7, #12]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	3301      	adds	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800598a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	b21a      	sxth	r2, r3
 8005992:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005996:	4313      	orrs	r3, r2
 8005998:	b21b      	sxth	r3, r3
 800599a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800599c:	89fb      	ldrh	r3, [r7, #14]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80059c2:	2b40      	cmp	r3, #64	@ 0x40
 80059c4:	d005      	beq.n	80059d2 <USBD_StdDevReq+0x26>
 80059c6:	2b40      	cmp	r3, #64	@ 0x40
 80059c8:	d857      	bhi.n	8005a7a <USBD_StdDevReq+0xce>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00f      	beq.n	80059ee <USBD_StdDevReq+0x42>
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d153      	bne.n	8005a7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	32ae      	adds	r2, #174	@ 0xae
 80059dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	4798      	blx	r3
 80059e8:	4603      	mov	r3, r0
 80059ea:	73fb      	strb	r3, [r7, #15]
      break;
 80059ec:	e04a      	b.n	8005a84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	2b09      	cmp	r3, #9
 80059f4:	d83b      	bhi.n	8005a6e <USBD_StdDevReq+0xc2>
 80059f6:	a201      	add	r2, pc, #4	@ (adr r2, 80059fc <USBD_StdDevReq+0x50>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a51 	.word	0x08005a51
 8005a00:	08005a65 	.word	0x08005a65
 8005a04:	08005a6f 	.word	0x08005a6f
 8005a08:	08005a5b 	.word	0x08005a5b
 8005a0c:	08005a6f 	.word	0x08005a6f
 8005a10:	08005a2f 	.word	0x08005a2f
 8005a14:	08005a25 	.word	0x08005a25
 8005a18:	08005a6f 	.word	0x08005a6f
 8005a1c:	08005a47 	.word	0x08005a47
 8005a20:	08005a39 	.word	0x08005a39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa3e 	bl	8005ea8 <USBD_GetDescriptor>
          break;
 8005a2c:	e024      	b.n	8005a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fba3 	bl	800617c <USBD_SetAddress>
          break;
 8005a36:	e01f      	b.n	8005a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fbe2 	bl	8006204 <USBD_SetConfig>
 8005a40:	4603      	mov	r3, r0
 8005a42:	73fb      	strb	r3, [r7, #15]
          break;
 8005a44:	e018      	b.n	8005a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a46:	6839      	ldr	r1, [r7, #0]
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fc85 	bl	8006358 <USBD_GetConfig>
          break;
 8005a4e:	e013      	b.n	8005a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fcb6 	bl	80063c4 <USBD_GetStatus>
          break;
 8005a58:	e00e      	b.n	8005a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fce5 	bl	800642c <USBD_SetFeature>
          break;
 8005a62:	e009      	b.n	8005a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a64:	6839      	ldr	r1, [r7, #0]
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fd09 	bl	800647e <USBD_ClrFeature>
          break;
 8005a6c:	e004      	b.n	8005a78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fd60 	bl	8006536 <USBD_CtlError>
          break;
 8005a76:	bf00      	nop
      }
      break;
 8005a78:	e004      	b.n	8005a84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005a7a:	6839      	ldr	r1, [r7, #0]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fd5a 	bl	8006536 <USBD_CtlError>
      break;
 8005a82:	bf00      	nop
  }

  return ret;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop

08005a90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005aa6:	2b40      	cmp	r3, #64	@ 0x40
 8005aa8:	d005      	beq.n	8005ab6 <USBD_StdItfReq+0x26>
 8005aaa:	2b40      	cmp	r3, #64	@ 0x40
 8005aac:	d852      	bhi.n	8005b54 <USBD_StdItfReq+0xc4>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <USBD_StdItfReq+0x26>
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d14e      	bne.n	8005b54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d840      	bhi.n	8005b46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	889b      	ldrh	r3, [r3, #4]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d836      	bhi.n	8005b3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	889b      	ldrh	r3, [r3, #4]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff feda 	bl	8005890 <USBD_CoreFindIF>
 8005adc:	4603      	mov	r3, r0
 8005ade:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ae0:	7bbb      	ldrb	r3, [r7, #14]
 8005ae2:	2bff      	cmp	r3, #255	@ 0xff
 8005ae4:	d01d      	beq.n	8005b22 <USBD_StdItfReq+0x92>
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11a      	bne.n	8005b22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005aec:	7bba      	ldrb	r2, [r7, #14]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	32ae      	adds	r2, #174	@ 0xae
 8005af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00f      	beq.n	8005b1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005afc:	7bba      	ldrb	r2, [r7, #14]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005b04:	7bba      	ldrb	r2, [r7, #14]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	32ae      	adds	r2, #174	@ 0xae
 8005b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	4798      	blx	r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b1a:	e004      	b.n	8005b26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b20:	e001      	b.n	8005b26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005b22:	2303      	movs	r3, #3
 8005b24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	88db      	ldrh	r3, [r3, #6]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d110      	bne.n	8005b50 <USBD_StdItfReq+0xc0>
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10d      	bne.n	8005b50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fddc 	bl	80066f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b3a:	e009      	b.n	8005b50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fcf9 	bl	8006536 <USBD_CtlError>
          break;
 8005b44:	e004      	b.n	8005b50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fcf4 	bl	8006536 <USBD_CtlError>
          break;
 8005b4e:	e000      	b.n	8005b52 <USBD_StdItfReq+0xc2>
          break;
 8005b50:	bf00      	nop
      }
      break;
 8005b52:	e004      	b.n	8005b5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fced 	bl	8006536 <USBD_CtlError>
      break;
 8005b5c:	bf00      	nop
  }

  return ret;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	889b      	ldrh	r3, [r3, #4]
 8005b7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b84:	2b40      	cmp	r3, #64	@ 0x40
 8005b86:	d007      	beq.n	8005b98 <USBD_StdEPReq+0x30>
 8005b88:	2b40      	cmp	r3, #64	@ 0x40
 8005b8a:	f200 8181 	bhi.w	8005e90 <USBD_StdEPReq+0x328>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d02a      	beq.n	8005be8 <USBD_StdEPReq+0x80>
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	f040 817c 	bne.w	8005e90 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005b98:	7bbb      	ldrb	r3, [r7, #14]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff fe84 	bl	80058aa <USBD_CoreFindEP>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ba6:	7b7b      	ldrb	r3, [r7, #13]
 8005ba8:	2bff      	cmp	r3, #255	@ 0xff
 8005baa:	f000 8176 	beq.w	8005e9a <USBD_StdEPReq+0x332>
 8005bae:	7b7b      	ldrb	r3, [r7, #13]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f040 8172 	bne.w	8005e9a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8005bb6:	7b7a      	ldrb	r2, [r7, #13]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005bbe:	7b7a      	ldrb	r2, [r7, #13]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	32ae      	adds	r2, #174	@ 0xae
 8005bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 8165 	beq.w	8005e9a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005bd0:	7b7a      	ldrb	r2, [r7, #13]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	32ae      	adds	r2, #174	@ 0xae
 8005bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4798      	blx	r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005be6:	e158      	b.n	8005e9a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d008      	beq.n	8005c02 <USBD_StdEPReq+0x9a>
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	f300 8147 	bgt.w	8005e84 <USBD_StdEPReq+0x31c>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 809b 	beq.w	8005d32 <USBD_StdEPReq+0x1ca>
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d03c      	beq.n	8005c7a <USBD_StdEPReq+0x112>
 8005c00:	e140      	b.n	8005e84 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d002      	beq.n	8005c14 <USBD_StdEPReq+0xac>
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d016      	beq.n	8005c40 <USBD_StdEPReq+0xd8>
 8005c12:	e02c      	b.n	8005c6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c14:	7bbb      	ldrb	r3, [r7, #14]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00d      	beq.n	8005c36 <USBD_StdEPReq+0xce>
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	2b80      	cmp	r3, #128	@ 0x80
 8005c1e:	d00a      	beq.n	8005c36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f002 ff1f 	bl	8008a68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c2a:	2180      	movs	r1, #128	@ 0x80
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f002 ff1b 	bl	8008a68 <USBD_LL_StallEP>
 8005c32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c34:	e020      	b.n	8005c78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fc7c 	bl	8006536 <USBD_CtlError>
              break;
 8005c3e:	e01b      	b.n	8005c78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	885b      	ldrh	r3, [r3, #2]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10e      	bne.n	8005c66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00b      	beq.n	8005c66 <USBD_StdEPReq+0xfe>
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	2b80      	cmp	r3, #128	@ 0x80
 8005c52:	d008      	beq.n	8005c66 <USBD_StdEPReq+0xfe>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	88db      	ldrh	r3, [r3, #6]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c5c:	7bbb      	ldrb	r3, [r7, #14]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f002 ff01 	bl	8008a68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fd43 	bl	80066f2 <USBD_CtlSendStatus>

              break;
 8005c6c:	e004      	b.n	8005c78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fc60 	bl	8006536 <USBD_CtlError>
              break;
 8005c76:	bf00      	nop
          }
          break;
 8005c78:	e109      	b.n	8005e8e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d002      	beq.n	8005c8c <USBD_StdEPReq+0x124>
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d016      	beq.n	8005cb8 <USBD_StdEPReq+0x150>
 8005c8a:	e04b      	b.n	8005d24 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c8c:	7bbb      	ldrb	r3, [r7, #14]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00d      	beq.n	8005cae <USBD_StdEPReq+0x146>
 8005c92:	7bbb      	ldrb	r3, [r7, #14]
 8005c94:	2b80      	cmp	r3, #128	@ 0x80
 8005c96:	d00a      	beq.n	8005cae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f002 fee3 	bl	8008a68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ca2:	2180      	movs	r1, #128	@ 0x80
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f002 fedf 	bl	8008a68 <USBD_LL_StallEP>
 8005caa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005cac:	e040      	b.n	8005d30 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fc40 	bl	8006536 <USBD_CtlError>
              break;
 8005cb6:	e03b      	b.n	8005d30 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	885b      	ldrh	r3, [r3, #2]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d136      	bne.n	8005d2e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005cc0:	7bbb      	ldrb	r3, [r7, #14]
 8005cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d004      	beq.n	8005cd4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005cca:	7bbb      	ldrb	r3, [r7, #14]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f002 fee9 	bl	8008aa6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fd0c 	bl	80066f2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005cda:	7bbb      	ldrb	r3, [r7, #14]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff fde3 	bl	80058aa <USBD_CoreFindEP>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ce8:	7b7b      	ldrb	r3, [r7, #13]
 8005cea:	2bff      	cmp	r3, #255	@ 0xff
 8005cec:	d01f      	beq.n	8005d2e <USBD_StdEPReq+0x1c6>
 8005cee:	7b7b      	ldrb	r3, [r7, #13]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d11c      	bne.n	8005d2e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005cf4:	7b7a      	ldrb	r2, [r7, #13]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005cfc:	7b7a      	ldrb	r2, [r7, #13]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	32ae      	adds	r2, #174	@ 0xae
 8005d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d010      	beq.n	8005d2e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005d0c:	7b7a      	ldrb	r2, [r7, #13]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	32ae      	adds	r2, #174	@ 0xae
 8005d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005d22:	e004      	b.n	8005d2e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fc05 	bl	8006536 <USBD_CtlError>
              break;
 8005d2c:	e000      	b.n	8005d30 <USBD_StdEPReq+0x1c8>
              break;
 8005d2e:	bf00      	nop
          }
          break;
 8005d30:	e0ad      	b.n	8005e8e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d002      	beq.n	8005d44 <USBD_StdEPReq+0x1dc>
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d033      	beq.n	8005daa <USBD_StdEPReq+0x242>
 8005d42:	e099      	b.n	8005e78 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d44:	7bbb      	ldrb	r3, [r7, #14]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <USBD_StdEPReq+0x1f2>
 8005d4a:	7bbb      	ldrb	r3, [r7, #14]
 8005d4c:	2b80      	cmp	r3, #128	@ 0x80
 8005d4e:	d004      	beq.n	8005d5a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fbef 	bl	8006536 <USBD_CtlError>
                break;
 8005d58:	e093      	b.n	8005e82 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	da0b      	bge.n	8005d7a <USBD_StdEPReq+0x212>
 8005d62:	7bbb      	ldrb	r3, [r7, #14]
 8005d64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	3310      	adds	r3, #16
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	4413      	add	r3, r2
 8005d76:	3304      	adds	r3, #4
 8005d78:	e00b      	b.n	8005d92 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d7a:	7bbb      	ldrb	r3, [r7, #14]
 8005d7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4413      	add	r3, r2
 8005d90:	3304      	adds	r3, #4
 8005d92:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2200      	movs	r2, #0
 8005d98:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	330e      	adds	r3, #14
 8005d9e:	2202      	movs	r2, #2
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fc44 	bl	8006630 <USBD_CtlSendData>
              break;
 8005da8:	e06b      	b.n	8005e82 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005daa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	da11      	bge.n	8005dd6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005db2:	7bbb      	ldrb	r3, [r7, #14]
 8005db4:	f003 020f 	and.w	r2, r3, #15
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	3323      	adds	r3, #35	@ 0x23
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d117      	bne.n	8005dfc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fbb1 	bl	8006536 <USBD_CtlError>
                  break;
 8005dd4:	e055      	b.n	8005e82 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005dd6:	7bbb      	ldrb	r3, [r7, #14]
 8005dd8:	f003 020f 	and.w	r2, r3, #15
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	440b      	add	r3, r1
 8005de8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fb9e 	bl	8006536 <USBD_CtlError>
                  break;
 8005dfa:	e042      	b.n	8005e82 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	da0b      	bge.n	8005e1c <USBD_StdEPReq+0x2b4>
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	3310      	adds	r3, #16
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	4413      	add	r3, r2
 8005e18:	3304      	adds	r3, #4
 8005e1a:	e00b      	b.n	8005e34 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e1c:	7bbb      	ldrb	r3, [r7, #14]
 8005e1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	4413      	add	r3, r2
 8005e32:	3304      	adds	r3, #4
 8005e34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e36:	7bbb      	ldrb	r3, [r7, #14]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <USBD_StdEPReq+0x2da>
 8005e3c:	7bbb      	ldrb	r3, [r7, #14]
 8005e3e:	2b80      	cmp	r3, #128	@ 0x80
 8005e40:	d103      	bne.n	8005e4a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2200      	movs	r2, #0
 8005e46:	739a      	strb	r2, [r3, #14]
 8005e48:	e00e      	b.n	8005e68 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e4a:	7bbb      	ldrb	r3, [r7, #14]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f002 fe48 	bl	8008ae4 <USBD_LL_IsStallEP>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	739a      	strb	r2, [r3, #14]
 8005e60:	e002      	b.n	8005e68 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2200      	movs	r2, #0
 8005e66:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	330e      	adds	r3, #14
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fbdd 	bl	8006630 <USBD_CtlSendData>
              break;
 8005e76:	e004      	b.n	8005e82 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fb5b 	bl	8006536 <USBD_CtlError>
              break;
 8005e80:	bf00      	nop
          }
          break;
 8005e82:	e004      	b.n	8005e8e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fb55 	bl	8006536 <USBD_CtlError>
          break;
 8005e8c:	bf00      	nop
      }
      break;
 8005e8e:	e005      	b.n	8005e9c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fb4f 	bl	8006536 <USBD_CtlError>
      break;
 8005e98:	e000      	b.n	8005e9c <USBD_StdEPReq+0x334>
      break;
 8005e9a:	bf00      	nop
  }

  return ret;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	885b      	ldrh	r3, [r3, #2]
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	2b06      	cmp	r3, #6
 8005eca:	f200 8128 	bhi.w	800611e <USBD_GetDescriptor+0x276>
 8005ece:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed4 <USBD_GetDescriptor+0x2c>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005ef1 	.word	0x08005ef1
 8005ed8:	08005f09 	.word	0x08005f09
 8005edc:	08005f49 	.word	0x08005f49
 8005ee0:	0800611f 	.word	0x0800611f
 8005ee4:	0800611f 	.word	0x0800611f
 8005ee8:	080060bf 	.word	0x080060bf
 8005eec:	080060eb 	.word	0x080060eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	7c12      	ldrb	r2, [r2, #16]
 8005efc:	f107 0108 	add.w	r1, r7, #8
 8005f00:	4610      	mov	r0, r2
 8005f02:	4798      	blx	r3
 8005f04:	60f8      	str	r0, [r7, #12]
      break;
 8005f06:	e112      	b.n	800612e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	7c1b      	ldrb	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10d      	bne.n	8005f2c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	f107 0208 	add.w	r2, r7, #8
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4798      	blx	r3
 8005f20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3301      	adds	r3, #1
 8005f26:	2202      	movs	r2, #2
 8005f28:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f2a:	e100      	b.n	800612e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f34:	f107 0208 	add.w	r2, r7, #8
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4798      	blx	r3
 8005f3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3301      	adds	r3, #1
 8005f42:	2202      	movs	r2, #2
 8005f44:	701a      	strb	r2, [r3, #0]
      break;
 8005f46:	e0f2      	b.n	800612e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	885b      	ldrh	r3, [r3, #2]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	f200 80ac 	bhi.w	80060ac <USBD_GetDescriptor+0x204>
 8005f54:	a201      	add	r2, pc, #4	@ (adr r2, 8005f5c <USBD_GetDescriptor+0xb4>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005f75 	.word	0x08005f75
 8005f60:	08005fa9 	.word	0x08005fa9
 8005f64:	08005fdd 	.word	0x08005fdd
 8005f68:	08006011 	.word	0x08006011
 8005f6c:	08006045 	.word	0x08006045
 8005f70:	08006079 	.word	0x08006079
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	7c12      	ldrb	r2, [r2, #16]
 8005f8c:	f107 0108 	add.w	r1, r7, #8
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
 8005f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f96:	e091      	b.n	80060bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 facb 	bl	8006536 <USBD_CtlError>
            err++;
 8005fa0:	7afb      	ldrb	r3, [r7, #11]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8005fa6:	e089      	b.n	80060bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	7c12      	ldrb	r2, [r2, #16]
 8005fc0:	f107 0108 	add.w	r1, r7, #8
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	4798      	blx	r3
 8005fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fca:	e077      	b.n	80060bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fab1 	bl	8006536 <USBD_CtlError>
            err++;
 8005fd4:	7afb      	ldrb	r3, [r7, #11]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8005fda:	e06f      	b.n	80060bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00b      	beq.n	8006000 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	7c12      	ldrb	r2, [r2, #16]
 8005ff4:	f107 0108 	add.w	r1, r7, #8
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4798      	blx	r3
 8005ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ffe:	e05d      	b.n	80060bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa97 	bl	8006536 <USBD_CtlError>
            err++;
 8006008:	7afb      	ldrb	r3, [r7, #11]
 800600a:	3301      	adds	r3, #1
 800600c:	72fb      	strb	r3, [r7, #11]
          break;
 800600e:	e055      	b.n	80060bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	7c12      	ldrb	r2, [r2, #16]
 8006028:	f107 0108 	add.w	r1, r7, #8
 800602c:	4610      	mov	r0, r2
 800602e:	4798      	blx	r3
 8006030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006032:	e043      	b.n	80060bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa7d 	bl	8006536 <USBD_CtlError>
            err++;
 800603c:	7afb      	ldrb	r3, [r7, #11]
 800603e:	3301      	adds	r3, #1
 8006040:	72fb      	strb	r3, [r7, #11]
          break;
 8006042:	e03b      	b.n	80060bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00b      	beq.n	8006068 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	7c12      	ldrb	r2, [r2, #16]
 800605c:	f107 0108 	add.w	r1, r7, #8
 8006060:	4610      	mov	r0, r2
 8006062:	4798      	blx	r3
 8006064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006066:	e029      	b.n	80060bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa63 	bl	8006536 <USBD_CtlError>
            err++;
 8006070:	7afb      	ldrb	r3, [r7, #11]
 8006072:	3301      	adds	r3, #1
 8006074:	72fb      	strb	r3, [r7, #11]
          break;
 8006076:	e021      	b.n	80060bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	7c12      	ldrb	r2, [r2, #16]
 8006090:	f107 0108 	add.w	r1, r7, #8
 8006094:	4610      	mov	r0, r2
 8006096:	4798      	blx	r3
 8006098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800609a:	e00f      	b.n	80060bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fa49 	bl	8006536 <USBD_CtlError>
            err++;
 80060a4:	7afb      	ldrb	r3, [r7, #11]
 80060a6:	3301      	adds	r3, #1
 80060a8:	72fb      	strb	r3, [r7, #11]
          break;
 80060aa:	e007      	b.n	80060bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa41 	bl	8006536 <USBD_CtlError>
          err++;
 80060b4:	7afb      	ldrb	r3, [r7, #11]
 80060b6:	3301      	adds	r3, #1
 80060b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80060ba:	bf00      	nop
      }
      break;
 80060bc:	e037      	b.n	800612e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	7c1b      	ldrb	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ce:	f107 0208 	add.w	r2, r7, #8
 80060d2:	4610      	mov	r0, r2
 80060d4:	4798      	blx	r3
 80060d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060d8:	e029      	b.n	800612e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fa2a 	bl	8006536 <USBD_CtlError>
        err++;
 80060e2:	7afb      	ldrb	r3, [r7, #11]
 80060e4:	3301      	adds	r3, #1
 80060e6:	72fb      	strb	r3, [r7, #11]
      break;
 80060e8:	e021      	b.n	800612e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	7c1b      	ldrb	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10d      	bne.n	800610e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fa:	f107 0208 	add.w	r2, r7, #8
 80060fe:	4610      	mov	r0, r2
 8006100:	4798      	blx	r3
 8006102:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3301      	adds	r3, #1
 8006108:	2207      	movs	r2, #7
 800610a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800610c:	e00f      	b.n	800612e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fa10 	bl	8006536 <USBD_CtlError>
        err++;
 8006116:	7afb      	ldrb	r3, [r7, #11]
 8006118:	3301      	adds	r3, #1
 800611a:	72fb      	strb	r3, [r7, #11]
      break;
 800611c:	e007      	b.n	800612e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fa08 	bl	8006536 <USBD_CtlError>
      err++;
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	3301      	adds	r3, #1
 800612a:	72fb      	strb	r3, [r7, #11]
      break;
 800612c:	bf00      	nop
  }

  if (err != 0U)
 800612e:	7afb      	ldrb	r3, [r7, #11]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11e      	bne.n	8006172 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	88db      	ldrh	r3, [r3, #6]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d016      	beq.n	800616a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800613c:	893b      	ldrh	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00e      	beq.n	8006160 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	88da      	ldrh	r2, [r3, #6]
 8006146:	893b      	ldrh	r3, [r7, #8]
 8006148:	4293      	cmp	r3, r2
 800614a:	bf28      	it	cs
 800614c:	4613      	movcs	r3, r2
 800614e:	b29b      	uxth	r3, r3
 8006150:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006152:	893b      	ldrh	r3, [r7, #8]
 8006154:	461a      	mov	r2, r3
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fa69 	bl	8006630 <USBD_CtlSendData>
 800615e:	e009      	b.n	8006174 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9e7 	bl	8006536 <USBD_CtlError>
 8006168:	e004      	b.n	8006174 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fac1 	bl	80066f2 <USBD_CtlSendStatus>
 8006170:	e000      	b.n	8006174 <USBD_GetDescriptor+0x2cc>
    return;
 8006172:	bf00      	nop
  }
}
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop

0800617c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	889b      	ldrh	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d131      	bne.n	80061f2 <USBD_SetAddress+0x76>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	88db      	ldrh	r3, [r3, #6]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d12d      	bne.n	80061f2 <USBD_SetAddress+0x76>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	885b      	ldrh	r3, [r3, #2]
 800619a:	2b7f      	cmp	r3, #127	@ 0x7f
 800619c:	d829      	bhi.n	80061f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	885b      	ldrh	r3, [r3, #2]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d104      	bne.n	80061c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80061b6:	6839      	ldr	r1, [r7, #0]
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f9bc 	bl	8006536 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061be:	e01d      	b.n	80061fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	7bfa      	ldrb	r2, [r7, #15]
 80061c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f002 fcb5 	bl	8008b3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa8d 	bl	80066f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d004      	beq.n	80061e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2202      	movs	r2, #2
 80061e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e6:	e009      	b.n	80061fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f0:	e004      	b.n	80061fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f99e 	bl	8006536 <USBD_CtlError>
  }
}
 80061fa:	bf00      	nop
 80061fc:	bf00      	nop
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	885b      	ldrh	r3, [r3, #2]
 8006216:	b2da      	uxtb	r2, r3
 8006218:	4b4e      	ldr	r3, [pc, #312]	@ (8006354 <USBD_SetConfig+0x150>)
 800621a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800621c:	4b4d      	ldr	r3, [pc, #308]	@ (8006354 <USBD_SetConfig+0x150>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d905      	bls.n	8006230 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f985 	bl	8006536 <USBD_CtlError>
    return USBD_FAIL;
 800622c:	2303      	movs	r3, #3
 800622e:	e08c      	b.n	800634a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d002      	beq.n	8006242 <USBD_SetConfig+0x3e>
 800623c:	2b03      	cmp	r3, #3
 800623e:	d029      	beq.n	8006294 <USBD_SetConfig+0x90>
 8006240:	e075      	b.n	800632e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006242:	4b44      	ldr	r3, [pc, #272]	@ (8006354 <USBD_SetConfig+0x150>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d020      	beq.n	800628c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800624a:	4b42      	ldr	r3, [pc, #264]	@ (8006354 <USBD_SetConfig+0x150>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006254:	4b3f      	ldr	r3, [pc, #252]	@ (8006354 <USBD_SetConfig+0x150>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fe ffcd 	bl	80051fa <USBD_SetClassConfig>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d008      	beq.n	800627c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f962 	bl	8006536 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800627a:	e065      	b.n	8006348 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fa38 	bl	80066f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2203      	movs	r2, #3
 8006286:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800628a:	e05d      	b.n	8006348 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fa30 	bl	80066f2 <USBD_CtlSendStatus>
      break;
 8006292:	e059      	b.n	8006348 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006294:	4b2f      	ldr	r3, [pc, #188]	@ (8006354 <USBD_SetConfig+0x150>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d112      	bne.n	80062c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80062a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006354 <USBD_SetConfig+0x150>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062ae:	4b29      	ldr	r3, [pc, #164]	@ (8006354 <USBD_SetConfig+0x150>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7fe ffbc 	bl	8005232 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa19 	bl	80066f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80062c0:	e042      	b.n	8006348 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80062c2:	4b24      	ldr	r3, [pc, #144]	@ (8006354 <USBD_SetConfig+0x150>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d02a      	beq.n	8006326 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7fe ffaa 	bl	8005232 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80062de:	4b1d      	ldr	r3, [pc, #116]	@ (8006354 <USBD_SetConfig+0x150>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80062e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006354 <USBD_SetConfig+0x150>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fe ff83 	bl	80051fa <USBD_SetClassConfig>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00f      	beq.n	800631e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f918 	bl	8006536 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fe ff8f 	bl	8005232 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800631c:	e014      	b.n	8006348 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f9e7 	bl	80066f2 <USBD_CtlSendStatus>
      break;
 8006324:	e010      	b.n	8006348 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f9e3 	bl	80066f2 <USBD_CtlSendStatus>
      break;
 800632c:	e00c      	b.n	8006348 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f900 	bl	8006536 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006336:	4b07      	ldr	r3, [pc, #28]	@ (8006354 <USBD_SetConfig+0x150>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7fe ff78 	bl	8005232 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006342:	2303      	movs	r3, #3
 8006344:	73fb      	strb	r3, [r7, #15]
      break;
 8006346:	bf00      	nop
  }

  return ret;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20000470 	.word	0x20000470

08006358 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	88db      	ldrh	r3, [r3, #6]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d004      	beq.n	8006374 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f8e2 	bl	8006536 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006372:	e023      	b.n	80063bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	dc02      	bgt.n	8006386 <USBD_GetConfig+0x2e>
 8006380:	2b00      	cmp	r3, #0
 8006382:	dc03      	bgt.n	800638c <USBD_GetConfig+0x34>
 8006384:	e015      	b.n	80063b2 <USBD_GetConfig+0x5a>
 8006386:	2b03      	cmp	r3, #3
 8006388:	d00b      	beq.n	80063a2 <USBD_GetConfig+0x4a>
 800638a:	e012      	b.n	80063b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3308      	adds	r3, #8
 8006396:	2201      	movs	r2, #1
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f948 	bl	8006630 <USBD_CtlSendData>
        break;
 80063a0:	e00c      	b.n	80063bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3304      	adds	r3, #4
 80063a6:	2201      	movs	r2, #1
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f940 	bl	8006630 <USBD_CtlSendData>
        break;
 80063b0:	e004      	b.n	80063bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f8be 	bl	8006536 <USBD_CtlError>
        break;
 80063ba:	bf00      	nop
}
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d81e      	bhi.n	800641a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	88db      	ldrh	r3, [r3, #6]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d004      	beq.n	80063ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f8a5 	bl	8006536 <USBD_CtlError>
        break;
 80063ec:	e01a      	b.n	8006424 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f043 0202 	orr.w	r2, r3, #2
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	330c      	adds	r3, #12
 800640e:	2202      	movs	r2, #2
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f90c 	bl	8006630 <USBD_CtlSendData>
      break;
 8006418:	e004      	b.n	8006424 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f88a 	bl	8006536 <USBD_CtlError>
      break;
 8006422:	bf00      	nop
  }
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	885b      	ldrh	r3, [r3, #2]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d107      	bne.n	800644e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f953 	bl	80066f2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800644c:	e013      	b.n	8006476 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	885b      	ldrh	r3, [r3, #2]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d10b      	bne.n	800646e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	889b      	ldrh	r3, [r3, #4]
 800645a:	0a1b      	lsrs	r3, r3, #8
 800645c:	b29b      	uxth	r3, r3
 800645e:	b2da      	uxtb	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f943 	bl	80066f2 <USBD_CtlSendStatus>
}
 800646c:	e003      	b.n	8006476 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f860 	bl	8006536 <USBD_CtlError>
}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800648e:	b2db      	uxtb	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	2b02      	cmp	r3, #2
 8006494:	d80b      	bhi.n	80064ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	885b      	ldrh	r3, [r3, #2]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d10c      	bne.n	80064b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f923 	bl	80066f2 <USBD_CtlSendStatus>
      }
      break;
 80064ac:	e004      	b.n	80064b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f840 	bl	8006536 <USBD_CtlError>
      break;
 80064b6:	e000      	b.n	80064ba <USBD_ClrFeature+0x3c>
      break;
 80064b8:	bf00      	nop
  }
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	781a      	ldrb	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f7ff fa3d 	bl	800596c <SWAPBYTE>
 80064f2:	4603      	mov	r3, r0
 80064f4:	461a      	mov	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3301      	adds	r3, #1
 80064fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f7ff fa30 	bl	800596c <SWAPBYTE>
 800650c:	4603      	mov	r3, r0
 800650e:	461a      	mov	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3301      	adds	r3, #1
 800651e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7ff fa23 	bl	800596c <SWAPBYTE>
 8006526:	4603      	mov	r3, r0
 8006528:	461a      	mov	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	80da      	strh	r2, [r3, #6]
}
 800652e:	bf00      	nop
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006540:	2180      	movs	r1, #128	@ 0x80
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f002 fa90 	bl	8008a68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006548:	2100      	movs	r1, #0
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f002 fa8c 	bl	8008a68 <USBD_LL_StallEP>
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d042      	beq.n	80065f4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006572:	6938      	ldr	r0, [r7, #16]
 8006574:	f000 f842 	bl	80065fc <USBD_GetLen>
 8006578:	4603      	mov	r3, r0
 800657a:	3301      	adds	r3, #1
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006582:	d808      	bhi.n	8006596 <USBD_GetString+0x3e>
 8006584:	6938      	ldr	r0, [r7, #16]
 8006586:	f000 f839 	bl	80065fc <USBD_GetLen>
 800658a:	4603      	mov	r3, r0
 800658c:	3301      	adds	r3, #1
 800658e:	b29b      	uxth	r3, r3
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	e001      	b.n	800659a <USBD_GetString+0x42>
 8006596:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800659e:	7dfb      	ldrb	r3, [r7, #23]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	4413      	add	r3, r2
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	7812      	ldrb	r2, [r2, #0]
 80065a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	3301      	adds	r3, #1
 80065ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	4413      	add	r3, r2
 80065b6:	2203      	movs	r2, #3
 80065b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	3301      	adds	r3, #1
 80065be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80065c0:	e013      	b.n	80065ea <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	4413      	add	r3, r2
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	7812      	ldrb	r2, [r2, #0]
 80065cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	3301      	adds	r3, #1
 80065d2:	613b      	str	r3, [r7, #16]
    idx++;
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	3301      	adds	r3, #1
 80065d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	4413      	add	r3, r2
 80065e0:	2200      	movs	r2, #0
 80065e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	3301      	adds	r3, #1
 80065e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e7      	bne.n	80065c2 <USBD_GetString+0x6a>
 80065f2:	e000      	b.n	80065f6 <USBD_GetString+0x9e>
    return;
 80065f4:	bf00      	nop
  }
}
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800660c:	e005      	b.n	800661a <USBD_GetLen+0x1e>
  {
    len++;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	3301      	adds	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	3301      	adds	r3, #1
 8006618:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f5      	bne.n	800660e <USBD_GetLen+0x12>
  }

  return len;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2202      	movs	r2, #2
 8006640:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	2100      	movs	r1, #0
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f002 fa8c 	bl	8008b7a <USBD_LL_Transmit>

  return USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	2100      	movs	r1, #0
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f002 fa7b 	bl	8008b7a <USBD_LL_Transmit>

  return USBD_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2203      	movs	r2, #3
 800669e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	2100      	movs	r1, #0
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f002 fa7b 	bl	8008bbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	2100      	movs	r1, #0
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f002 fa6a 	bl	8008bbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2204      	movs	r2, #4
 80066fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006702:	2300      	movs	r3, #0
 8006704:	2200      	movs	r2, #0
 8006706:	2100      	movs	r1, #0
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f002 fa36 	bl	8008b7a <USBD_LL_Transmit>

  return USBD_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2205      	movs	r2, #5
 8006724:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006728:	2300      	movs	r3, #0
 800672a:	2200      	movs	r2, #0
 800672c:	2100      	movs	r1, #0
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f002 fa44 	bl	8008bbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	4603      	mov	r3, r0
 8006746:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800674c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006750:	2b84      	cmp	r3, #132	@ 0x84
 8006752:	d005      	beq.n	8006760 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006754:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	3303      	adds	r3, #3
 800675e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006760:	68fb      	ldr	r3, [r7, #12]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006772:	f000 fae5 	bl	8006d40 <vTaskStartScheduler>
  
  return osOK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	bd80      	pop	{r7, pc}

0800677c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800677c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800677e:	b089      	sub	sp, #36	@ 0x24
 8006780:	af04      	add	r7, sp, #16
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d020      	beq.n	80067d0 <osThreadCreate+0x54>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d01c      	beq.n	80067d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685c      	ldr	r4, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691e      	ldr	r6, [r3, #16]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff ffc8 	bl	800673e <makeFreeRtosPriority>
 80067ae:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067b8:	9202      	str	r2, [sp, #8]
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	9100      	str	r1, [sp, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	4632      	mov	r2, r6
 80067c2:	4629      	mov	r1, r5
 80067c4:	4620      	mov	r0, r4
 80067c6:	f000 f8ed 	bl	80069a4 <xTaskCreateStatic>
 80067ca:	4603      	mov	r3, r0
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	e01c      	b.n	800680a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685c      	ldr	r4, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067dc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff ffaa 	bl	800673e <makeFreeRtosPriority>
 80067ea:	4602      	mov	r2, r0
 80067ec:	f107 030c 	add.w	r3, r7, #12
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	9200      	str	r2, [sp, #0]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	4632      	mov	r2, r6
 80067f8:	4629      	mov	r1, r5
 80067fa:	4620      	mov	r0, r4
 80067fc:	f000 f932 	bl	8006a64 <xTaskCreate>
 8006800:	4603      	mov	r3, r0
 8006802:	2b01      	cmp	r3, #1
 8006804:	d001      	beq.n	800680a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	e000      	b.n	800680c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800680a:	68fb      	ldr	r3, [r7, #12]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006814 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <osDelay+0x16>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	e000      	b.n	800682c <osDelay+0x18>
 800682a:	2301      	movs	r3, #1
 800682c:	4618      	mov	r0, r3
 800682e:	f000 fa51 	bl	8006cd4 <vTaskDelay>
  
  return osOK;
 8006832:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f103 0208 	add.w	r2, r3, #8
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006854:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f103 0208 	add.w	r2, r3, #8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f103 0208 	add.w	r2, r3, #8
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	601a      	str	r2, [r3, #0]
}
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068de:	b480      	push	{r7}
 80068e0:	b085      	sub	sp, #20
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068f4:	d103      	bne.n	80068fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	e00c      	b.n	8006918 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3308      	adds	r3, #8
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	e002      	b.n	800690c <vListInsert+0x2e>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	d2f6      	bcs.n	8006906 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	601a      	str	r2, [r3, #0]
}
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	6892      	ldr	r2, [r2, #8]
 8006966:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6852      	ldr	r2, [r2, #4]
 8006970:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	429a      	cmp	r2, r3
 800697a:	d103      	bne.n	8006984 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	1e5a      	subs	r2, r3, #1
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08e      	sub	sp, #56	@ 0x38
 80069a8:	af04      	add	r7, sp, #16
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10b      	bne.n	80069d0 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069ca:	bf00      	nop
 80069cc:	bf00      	nop
 80069ce:	e7fd      	b.n	80069cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	61fb      	str	r3, [r7, #28]
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	e7fd      	b.n	80069ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069ee:	2354      	movs	r3, #84	@ 0x54
 80069f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b54      	cmp	r3, #84	@ 0x54
 80069f6:	d00b      	beq.n	8006a10 <xTaskCreateStatic+0x6c>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	61bb      	str	r3, [r7, #24]
}
 8006a0a:	bf00      	nop
 8006a0c:	bf00      	nop
 8006a0e:	e7fd      	b.n	8006a0c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a10:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01e      	beq.n	8006a56 <xTaskCreateStatic+0xb2>
 8006a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01b      	beq.n	8006a56 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a20:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a26:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a30:	2300      	movs	r3, #0
 8006a32:	9303      	str	r3, [sp, #12]
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	9302      	str	r3, [sp, #8]
 8006a38:	f107 0314 	add.w	r3, r7, #20
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f850 	bl	8006aee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a50:	f000 f8d6 	bl	8006c00 <prvAddNewTaskToReadyList>
 8006a54:	e001      	b.n	8006a5a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a5a:	697b      	ldr	r3, [r7, #20]
	}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3728      	adds	r7, #40	@ 0x28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08c      	sub	sp, #48	@ 0x30
 8006a68:	af04      	add	r7, sp, #16
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	4613      	mov	r3, r2
 8006a72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a74:	88fb      	ldrh	r3, [r7, #6]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 feed 	bl	8007858 <pvPortMalloc>
 8006a7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00e      	beq.n	8006aa4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a86:	2054      	movs	r0, #84	@ 0x54
 8006a88:	f000 fee6 	bl	8007858 <pvPortMalloc>
 8006a8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a9a:	e005      	b.n	8006aa8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a9c:	6978      	ldr	r0, [r7, #20]
 8006a9e:	f000 ffa9 	bl	80079f4 <vPortFree>
 8006aa2:	e001      	b.n	8006aa8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d017      	beq.n	8006ade <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	9303      	str	r3, [sp, #12]
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	9302      	str	r3, [sp, #8]
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac2:	9301      	str	r3, [sp, #4]
 8006ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f80e 	bl	8006aee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ad2:	69f8      	ldr	r0, [r7, #28]
 8006ad4:	f000 f894 	bl	8006c00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	e002      	b.n	8006ae4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ade:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ae2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
	}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3720      	adds	r7, #32
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b088      	sub	sp, #32
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
 8006afa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b06:	3b01      	subs	r3, #1
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	f023 0307 	bic.w	r3, r3, #7
 8006b14:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	617b      	str	r3, [r7, #20]
}
 8006b32:	bf00      	nop
 8006b34:	bf00      	nop
 8006b36:	e7fd      	b.n	8006b34 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d01f      	beq.n	8006b7e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61fb      	str	r3, [r7, #28]
 8006b42:	e012      	b.n	8006b6a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	4413      	add	r3, r2
 8006b4a:	7819      	ldrb	r1, [r3, #0]
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	3334      	adds	r3, #52	@ 0x34
 8006b54:	460a      	mov	r2, r1
 8006b56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d006      	beq.n	8006b72 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	3301      	adds	r3, #1
 8006b68:	61fb      	str	r3, [r7, #28]
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	2b0f      	cmp	r3, #15
 8006b6e:	d9e9      	bls.n	8006b44 <prvInitialiseNewTask+0x56>
 8006b70:	e000      	b.n	8006b74 <prvInitialiseNewTask+0x86>
			{
				break;
 8006b72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b7c:	e003      	b.n	8006b86 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b88:	2b06      	cmp	r3, #6
 8006b8a:	d901      	bls.n	8006b90 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b8c:	2306      	movs	r3, #6
 8006b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b94:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b9a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7ff fe68 	bl	800687c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	3318      	adds	r3, #24
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff fe63 	bl	800687c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbe:	f1c3 0207 	rsb	r2, r3, #7
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	2200      	movs	r2, #0
 8006bd0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	68f9      	ldr	r1, [r7, #12]
 8006bde:	69b8      	ldr	r0, [r7, #24]
 8006be0:	f000 fc2c 	bl	800743c <pxPortInitialiseStack>
 8006be4:	4602      	mov	r2, r0
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	3720      	adds	r7, #32
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c08:	f000 fd46 	bl	8007698 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8006cb8 <prvAddNewTaskToReadyList+0xb8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	4a29      	ldr	r2, [pc, #164]	@ (8006cb8 <prvAddNewTaskToReadyList+0xb8>)
 8006c14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c16:	4b29      	ldr	r3, [pc, #164]	@ (8006cbc <prvAddNewTaskToReadyList+0xbc>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d109      	bne.n	8006c32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c1e:	4a27      	ldr	r2, [pc, #156]	@ (8006cbc <prvAddNewTaskToReadyList+0xbc>)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c24:	4b24      	ldr	r3, [pc, #144]	@ (8006cb8 <prvAddNewTaskToReadyList+0xb8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d110      	bne.n	8006c4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c2c:	f000 fac4 	bl	80071b8 <prvInitialiseTaskLists>
 8006c30:	e00d      	b.n	8006c4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c32:	4b23      	ldr	r3, [pc, #140]	@ (8006cc0 <prvAddNewTaskToReadyList+0xc0>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d109      	bne.n	8006c4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c3a:	4b20      	ldr	r3, [pc, #128]	@ (8006cbc <prvAddNewTaskToReadyList+0xbc>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d802      	bhi.n	8006c4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c48:	4a1c      	ldr	r2, [pc, #112]	@ (8006cbc <prvAddNewTaskToReadyList+0xbc>)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8006cc4 <prvAddNewTaskToReadyList+0xc4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3301      	adds	r3, #1
 8006c54:	4a1b      	ldr	r2, [pc, #108]	@ (8006cc4 <prvAddNewTaskToReadyList+0xc4>)
 8006c56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	4b19      	ldr	r3, [pc, #100]	@ (8006cc8 <prvAddNewTaskToReadyList+0xc8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	4a18      	ldr	r2, [pc, #96]	@ (8006cc8 <prvAddNewTaskToReadyList+0xc8>)
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4a15      	ldr	r2, [pc, #84]	@ (8006ccc <prvAddNewTaskToReadyList+0xcc>)
 8006c78:	441a      	add	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4610      	mov	r0, r2
 8006c82:	f7ff fe08 	bl	8006896 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c86:	f000 fd39 	bl	80076fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc0 <prvAddNewTaskToReadyList+0xc0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00e      	beq.n	8006cb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c92:	4b0a      	ldr	r3, [pc, #40]	@ (8006cbc <prvAddNewTaskToReadyList+0xbc>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d207      	bcs.n	8006cb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <prvAddNewTaskToReadyList+0xd0>)
 8006ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	20000574 	.word	0x20000574
 8006cbc:	20000474 	.word	0x20000474
 8006cc0:	20000580 	.word	0x20000580
 8006cc4:	20000590 	.word	0x20000590
 8006cc8:	2000057c 	.word	0x2000057c
 8006ccc:	20000478 	.word	0x20000478
 8006cd0:	e000ed04 	.word	0xe000ed04

08006cd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d018      	beq.n	8006d18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ce6:	4b14      	ldr	r3, [pc, #80]	@ (8006d38 <vTaskDelay+0x64>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00b      	beq.n	8006d06 <vTaskDelay+0x32>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	60bb      	str	r3, [r7, #8]
}
 8006d00:	bf00      	nop
 8006d02:	bf00      	nop
 8006d04:	e7fd      	b.n	8006d02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d06:	f000 f87d 	bl	8006e04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fb2f 	bl	8007370 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d12:	f000 f885 	bl	8006e20 <xTaskResumeAll>
 8006d16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d107      	bne.n	8006d2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006d1e:	4b07      	ldr	r3, [pc, #28]	@ (8006d3c <vTaskDelay+0x68>)
 8006d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d2e:	bf00      	nop
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	2000059c 	.word	0x2000059c
 8006d3c:	e000ed04 	.word	0xe000ed04

08006d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b08a      	sub	sp, #40	@ 0x28
 8006d44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d4e:	463a      	mov	r2, r7
 8006d50:	1d39      	adds	r1, r7, #4
 8006d52:	f107 0308 	add.w	r3, r7, #8
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fa f8ce 	bl	8000ef8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	9202      	str	r2, [sp, #8]
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	2300      	movs	r3, #0
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	460a      	mov	r2, r1
 8006d6e:	491f      	ldr	r1, [pc, #124]	@ (8006dec <vTaskStartScheduler+0xac>)
 8006d70:	481f      	ldr	r0, [pc, #124]	@ (8006df0 <vTaskStartScheduler+0xb0>)
 8006d72:	f7ff fe17 	bl	80069a4 <xTaskCreateStatic>
 8006d76:	4603      	mov	r3, r0
 8006d78:	4a1e      	ldr	r2, [pc, #120]	@ (8006df4 <vTaskStartScheduler+0xb4>)
 8006d7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006df4 <vTaskStartScheduler+0xb4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d84:	2301      	movs	r3, #1
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	e001      	b.n	8006d8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d116      	bne.n	8006dc2 <vTaskStartScheduler+0x82>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	613b      	str	r3, [r7, #16]
}
 8006da6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006da8:	4b13      	ldr	r3, [pc, #76]	@ (8006df8 <vTaskStartScheduler+0xb8>)
 8006daa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006dae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006db0:	4b12      	ldr	r3, [pc, #72]	@ (8006dfc <vTaskStartScheduler+0xbc>)
 8006db2:	2201      	movs	r2, #1
 8006db4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006db6:	4b12      	ldr	r3, [pc, #72]	@ (8006e00 <vTaskStartScheduler+0xc0>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dbc:	f000 fbc8 	bl	8007550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dc0:	e00f      	b.n	8006de2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dc8:	d10b      	bne.n	8006de2 <vTaskStartScheduler+0xa2>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	60fb      	str	r3, [r7, #12]
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <vTaskStartScheduler+0x9e>
}
 8006de2:	bf00      	nop
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	0800ab34 	.word	0x0800ab34
 8006df0:	08007189 	.word	0x08007189
 8006df4:	20000598 	.word	0x20000598
 8006df8:	20000594 	.word	0x20000594
 8006dfc:	20000580 	.word	0x20000580
 8006e00:	20000578 	.word	0x20000578

08006e04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e08:	4b04      	ldr	r3, [pc, #16]	@ (8006e1c <vTaskSuspendAll+0x18>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	4a03      	ldr	r2, [pc, #12]	@ (8006e1c <vTaskSuspendAll+0x18>)
 8006e10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e12:	bf00      	nop
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	2000059c 	.word	0x2000059c

08006e20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e2e:	4b42      	ldr	r3, [pc, #264]	@ (8006f38 <xTaskResumeAll+0x118>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10b      	bne.n	8006e4e <xTaskResumeAll+0x2e>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	603b      	str	r3, [r7, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	e7fd      	b.n	8006e4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e4e:	f000 fc23 	bl	8007698 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e52:	4b39      	ldr	r3, [pc, #228]	@ (8006f38 <xTaskResumeAll+0x118>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	4a37      	ldr	r2, [pc, #220]	@ (8006f38 <xTaskResumeAll+0x118>)
 8006e5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e5c:	4b36      	ldr	r3, [pc, #216]	@ (8006f38 <xTaskResumeAll+0x118>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d161      	bne.n	8006f28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e64:	4b35      	ldr	r3, [pc, #212]	@ (8006f3c <xTaskResumeAll+0x11c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d05d      	beq.n	8006f28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e6c:	e02e      	b.n	8006ecc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e6e:	4b34      	ldr	r3, [pc, #208]	@ (8006f40 <xTaskResumeAll+0x120>)
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3318      	adds	r3, #24
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff fd68 	bl	8006950 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3304      	adds	r3, #4
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff fd63 	bl	8006950 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8e:	2201      	movs	r2, #1
 8006e90:	409a      	lsls	r2, r3
 8006e92:	4b2c      	ldr	r3, [pc, #176]	@ (8006f44 <xTaskResumeAll+0x124>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	4a2a      	ldr	r2, [pc, #168]	@ (8006f44 <xTaskResumeAll+0x124>)
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4a27      	ldr	r2, [pc, #156]	@ (8006f48 <xTaskResumeAll+0x128>)
 8006eaa:	441a      	add	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f7ff fcef 	bl	8006896 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ebc:	4b23      	ldr	r3, [pc, #140]	@ (8006f4c <xTaskResumeAll+0x12c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d302      	bcc.n	8006ecc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ec6:	4b22      	ldr	r3, [pc, #136]	@ (8006f50 <xTaskResumeAll+0x130>)
 8006ec8:	2201      	movs	r2, #1
 8006eca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8006f40 <xTaskResumeAll+0x120>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1cc      	bne.n	8006e6e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006eda:	f000 fa0b 	bl	80072f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ede:	4b1d      	ldr	r3, [pc, #116]	@ (8006f54 <xTaskResumeAll+0x134>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d010      	beq.n	8006f0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006eea:	f000 f837 	bl	8006f5c <xTaskIncrementTick>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ef4:	4b16      	ldr	r3, [pc, #88]	@ (8006f50 <xTaskResumeAll+0x130>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f1      	bne.n	8006eea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f06:	4b13      	ldr	r3, [pc, #76]	@ (8006f54 <xTaskResumeAll+0x134>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f0c:	4b10      	ldr	r3, [pc, #64]	@ (8006f50 <xTaskResumeAll+0x130>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f14:	2301      	movs	r3, #1
 8006f16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f18:	4b0f      	ldr	r3, [pc, #60]	@ (8006f58 <xTaskResumeAll+0x138>)
 8006f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f28:	f000 fbe8 	bl	80076fc <vPortExitCritical>

	return xAlreadyYielded;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	2000059c 	.word	0x2000059c
 8006f3c:	20000574 	.word	0x20000574
 8006f40:	20000534 	.word	0x20000534
 8006f44:	2000057c 	.word	0x2000057c
 8006f48:	20000478 	.word	0x20000478
 8006f4c:	20000474 	.word	0x20000474
 8006f50:	20000588 	.word	0x20000588
 8006f54:	20000584 	.word	0x20000584
 8006f58:	e000ed04 	.word	0xe000ed04

08006f5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f66:	4b4f      	ldr	r3, [pc, #316]	@ (80070a4 <xTaskIncrementTick+0x148>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 808f 	bne.w	800708e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f70:	4b4d      	ldr	r3, [pc, #308]	@ (80070a8 <xTaskIncrementTick+0x14c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3301      	adds	r3, #1
 8006f76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f78:	4a4b      	ldr	r2, [pc, #300]	@ (80070a8 <xTaskIncrementTick+0x14c>)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d121      	bne.n	8006fc8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f84:	4b49      	ldr	r3, [pc, #292]	@ (80070ac <xTaskIncrementTick+0x150>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00b      	beq.n	8006fa6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	603b      	str	r3, [r7, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	e7fd      	b.n	8006fa2 <xTaskIncrementTick+0x46>
 8006fa6:	4b41      	ldr	r3, [pc, #260]	@ (80070ac <xTaskIncrementTick+0x150>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	4b40      	ldr	r3, [pc, #256]	@ (80070b0 <xTaskIncrementTick+0x154>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a3e      	ldr	r2, [pc, #248]	@ (80070ac <xTaskIncrementTick+0x150>)
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	4a3e      	ldr	r2, [pc, #248]	@ (80070b0 <xTaskIncrementTick+0x154>)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	4b3e      	ldr	r3, [pc, #248]	@ (80070b4 <xTaskIncrementTick+0x158>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	4a3c      	ldr	r2, [pc, #240]	@ (80070b4 <xTaskIncrementTick+0x158>)
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	f000 f996 	bl	80072f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80070b8 <xTaskIncrementTick+0x15c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d348      	bcc.n	8007064 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fd2:	4b36      	ldr	r3, [pc, #216]	@ (80070ac <xTaskIncrementTick+0x150>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d104      	bne.n	8006fe6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fdc:	4b36      	ldr	r3, [pc, #216]	@ (80070b8 <xTaskIncrementTick+0x15c>)
 8006fde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fe2:	601a      	str	r2, [r3, #0]
					break;
 8006fe4:	e03e      	b.n	8007064 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe6:	4b31      	ldr	r3, [pc, #196]	@ (80070ac <xTaskIncrementTick+0x150>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d203      	bcs.n	8007006 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ffe:	4a2e      	ldr	r2, [pc, #184]	@ (80070b8 <xTaskIncrementTick+0x15c>)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007004:	e02e      	b.n	8007064 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	3304      	adds	r3, #4
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff fca0 	bl	8006950 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	3318      	adds	r3, #24
 800701c:	4618      	mov	r0, r3
 800701e:	f7ff fc97 	bl	8006950 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007026:	2201      	movs	r2, #1
 8007028:	409a      	lsls	r2, r3
 800702a:	4b24      	ldr	r3, [pc, #144]	@ (80070bc <xTaskIncrementTick+0x160>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4313      	orrs	r3, r2
 8007030:	4a22      	ldr	r2, [pc, #136]	@ (80070bc <xTaskIncrementTick+0x160>)
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4a1f      	ldr	r2, [pc, #124]	@ (80070c0 <xTaskIncrementTick+0x164>)
 8007042:	441a      	add	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f7ff fc23 	bl	8006896 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007054:	4b1b      	ldr	r3, [pc, #108]	@ (80070c4 <xTaskIncrementTick+0x168>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705a:	429a      	cmp	r2, r3
 800705c:	d3b9      	bcc.n	8006fd2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800705e:	2301      	movs	r3, #1
 8007060:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007062:	e7b6      	b.n	8006fd2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007064:	4b17      	ldr	r3, [pc, #92]	@ (80070c4 <xTaskIncrementTick+0x168>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800706a:	4915      	ldr	r1, [pc, #84]	@ (80070c0 <xTaskIncrementTick+0x164>)
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d901      	bls.n	8007080 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800707c:	2301      	movs	r3, #1
 800707e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007080:	4b11      	ldr	r3, [pc, #68]	@ (80070c8 <xTaskIncrementTick+0x16c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d007      	beq.n	8007098 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007088:	2301      	movs	r3, #1
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	e004      	b.n	8007098 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800708e:	4b0f      	ldr	r3, [pc, #60]	@ (80070cc <xTaskIncrementTick+0x170>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3301      	adds	r3, #1
 8007094:	4a0d      	ldr	r2, [pc, #52]	@ (80070cc <xTaskIncrementTick+0x170>)
 8007096:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007098:	697b      	ldr	r3, [r7, #20]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	2000059c 	.word	0x2000059c
 80070a8:	20000578 	.word	0x20000578
 80070ac:	2000052c 	.word	0x2000052c
 80070b0:	20000530 	.word	0x20000530
 80070b4:	2000058c 	.word	0x2000058c
 80070b8:	20000594 	.word	0x20000594
 80070bc:	2000057c 	.word	0x2000057c
 80070c0:	20000478 	.word	0x20000478
 80070c4:	20000474 	.word	0x20000474
 80070c8:	20000588 	.word	0x20000588
 80070cc:	20000584 	.word	0x20000584

080070d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070d6:	4b27      	ldr	r3, [pc, #156]	@ (8007174 <vTaskSwitchContext+0xa4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070de:	4b26      	ldr	r3, [pc, #152]	@ (8007178 <vTaskSwitchContext+0xa8>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070e4:	e040      	b.n	8007168 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80070e6:	4b24      	ldr	r3, [pc, #144]	@ (8007178 <vTaskSwitchContext+0xa8>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ec:	4b23      	ldr	r3, [pc, #140]	@ (800717c <vTaskSwitchContext+0xac>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	fab3 f383 	clz	r3, r3
 80070f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80070fa:	7afb      	ldrb	r3, [r7, #11]
 80070fc:	f1c3 031f 	rsb	r3, r3, #31
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	491f      	ldr	r1, [pc, #124]	@ (8007180 <vTaskSwitchContext+0xb0>)
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	4613      	mov	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	440b      	add	r3, r1
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10b      	bne.n	800712e <vTaskSwitchContext+0x5e>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	607b      	str	r3, [r7, #4]
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	e7fd      	b.n	800712a <vTaskSwitchContext+0x5a>
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4a11      	ldr	r2, [pc, #68]	@ (8007180 <vTaskSwitchContext+0xb0>)
 800713a:	4413      	add	r3, r2
 800713c:	613b      	str	r3, [r7, #16]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	605a      	str	r2, [r3, #4]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	3308      	adds	r3, #8
 8007150:	429a      	cmp	r2, r3
 8007152:	d104      	bne.n	800715e <vTaskSwitchContext+0x8e>
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	605a      	str	r2, [r3, #4]
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	4a07      	ldr	r2, [pc, #28]	@ (8007184 <vTaskSwitchContext+0xb4>)
 8007166:	6013      	str	r3, [r2, #0]
}
 8007168:	bf00      	nop
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	2000059c 	.word	0x2000059c
 8007178:	20000588 	.word	0x20000588
 800717c:	2000057c 	.word	0x2000057c
 8007180:	20000478 	.word	0x20000478
 8007184:	20000474 	.word	0x20000474

08007188 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007190:	f000 f852 	bl	8007238 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007194:	4b06      	ldr	r3, [pc, #24]	@ (80071b0 <prvIdleTask+0x28>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d9f9      	bls.n	8007190 <prvIdleTask+0x8>
			{
				taskYIELD();
 800719c:	4b05      	ldr	r3, [pc, #20]	@ (80071b4 <prvIdleTask+0x2c>)
 800719e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071ac:	e7f0      	b.n	8007190 <prvIdleTask+0x8>
 80071ae:	bf00      	nop
 80071b0:	20000478 	.word	0x20000478
 80071b4:	e000ed04 	.word	0xe000ed04

080071b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071be:	2300      	movs	r3, #0
 80071c0:	607b      	str	r3, [r7, #4]
 80071c2:	e00c      	b.n	80071de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4a12      	ldr	r2, [pc, #72]	@ (8007218 <prvInitialiseTaskLists+0x60>)
 80071d0:	4413      	add	r3, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fb32 	bl	800683c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3301      	adds	r3, #1
 80071dc:	607b      	str	r3, [r7, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b06      	cmp	r3, #6
 80071e2:	d9ef      	bls.n	80071c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071e4:	480d      	ldr	r0, [pc, #52]	@ (800721c <prvInitialiseTaskLists+0x64>)
 80071e6:	f7ff fb29 	bl	800683c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071ea:	480d      	ldr	r0, [pc, #52]	@ (8007220 <prvInitialiseTaskLists+0x68>)
 80071ec:	f7ff fb26 	bl	800683c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071f0:	480c      	ldr	r0, [pc, #48]	@ (8007224 <prvInitialiseTaskLists+0x6c>)
 80071f2:	f7ff fb23 	bl	800683c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071f6:	480c      	ldr	r0, [pc, #48]	@ (8007228 <prvInitialiseTaskLists+0x70>)
 80071f8:	f7ff fb20 	bl	800683c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071fc:	480b      	ldr	r0, [pc, #44]	@ (800722c <prvInitialiseTaskLists+0x74>)
 80071fe:	f7ff fb1d 	bl	800683c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007202:	4b0b      	ldr	r3, [pc, #44]	@ (8007230 <prvInitialiseTaskLists+0x78>)
 8007204:	4a05      	ldr	r2, [pc, #20]	@ (800721c <prvInitialiseTaskLists+0x64>)
 8007206:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007208:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <prvInitialiseTaskLists+0x7c>)
 800720a:	4a05      	ldr	r2, [pc, #20]	@ (8007220 <prvInitialiseTaskLists+0x68>)
 800720c:	601a      	str	r2, [r3, #0]
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000478 	.word	0x20000478
 800721c:	20000504 	.word	0x20000504
 8007220:	20000518 	.word	0x20000518
 8007224:	20000534 	.word	0x20000534
 8007228:	20000548 	.word	0x20000548
 800722c:	20000560 	.word	0x20000560
 8007230:	2000052c 	.word	0x2000052c
 8007234:	20000530 	.word	0x20000530

08007238 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800723e:	e019      	b.n	8007274 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007240:	f000 fa2a 	bl	8007698 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007244:	4b10      	ldr	r3, [pc, #64]	@ (8007288 <prvCheckTasksWaitingTermination+0x50>)
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3304      	adds	r3, #4
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff fb7d 	bl	8006950 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007256:	4b0d      	ldr	r3, [pc, #52]	@ (800728c <prvCheckTasksWaitingTermination+0x54>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3b01      	subs	r3, #1
 800725c:	4a0b      	ldr	r2, [pc, #44]	@ (800728c <prvCheckTasksWaitingTermination+0x54>)
 800725e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007260:	4b0b      	ldr	r3, [pc, #44]	@ (8007290 <prvCheckTasksWaitingTermination+0x58>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3b01      	subs	r3, #1
 8007266:	4a0a      	ldr	r2, [pc, #40]	@ (8007290 <prvCheckTasksWaitingTermination+0x58>)
 8007268:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800726a:	f000 fa47 	bl	80076fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f810 	bl	8007294 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007274:	4b06      	ldr	r3, [pc, #24]	@ (8007290 <prvCheckTasksWaitingTermination+0x58>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e1      	bne.n	8007240 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800727c:	bf00      	nop
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000548 	.word	0x20000548
 800728c:	20000574 	.word	0x20000574
 8007290:	2000055c 	.word	0x2000055c

08007294 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d108      	bne.n	80072b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 fba2 	bl	80079f4 <vPortFree>
				vPortFree( pxTCB );
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fb9f 	bl	80079f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072b6:	e019      	b.n	80072ec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d103      	bne.n	80072ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fb96 	bl	80079f4 <vPortFree>
	}
 80072c8:	e010      	b.n	80072ec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d00b      	beq.n	80072ec <prvDeleteTCB+0x58>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	60fb      	str	r3, [r7, #12]
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <prvDeleteTCB+0x54>
	}
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072fa:	4b0c      	ldr	r3, [pc, #48]	@ (800732c <prvResetNextTaskUnblockTime+0x38>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d104      	bne.n	800730e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007304:	4b0a      	ldr	r3, [pc, #40]	@ (8007330 <prvResetNextTaskUnblockTime+0x3c>)
 8007306:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800730a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800730c:	e008      	b.n	8007320 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800730e:	4b07      	ldr	r3, [pc, #28]	@ (800732c <prvResetNextTaskUnblockTime+0x38>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	4a04      	ldr	r2, [pc, #16]	@ (8007330 <prvResetNextTaskUnblockTime+0x3c>)
 800731e:	6013      	str	r3, [r2, #0]
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	2000052c 	.word	0x2000052c
 8007330:	20000594 	.word	0x20000594

08007334 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800733a:	4b0b      	ldr	r3, [pc, #44]	@ (8007368 <xTaskGetSchedulerState+0x34>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d102      	bne.n	8007348 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007342:	2301      	movs	r3, #1
 8007344:	607b      	str	r3, [r7, #4]
 8007346:	e008      	b.n	800735a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007348:	4b08      	ldr	r3, [pc, #32]	@ (800736c <xTaskGetSchedulerState+0x38>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007350:	2302      	movs	r3, #2
 8007352:	607b      	str	r3, [r7, #4]
 8007354:	e001      	b.n	800735a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007356:	2300      	movs	r3, #0
 8007358:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800735a:	687b      	ldr	r3, [r7, #4]
	}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	20000580 	.word	0x20000580
 800736c:	2000059c 	.word	0x2000059c

08007370 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800737a:	4b29      	ldr	r3, [pc, #164]	@ (8007420 <prvAddCurrentTaskToDelayedList+0xb0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007380:	4b28      	ldr	r3, [pc, #160]	@ (8007424 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3304      	adds	r3, #4
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff fae2 	bl	8006950 <uxListRemove>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10b      	bne.n	80073aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007392:	4b24      	ldr	r3, [pc, #144]	@ (8007424 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007398:	2201      	movs	r2, #1
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	43da      	mvns	r2, r3
 80073a0:	4b21      	ldr	r3, [pc, #132]	@ (8007428 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4013      	ands	r3, r2
 80073a6:	4a20      	ldr	r2, [pc, #128]	@ (8007428 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073b0:	d10a      	bne.n	80073c8 <prvAddCurrentTaskToDelayedList+0x58>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d007      	beq.n	80073c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3304      	adds	r3, #4
 80073be:	4619      	mov	r1, r3
 80073c0:	481a      	ldr	r0, [pc, #104]	@ (800742c <prvAddCurrentTaskToDelayedList+0xbc>)
 80073c2:	f7ff fa68 	bl	8006896 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073c6:	e026      	b.n	8007416 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4413      	add	r3, r2
 80073ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073d0:	4b14      	ldr	r3, [pc, #80]	@ (8007424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d209      	bcs.n	80073f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e0:	4b13      	ldr	r3, [pc, #76]	@ (8007430 <prvAddCurrentTaskToDelayedList+0xc0>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f7ff fa76 	bl	80068de <vListInsert>
}
 80073f2:	e010      	b.n	8007416 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007434 <prvAddCurrentTaskToDelayedList+0xc4>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3304      	adds	r3, #4
 80073fe:	4619      	mov	r1, r3
 8007400:	4610      	mov	r0, r2
 8007402:	f7ff fa6c 	bl	80068de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007406:	4b0c      	ldr	r3, [pc, #48]	@ (8007438 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	429a      	cmp	r2, r3
 800740e:	d202      	bcs.n	8007416 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007410:	4a09      	ldr	r2, [pc, #36]	@ (8007438 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6013      	str	r3, [r2, #0]
}
 8007416:	bf00      	nop
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000578 	.word	0x20000578
 8007424:	20000474 	.word	0x20000474
 8007428:	2000057c 	.word	0x2000057c
 800742c:	20000560 	.word	0x20000560
 8007430:	20000530 	.word	0x20000530
 8007434:	2000052c 	.word	0x2000052c
 8007438:	20000594 	.word	0x20000594

0800743c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3b04      	subs	r3, #4
 800744c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3b04      	subs	r3, #4
 800745a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f023 0201 	bic.w	r2, r3, #1
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3b04      	subs	r3, #4
 800746a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800746c:	4a0c      	ldr	r2, [pc, #48]	@ (80074a0 <pxPortInitialiseStack+0x64>)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3b14      	subs	r3, #20
 8007476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3b04      	subs	r3, #4
 8007482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f06f 0202 	mvn.w	r2, #2
 800748a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3b20      	subs	r3, #32
 8007490:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007492:	68fb      	ldr	r3, [r7, #12]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	080074a5 	.word	0x080074a5

080074a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074ae:	4b13      	ldr	r3, [pc, #76]	@ (80074fc <prvTaskExitError+0x58>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074b6:	d00b      	beq.n	80074d0 <prvTaskExitError+0x2c>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	60fb      	str	r3, [r7, #12]
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	e7fd      	b.n	80074cc <prvTaskExitError+0x28>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	60bb      	str	r3, [r7, #8]
}
 80074e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074e4:	bf00      	nop
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0fc      	beq.n	80074e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	2000000c 	.word	0x2000000c

08007500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007500:	4b07      	ldr	r3, [pc, #28]	@ (8007520 <pxCurrentTCBConst2>)
 8007502:	6819      	ldr	r1, [r3, #0]
 8007504:	6808      	ldr	r0, [r1, #0]
 8007506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	f380 8809 	msr	PSP, r0
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f04f 0000 	mov.w	r0, #0
 8007516:	f380 8811 	msr	BASEPRI, r0
 800751a:	4770      	bx	lr
 800751c:	f3af 8000 	nop.w

08007520 <pxCurrentTCBConst2>:
 8007520:	20000474 	.word	0x20000474
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop

08007528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007528:	4808      	ldr	r0, [pc, #32]	@ (800754c <prvPortStartFirstTask+0x24>)
 800752a:	6800      	ldr	r0, [r0, #0]
 800752c:	6800      	ldr	r0, [r0, #0]
 800752e:	f380 8808 	msr	MSP, r0
 8007532:	f04f 0000 	mov.w	r0, #0
 8007536:	f380 8814 	msr	CONTROL, r0
 800753a:	b662      	cpsie	i
 800753c:	b661      	cpsie	f
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	df00      	svc	0
 8007548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800754a:	bf00      	nop
 800754c:	e000ed08 	.word	0xe000ed08

08007550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007556:	4b47      	ldr	r3, [pc, #284]	@ (8007674 <xPortStartScheduler+0x124>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a47      	ldr	r2, [pc, #284]	@ (8007678 <xPortStartScheduler+0x128>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d10b      	bne.n	8007578 <xPortStartScheduler+0x28>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	60fb      	str	r3, [r7, #12]
}
 8007572:	bf00      	nop
 8007574:	bf00      	nop
 8007576:	e7fd      	b.n	8007574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007578:	4b3e      	ldr	r3, [pc, #248]	@ (8007674 <xPortStartScheduler+0x124>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a3f      	ldr	r2, [pc, #252]	@ (800767c <xPortStartScheduler+0x12c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d10b      	bne.n	800759a <xPortStartScheduler+0x4a>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	613b      	str	r3, [r7, #16]
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop
 8007598:	e7fd      	b.n	8007596 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800759a:	4b39      	ldr	r3, [pc, #228]	@ (8007680 <xPortStartScheduler+0x130>)
 800759c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	22ff      	movs	r2, #255	@ 0xff
 80075aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	4b31      	ldr	r3, [pc, #196]	@ (8007684 <xPortStartScheduler+0x134>)
 80075c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075c2:	4b31      	ldr	r3, [pc, #196]	@ (8007688 <xPortStartScheduler+0x138>)
 80075c4:	2207      	movs	r2, #7
 80075c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075c8:	e009      	b.n	80075de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80075ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007688 <xPortStartScheduler+0x138>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007688 <xPortStartScheduler+0x138>)
 80075d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075d4:	78fb      	ldrb	r3, [r7, #3]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e6:	2b80      	cmp	r3, #128	@ 0x80
 80075e8:	d0ef      	beq.n	80075ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075ea:	4b27      	ldr	r3, [pc, #156]	@ (8007688 <xPortStartScheduler+0x138>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f1c3 0307 	rsb	r3, r3, #7
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d00b      	beq.n	800760e <xPortStartScheduler+0xbe>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	60bb      	str	r3, [r7, #8]
}
 8007608:	bf00      	nop
 800760a:	bf00      	nop
 800760c:	e7fd      	b.n	800760a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800760e:	4b1e      	ldr	r3, [pc, #120]	@ (8007688 <xPortStartScheduler+0x138>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	4a1c      	ldr	r2, [pc, #112]	@ (8007688 <xPortStartScheduler+0x138>)
 8007616:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007618:	4b1b      	ldr	r3, [pc, #108]	@ (8007688 <xPortStartScheduler+0x138>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007620:	4a19      	ldr	r2, [pc, #100]	@ (8007688 <xPortStartScheduler+0x138>)
 8007622:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	b2da      	uxtb	r2, r3
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800762c:	4b17      	ldr	r3, [pc, #92]	@ (800768c <xPortStartScheduler+0x13c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a16      	ldr	r2, [pc, #88]	@ (800768c <xPortStartScheduler+0x13c>)
 8007632:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007636:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007638:	4b14      	ldr	r3, [pc, #80]	@ (800768c <xPortStartScheduler+0x13c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a13      	ldr	r2, [pc, #76]	@ (800768c <xPortStartScheduler+0x13c>)
 800763e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007642:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007644:	f000 f8da 	bl	80077fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007648:	4b11      	ldr	r3, [pc, #68]	@ (8007690 <xPortStartScheduler+0x140>)
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800764e:	f000 f8f9 	bl	8007844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007652:	4b10      	ldr	r3, [pc, #64]	@ (8007694 <xPortStartScheduler+0x144>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a0f      	ldr	r2, [pc, #60]	@ (8007694 <xPortStartScheduler+0x144>)
 8007658:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800765c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800765e:	f7ff ff63 	bl	8007528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007662:	f7ff fd35 	bl	80070d0 <vTaskSwitchContext>
	prvTaskExitError();
 8007666:	f7ff ff1d 	bl	80074a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	e000ed00 	.word	0xe000ed00
 8007678:	410fc271 	.word	0x410fc271
 800767c:	410fc270 	.word	0x410fc270
 8007680:	e000e400 	.word	0xe000e400
 8007684:	200005a0 	.word	0x200005a0
 8007688:	200005a4 	.word	0x200005a4
 800768c:	e000ed20 	.word	0xe000ed20
 8007690:	2000000c 	.word	0x2000000c
 8007694:	e000ef34 	.word	0xe000ef34

08007698 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	607b      	str	r3, [r7, #4]
}
 80076b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076b2:	4b10      	ldr	r3, [pc, #64]	@ (80076f4 <vPortEnterCritical+0x5c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3301      	adds	r3, #1
 80076b8:	4a0e      	ldr	r2, [pc, #56]	@ (80076f4 <vPortEnterCritical+0x5c>)
 80076ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076bc:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <vPortEnterCritical+0x5c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d110      	bne.n	80076e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076c4:	4b0c      	ldr	r3, [pc, #48]	@ (80076f8 <vPortEnterCritical+0x60>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	603b      	str	r3, [r7, #0]
}
 80076e0:	bf00      	nop
 80076e2:	bf00      	nop
 80076e4:	e7fd      	b.n	80076e2 <vPortEnterCritical+0x4a>
	}
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	2000000c 	.word	0x2000000c
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007702:	4b12      	ldr	r3, [pc, #72]	@ (800774c <vPortExitCritical+0x50>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10b      	bne.n	8007722 <vPortExitCritical+0x26>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	607b      	str	r3, [r7, #4]
}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	e7fd      	b.n	800771e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007722:	4b0a      	ldr	r3, [pc, #40]	@ (800774c <vPortExitCritical+0x50>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3b01      	subs	r3, #1
 8007728:	4a08      	ldr	r2, [pc, #32]	@ (800774c <vPortExitCritical+0x50>)
 800772a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800772c:	4b07      	ldr	r3, [pc, #28]	@ (800774c <vPortExitCritical+0x50>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d105      	bne.n	8007740 <vPortExitCritical+0x44>
 8007734:	2300      	movs	r3, #0
 8007736:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800773e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	2000000c 	.word	0x2000000c

08007750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007750:	f3ef 8009 	mrs	r0, PSP
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	4b15      	ldr	r3, [pc, #84]	@ (80077b0 <pxCurrentTCBConst>)
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	f01e 0f10 	tst.w	lr, #16
 8007760:	bf08      	it	eq
 8007762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776a:	6010      	str	r0, [r2, #0]
 800776c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007770:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007774:	f380 8811 	msr	BASEPRI, r0
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f7ff fca6 	bl	80070d0 <vTaskSwitchContext>
 8007784:	f04f 0000 	mov.w	r0, #0
 8007788:	f380 8811 	msr	BASEPRI, r0
 800778c:	bc09      	pop	{r0, r3}
 800778e:	6819      	ldr	r1, [r3, #0]
 8007790:	6808      	ldr	r0, [r1, #0]
 8007792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007796:	f01e 0f10 	tst.w	lr, #16
 800779a:	bf08      	it	eq
 800779c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077a0:	f380 8809 	msr	PSP, r0
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	f3af 8000 	nop.w

080077b0 <pxCurrentTCBConst>:
 80077b0:	20000474 	.word	0x20000474
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop

080077b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	607b      	str	r3, [r7, #4]
}
 80077d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077d2:	f7ff fbc3 	bl	8006f5c <xTaskIncrementTick>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077dc:	4b06      	ldr	r3, [pc, #24]	@ (80077f8 <xPortSysTickHandler+0x40>)
 80077de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	2300      	movs	r3, #0
 80077e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	f383 8811 	msr	BASEPRI, r3
}
 80077ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007800:	4b0b      	ldr	r3, [pc, #44]	@ (8007830 <vPortSetupTimerInterrupt+0x34>)
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007806:	4b0b      	ldr	r3, [pc, #44]	@ (8007834 <vPortSetupTimerInterrupt+0x38>)
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800780c:	4b0a      	ldr	r3, [pc, #40]	@ (8007838 <vPortSetupTimerInterrupt+0x3c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a0a      	ldr	r2, [pc, #40]	@ (800783c <vPortSetupTimerInterrupt+0x40>)
 8007812:	fba2 2303 	umull	r2, r3, r2, r3
 8007816:	099b      	lsrs	r3, r3, #6
 8007818:	4a09      	ldr	r2, [pc, #36]	@ (8007840 <vPortSetupTimerInterrupt+0x44>)
 800781a:	3b01      	subs	r3, #1
 800781c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800781e:	4b04      	ldr	r3, [pc, #16]	@ (8007830 <vPortSetupTimerInterrupt+0x34>)
 8007820:	2207      	movs	r2, #7
 8007822:	601a      	str	r2, [r3, #0]
}
 8007824:	bf00      	nop
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	e000e010 	.word	0xe000e010
 8007834:	e000e018 	.word	0xe000e018
 8007838:	20000000 	.word	0x20000000
 800783c:	10624dd3 	.word	0x10624dd3
 8007840:	e000e014 	.word	0xe000e014

08007844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007844:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007854 <vPortEnableVFP+0x10>
 8007848:	6801      	ldr	r1, [r0, #0]
 800784a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800784e:	6001      	str	r1, [r0, #0]
 8007850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007852:	bf00      	nop
 8007854:	e000ed88 	.word	0xe000ed88

08007858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08a      	sub	sp, #40	@ 0x28
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007860:	2300      	movs	r3, #0
 8007862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007864:	f7ff face 	bl	8006e04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007868:	4b5c      	ldr	r3, [pc, #368]	@ (80079dc <pvPortMalloc+0x184>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007870:	f000 f924 	bl	8007abc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007874:	4b5a      	ldr	r3, [pc, #360]	@ (80079e0 <pvPortMalloc+0x188>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4013      	ands	r3, r2
 800787c:	2b00      	cmp	r3, #0
 800787e:	f040 8095 	bne.w	80079ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01e      	beq.n	80078c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007888:	2208      	movs	r2, #8
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4413      	add	r3, r2
 800788e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	2b00      	cmp	r3, #0
 8007898:	d015      	beq.n	80078c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f023 0307 	bic.w	r3, r3, #7
 80078a0:	3308      	adds	r3, #8
 80078a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00b      	beq.n	80078c6 <pvPortMalloc+0x6e>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	617b      	str	r3, [r7, #20]
}
 80078c0:	bf00      	nop
 80078c2:	bf00      	nop
 80078c4:	e7fd      	b.n	80078c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d06f      	beq.n	80079ac <pvPortMalloc+0x154>
 80078cc:	4b45      	ldr	r3, [pc, #276]	@ (80079e4 <pvPortMalloc+0x18c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d86a      	bhi.n	80079ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078d6:	4b44      	ldr	r3, [pc, #272]	@ (80079e8 <pvPortMalloc+0x190>)
 80078d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078da:	4b43      	ldr	r3, [pc, #268]	@ (80079e8 <pvPortMalloc+0x190>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078e0:	e004      	b.n	80078ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80078e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d903      	bls.n	80078fe <pvPortMalloc+0xa6>
 80078f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1f1      	bne.n	80078e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078fe:	4b37      	ldr	r3, [pc, #220]	@ (80079dc <pvPortMalloc+0x184>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007904:	429a      	cmp	r2, r3
 8007906:	d051      	beq.n	80079ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2208      	movs	r2, #8
 800790e:	4413      	add	r3, r2
 8007910:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	1ad2      	subs	r2, r2, r3
 8007922:	2308      	movs	r3, #8
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	429a      	cmp	r2, r3
 8007928:	d920      	bls.n	800796c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800792a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4413      	add	r3, r2
 8007930:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	f003 0307 	and.w	r3, r3, #7
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <pvPortMalloc+0xfc>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	613b      	str	r3, [r7, #16]
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	e7fd      	b.n	8007950 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	1ad2      	subs	r2, r2, r3
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007966:	69b8      	ldr	r0, [r7, #24]
 8007968:	f000 f90a 	bl	8007b80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800796c:	4b1d      	ldr	r3, [pc, #116]	@ (80079e4 <pvPortMalloc+0x18c>)
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	4a1b      	ldr	r2, [pc, #108]	@ (80079e4 <pvPortMalloc+0x18c>)
 8007978:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800797a:	4b1a      	ldr	r3, [pc, #104]	@ (80079e4 <pvPortMalloc+0x18c>)
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	4b1b      	ldr	r3, [pc, #108]	@ (80079ec <pvPortMalloc+0x194>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	429a      	cmp	r2, r3
 8007984:	d203      	bcs.n	800798e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007986:	4b17      	ldr	r3, [pc, #92]	@ (80079e4 <pvPortMalloc+0x18c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a18      	ldr	r2, [pc, #96]	@ (80079ec <pvPortMalloc+0x194>)
 800798c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	4b13      	ldr	r3, [pc, #76]	@ (80079e0 <pvPortMalloc+0x188>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	431a      	orrs	r2, r3
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	2200      	movs	r2, #0
 80079a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079a2:	4b13      	ldr	r3, [pc, #76]	@ (80079f0 <pvPortMalloc+0x198>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3301      	adds	r3, #1
 80079a8:	4a11      	ldr	r2, [pc, #68]	@ (80079f0 <pvPortMalloc+0x198>)
 80079aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079ac:	f7ff fa38 	bl	8006e20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	f003 0307 	and.w	r3, r3, #7
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00b      	beq.n	80079d2 <pvPortMalloc+0x17a>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	60fb      	str	r3, [r7, #12]
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	e7fd      	b.n	80079ce <pvPortMalloc+0x176>
	return pvReturn;
 80079d2:	69fb      	ldr	r3, [r7, #28]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3728      	adds	r7, #40	@ 0x28
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	200041b0 	.word	0x200041b0
 80079e0:	200041c4 	.word	0x200041c4
 80079e4:	200041b4 	.word	0x200041b4
 80079e8:	200041a8 	.word	0x200041a8
 80079ec:	200041b8 	.word	0x200041b8
 80079f0:	200041bc 	.word	0x200041bc

080079f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d04f      	beq.n	8007aa6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a06:	2308      	movs	r3, #8
 8007a08:	425b      	negs	r3, r3
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	4b25      	ldr	r3, [pc, #148]	@ (8007ab0 <vPortFree+0xbc>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10b      	bne.n	8007a3a <vPortFree+0x46>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	60fb      	str	r3, [r7, #12]
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	e7fd      	b.n	8007a36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00b      	beq.n	8007a5a <vPortFree+0x66>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	60bb      	str	r3, [r7, #8]
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	e7fd      	b.n	8007a56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	4b14      	ldr	r3, [pc, #80]	@ (8007ab0 <vPortFree+0xbc>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4013      	ands	r3, r2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01e      	beq.n	8007aa6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d11a      	bne.n	8007aa6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab0 <vPortFree+0xbc>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	43db      	mvns	r3, r3
 8007a7a:	401a      	ands	r2, r3
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a80:	f7ff f9c0 	bl	8006e04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab4 <vPortFree+0xc0>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	4a09      	ldr	r2, [pc, #36]	@ (8007ab4 <vPortFree+0xc0>)
 8007a90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a92:	6938      	ldr	r0, [r7, #16]
 8007a94:	f000 f874 	bl	8007b80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a98:	4b07      	ldr	r3, [pc, #28]	@ (8007ab8 <vPortFree+0xc4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	4a06      	ldr	r2, [pc, #24]	@ (8007ab8 <vPortFree+0xc4>)
 8007aa0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aa2:	f7ff f9bd 	bl	8006e20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007aa6:	bf00      	nop
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	200041c4 	.word	0x200041c4
 8007ab4:	200041b4 	.word	0x200041b4
 8007ab8:	200041c0 	.word	0x200041c0

08007abc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ac2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007ac6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ac8:	4b27      	ldr	r3, [pc, #156]	@ (8007b68 <prvHeapInit+0xac>)
 8007aca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00c      	beq.n	8007af0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3307      	adds	r3, #7
 8007ada:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0307 	bic.w	r3, r3, #7
 8007ae2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	4a1f      	ldr	r2, [pc, #124]	@ (8007b68 <prvHeapInit+0xac>)
 8007aec:	4413      	add	r3, r2
 8007aee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007af4:	4a1d      	ldr	r2, [pc, #116]	@ (8007b6c <prvHeapInit+0xb0>)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007afa:	4b1c      	ldr	r3, [pc, #112]	@ (8007b6c <prvHeapInit+0xb0>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	4413      	add	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b08:	2208      	movs	r2, #8
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	1a9b      	subs	r3, r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0307 	bic.w	r3, r3, #7
 8007b16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4a15      	ldr	r2, [pc, #84]	@ (8007b70 <prvHeapInit+0xb4>)
 8007b1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b1e:	4b14      	ldr	r3, [pc, #80]	@ (8007b70 <prvHeapInit+0xb4>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b26:	4b12      	ldr	r3, [pc, #72]	@ (8007b70 <prvHeapInit+0xb4>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	1ad2      	subs	r2, r2, r3
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b70 <prvHeapInit+0xb4>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	4a0a      	ldr	r2, [pc, #40]	@ (8007b74 <prvHeapInit+0xb8>)
 8007b4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	4a09      	ldr	r2, [pc, #36]	@ (8007b78 <prvHeapInit+0xbc>)
 8007b52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b54:	4b09      	ldr	r3, [pc, #36]	@ (8007b7c <prvHeapInit+0xc0>)
 8007b56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b5a:	601a      	str	r2, [r3, #0]
}
 8007b5c:	bf00      	nop
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	200005a8 	.word	0x200005a8
 8007b6c:	200041a8 	.word	0x200041a8
 8007b70:	200041b0 	.word	0x200041b0
 8007b74:	200041b8 	.word	0x200041b8
 8007b78:	200041b4 	.word	0x200041b4
 8007b7c:	200041c4 	.word	0x200041c4

08007b80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b88:	4b28      	ldr	r3, [pc, #160]	@ (8007c2c <prvInsertBlockIntoFreeList+0xac>)
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	e002      	b.n	8007b94 <prvInsertBlockIntoFreeList+0x14>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d8f7      	bhi.n	8007b8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	4413      	add	r3, r2
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d108      	bne.n	8007bc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	441a      	add	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	441a      	add	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d118      	bne.n	8007c08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b15      	ldr	r3, [pc, #84]	@ (8007c30 <prvInsertBlockIntoFreeList+0xb0>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d00d      	beq.n	8007bfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	441a      	add	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e008      	b.n	8007c10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8007c30 <prvInsertBlockIntoFreeList+0xb0>)
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	e003      	b.n	8007c10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d002      	beq.n	8007c1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c1e:	bf00      	nop
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	200041a8 	.word	0x200041a8
 8007c30:	200041b0 	.word	0x200041b0

08007c34 <MX_USB_DEVICE_Init>:
#include "usbd_custom_bulk_if.h"

USBD_HandleTypeDef hUsbDeviceFS;

void MX_USB_DEVICE_Init(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4912      	ldr	r1, [pc, #72]	@ (8007c84 <MX_USB_DEVICE_Init+0x50>)
 8007c3c:	4812      	ldr	r0, [pc, #72]	@ (8007c88 <MX_USB_DEVICE_Init+0x54>)
 8007c3e:	f7fd fa5f 	bl	8005100 <USBD_Init>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c48:	f7f9 fbdc 	bl	8001404 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_BULK) != USBD_OK)
 8007c4c:	490f      	ldr	r1, [pc, #60]	@ (8007c8c <MX_USB_DEVICE_Init+0x58>)
 8007c4e:	480e      	ldr	r0, [pc, #56]	@ (8007c88 <MX_USB_DEVICE_Init+0x54>)
 8007c50:	f7fd fa86 	bl	8005160 <USBD_RegisterClass>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c5a:	f7f9 fbd3 	bl	8001404 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomBULK_fops_FS) != USBD_OK)
 8007c5e:	490c      	ldr	r1, [pc, #48]	@ (8007c90 <MX_USB_DEVICE_Init+0x5c>)
 8007c60:	4809      	ldr	r0, [pc, #36]	@ (8007c88 <MX_USB_DEVICE_Init+0x54>)
 8007c62:	f7fd fa33 	bl	80050cc <USBD_CUSTOM_HID_RegisterInterface>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c6c:	f7f9 fbca 	bl	8001404 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c70:	4805      	ldr	r0, [pc, #20]	@ (8007c88 <MX_USB_DEVICE_Init+0x54>)
 8007c72:	f7fd faab 	bl	80051cc <USBD_Start>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c7c:	f7f9 fbc2 	bl	8001404 <Error_Handler>
  }

}
 8007c80:	bf00      	nop
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	20000140 	.word	0x20000140
 8007c88:	200041c8 	.word	0x200041c8
 8007c8c:	20000010 	.word	0x20000010
 8007c90:	20000130 	.word	0x20000130

08007c94 <USBD_CUSTOM_BULK_SendData>:
static uint8_t *USBD_CUSTOM_BULK_GetDeviceQualifierDesc(uint16_t *length);
#endif /* USE_USBD_COMPOSITE  */


USBD_StatusTypeDef USBD_CUSTOM_BULK_SendData(USBD_HandleTypeDef *pdev, uint8_t* Buf, uint16_t Len)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	80fb      	strh	r3, [r7, #6]
    // Check if the USB device is configured and ready
    if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d001      	beq.n	8007cb2 <USBD_CUSTOM_BULK_SendData+0x1e>
    {
        return USBD_FAIL;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e006      	b.n	8007cc0 <USBD_CUSTOM_BULK_SendData+0x2c>
    }

    // Transmit data to host using Bulk IN endpoint
    return USBD_LL_Transmit(pdev, CUSTOM_BULK_EPIN_ADDR, Buf, Len);
 8007cb2:	88fb      	ldrh	r3, [r7, #6]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	2181      	movs	r1, #129	@ 0x81
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 ff5e 	bl	8008b7a <USBD_LL_Transmit>
 8007cbe:	4603      	mov	r3, r0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_CUSTOM_BULK_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_BULK_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_BULK_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_BULK_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_BULK_HandleTypeDef));
 8007cd4:	2054      	movs	r0, #84	@ 0x54
 8007cd6:	f000 ff93 	bl	8008c00 <USBD_static_malloc>
 8007cda:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d109      	bne.n	8007cf6 <USBD_CUSTOM_BULK_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	32b0      	adds	r2, #176	@ 0xb0
 8007cec:	2100      	movs	r1, #0
 8007cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e08b      	b.n	8007e0e <USBD_CUSTOM_BULK_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	32b0      	adds	r2, #176	@ 0xb0
 8007d00:	68f9      	ldr	r1, [r7, #12]
 8007d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	32b0      	adds	r2, #176	@ 0xb0
 8007d10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7c1b      	ldrb	r3, [r3, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d11b      	bne.n	8007d5a <USBD_CUSTOM_BULK_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_BULK_HS_BINTERVAL;
 8007d22:	4b3d      	ldr	r3, [pc, #244]	@ (8007e18 <USBD_CUSTOM_BULK_Init+0x150>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	f003 020f 	and.w	r2, r3, #15
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	440b      	add	r3, r1
 8007d36:	331c      	adds	r3, #28
 8007d38:	2205      	movs	r2, #5
 8007d3a:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_BULK_HS_BINTERVAL;
 8007d3c:	4b37      	ldr	r3, [pc, #220]	@ (8007e1c <USBD_CUSTOM_BULK_Init+0x154>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	f003 020f 	and.w	r2, r3, #15
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8007d54:	2205      	movs	r2, #5
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	e01a      	b.n	8007d90 <USBD_CUSTOM_BULK_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_BULK_FS_BINTERVAL;
 8007d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e18 <USBD_CUSTOM_BULK_Init+0x150>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	f003 020f 	and.w	r2, r3, #15
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	331c      	adds	r3, #28
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_BULK_FS_BINTERVAL;
 8007d74:	4b29      	ldr	r3, [pc, #164]	@ (8007e1c <USBD_CUSTOM_BULK_Init+0x154>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	f003 020f 	and.w	r2, r3, #15
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_BULK, CUSTOM_BULK_EPIN_SIZE);
 8007d90:	4b21      	ldr	r3, [pc, #132]	@ (8007e18 <USBD_CUSTOM_BULK_Init+0x150>)
 8007d92:	7819      	ldrb	r1, [r3, #0]
 8007d94:	2340      	movs	r3, #64	@ 0x40
 8007d96:	2202      	movs	r2, #2
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fe20 	bl	80089de <USBD_LL_OpenEP>

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8007d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007e18 <USBD_CUSTOM_BULK_Init+0x150>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	f003 020f 	and.w	r2, r3, #15
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	4613      	mov	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	440b      	add	r3, r1
 8007db2:	3323      	adds	r3, #35	@ 0x23
 8007db4:	2201      	movs	r2, #1
 8007db6:	701a      	strb	r2, [r3, #0]
  {
    return (uint8_t)USBD_FAIL;
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_BULK, CUSTOM_BULK_EPOUT_SIZE);
 8007db8:	4b18      	ldr	r3, [pc, #96]	@ (8007e1c <USBD_CUSTOM_BULK_Init+0x154>)
 8007dba:	7819      	ldrb	r1, [r3, #0]
 8007dbc:	2340      	movs	r3, #64	@ 0x40
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fe0c 	bl	80089de <USBD_LL_OpenEP>

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8007dc6:	4b15      	ldr	r3, [pc, #84]	@ (8007e1c <USBD_CUSTOM_BULK_Init+0x154>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	f003 020f 	and.w	r2, r3, #15
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	440b      	add	r3, r1
 8007dda:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007dde:	2201      	movs	r2, #1
 8007de0:	701a      	strb	r2, [r3, #0]

  hhid->state = CUSTOM_BULK_IDLE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_BULK_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	33b0      	adds	r3, #176	@ 0xb0
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8007dfe:	4b07      	ldr	r3, [pc, #28]	@ (8007e1c <USBD_CUSTOM_BULK_Init+0x154>)
 8007e00:	7819      	ldrb	r1, [r3, #0]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	2340      	movs	r3, #64	@ 0x40
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fed8 	bl	8008bbc <USBD_LL_PrepareReceive>
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	2000008a 	.word	0x2000008a
 8007e1c:	2000008b 	.word	0x2000008b

08007e20 <USBD_CUSTOM_BULK_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_BULK_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_BULK EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8007e2c:	4b37      	ldr	r3, [pc, #220]	@ (8007f0c <USBD_CUSTOM_BULK_DeInit+0xec>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fdf9 	bl	8008a2a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8007e38:	4b34      	ldr	r3, [pc, #208]	@ (8007f0c <USBD_CUSTOM_BULK_DeInit+0xec>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	f003 020f 	and.w	r2, r3, #15
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	440b      	add	r3, r1
 8007e4c:	3323      	adds	r3, #35	@ 0x23
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8007e52:	4b2e      	ldr	r3, [pc, #184]	@ (8007f0c <USBD_CUSTOM_BULK_DeInit+0xec>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	f003 020f 	and.w	r2, r3, #15
 8007e5a:	6879      	ldr	r1, [r7, #4]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	331c      	adds	r3, #28
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_BULK EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8007e6c:	4b28      	ldr	r3, [pc, #160]	@ (8007f10 <USBD_CUSTOM_BULK_DeInit+0xf0>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fdd9 	bl	8008a2a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8007e78:	4b25      	ldr	r3, [pc, #148]	@ (8007f10 <USBD_CUSTOM_BULK_DeInit+0xf0>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	f003 020f 	and.w	r2, r3, #15
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007e90:	2200      	movs	r2, #0
 8007e92:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8007e94:	4b1e      	ldr	r3, [pc, #120]	@ (8007f10 <USBD_CUSTOM_BULK_DeInit+0xf0>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	f003 020f 	and.w	r2, r3, #15
 8007e9c:	6879      	ldr	r1, [r7, #4]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	440b      	add	r3, r1
 8007ea8:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	32b0      	adds	r2, #176	@ 0xb0
 8007eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d01f      	beq.n	8007f02 <USBD_CUSTOM_BULK_DeInit+0xe2>
  {
    ((USBD_CUSTOM_BULK_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	33b0      	adds	r3, #176	@ 0xb0
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	32b0      	adds	r2, #176	@ 0xb0
 8007ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 fe99 	bl	8008c1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	32b0      	adds	r2, #176	@ 0xb0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	2000008a 	.word	0x2000008a
 8007f10:	2000008b 	.word	0x2000008b

08007f14 <USBD_CUSTOM_BULK_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_BULK_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_BULK_HandleTypeDef *hhid = (USBD_CUSTOM_BULK_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	32b0      	adds	r2, #176	@ 0xb0
 8007f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <USBD_CUSTOM_BULK_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e108      	b.n	800815a <USBD_CUSTOM_BULK_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d05c      	beq.n	800800e <USBD_CUSTOM_BULK_Setup+0xfa>
 8007f54:	2b20      	cmp	r3, #32
 8007f56:	f040 80f8 	bne.w	800814a <USBD_CUSTOM_BULK_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	785b      	ldrb	r3, [r3, #1]
 8007f5e:	3b02      	subs	r3, #2
 8007f60:	2b09      	cmp	r3, #9
 8007f62:	d84c      	bhi.n	8007ffe <USBD_CUSTOM_BULK_Setup+0xea>
 8007f64:	a201      	add	r2, pc, #4	@ (adr r2, 8007f6c <USBD_CUSTOM_BULK_Setup+0x58>)
 8007f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6a:	bf00      	nop
 8007f6c:	08007fc5 	.word	0x08007fc5
 8007f70:	08007fa3 	.word	0x08007fa3
 8007f74:	08007fff 	.word	0x08007fff
 8007f78:	08007fff 	.word	0x08007fff
 8007f7c:	08007fff 	.word	0x08007fff
 8007f80:	08007fff 	.word	0x08007fff
 8007f84:	08007fff 	.word	0x08007fff
 8007f88:	08007fd5 	.word	0x08007fd5
 8007f8c:	08007fb3 	.word	0x08007fb3
 8007f90:	08007f95 	.word	0x08007f95
      {
        case CUSTOM_BULK_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	885b      	ldrh	r3, [r3, #2]
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8007fa0:	e034      	b.n	800800c <USBD_CUSTOM_BULK_Setup+0xf8>

        case CUSTOM_BULK_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	3340      	adds	r3, #64	@ 0x40
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7fe fb40 	bl	8006630 <USBD_CtlSendData>
          break;
 8007fb0:	e02c      	b.n	800800c <USBD_CUSTOM_BULK_Setup+0xf8>

        case CUSTOM_BULK_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	885b      	ldrh	r3, [r3, #2]
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8007fc2:	e023      	b.n	800800c <USBD_CUSTOM_BULK_Setup+0xf8>

        case CUSTOM_BULK_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	3344      	adds	r3, #68	@ 0x44
 8007fc8:	2201      	movs	r2, #1
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7fe fb2f 	bl	8006630 <USBD_CtlSendData>
          break;
 8007fd2:	e01b      	b.n	800800c <USBD_CUSTOM_BULK_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	88db      	ldrh	r3, [r3, #6]
 8007fd8:	2b40      	cmp	r3, #64	@ 0x40
 8007fda:	d905      	bls.n	8007fe8 <USBD_CUSTOM_BULK_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7fe faa9 	bl	8006536 <USBD_CtlError>
            return USBD_FAIL;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e0b8      	b.n	800815a <USBD_CUSTOM_BULK_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2201      	movs	r2, #1
 8007fec:	64da      	str	r2, [r3, #76]	@ 0x4c

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8007fee:	6939      	ldr	r1, [r7, #16]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	88db      	ldrh	r3, [r3, #6]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7fe fb49 	bl	800668e <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8007ffc:	e006      	b.n	800800c <USBD_CUSTOM_BULK_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7fe fa98 	bl	8006536 <USBD_CtlError>
          ret = USBD_FAIL;
 8008006:	2303      	movs	r3, #3
 8008008:	75fb      	strb	r3, [r7, #23]
          break;
 800800a:	bf00      	nop
      }
      break;
 800800c:	e0a4      	b.n	8008158 <USBD_CUSTOM_BULK_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	785b      	ldrb	r3, [r3, #1]
 8008012:	2b0b      	cmp	r3, #11
 8008014:	f200 8090 	bhi.w	8008138 <USBD_CUSTOM_BULK_Setup+0x224>
 8008018:	a201      	add	r2, pc, #4	@ (adr r2, 8008020 <USBD_CUSTOM_BULK_Setup+0x10c>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008051 	.word	0x08008051
 8008024:	08008147 	.word	0x08008147
 8008028:	08008139 	.word	0x08008139
 800802c:	08008139 	.word	0x08008139
 8008030:	08008139 	.word	0x08008139
 8008034:	08008139 	.word	0x08008139
 8008038:	0800807b 	.word	0x0800807b
 800803c:	08008139 	.word	0x08008139
 8008040:	08008139 	.word	0x08008139
 8008044:	08008139 	.word	0x08008139
 8008048:	080080e7 	.word	0x080080e7
 800804c:	08008111 	.word	0x08008111
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b03      	cmp	r3, #3
 800805a:	d107      	bne.n	800806c <USBD_CUSTOM_BULK_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800805c:	f107 030e 	add.w	r3, r7, #14
 8008060:	2202      	movs	r2, #2
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7fe fae3 	bl	8006630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800806a:	e06d      	b.n	8008148 <USBD_CUSTOM_BULK_Setup+0x234>
            USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7fe fa61 	bl	8006536 <USBD_CtlError>
            ret = USBD_FAIL;
 8008074:	2303      	movs	r3, #3
 8008076:	75fb      	strb	r3, [r7, #23]
          break;
 8008078:	e066      	b.n	8008148 <USBD_CUSTOM_BULK_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_BULK_REPORT_DESC)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	885b      	ldrh	r3, [r3, #2]
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	b29b      	uxth	r3, r3
 8008082:	2b22      	cmp	r3, #34	@ 0x22
 8008084:	d110      	bne.n	80080a8 <USBD_CUSTOM_BULK_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_BULK_REPORT_DESC_SIZE, req->wLength);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	88db      	ldrh	r3, [r3, #6]
 800808a:	2ba3      	cmp	r3, #163	@ 0xa3
 800808c:	bf28      	it	cs
 800808e:	23a3      	movcs	r3, #163	@ 0xa3
 8008090:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_BULK_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	33b0      	adds	r3, #176	@ 0xb0
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	e00d      	b.n	80080c4 <USBD_CUSTOM_BULK_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_BULK_DESCRIPTOR_TYPE)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	885b      	ldrh	r3, [r3, #2]
 80080ac:	0a1b      	lsrs	r3, r3, #8
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	2b21      	cmp	r3, #33	@ 0x21
 80080b2:	d107      	bne.n	80080c4 <USBD_CUSTOM_BULK_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_BULK_Desc;
 80080b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008164 <USBD_CUSTOM_BULK_Setup+0x250>)
 80080b6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_BULK_DESC_SIZ, req->wLength);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	88db      	ldrh	r3, [r3, #6]
 80080bc:	2b09      	cmp	r3, #9
 80080be:	bf28      	it	cs
 80080c0:	2309      	movcs	r3, #9
 80080c2:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d006      	beq.n	80080d8 <USBD_CUSTOM_BULK_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 80080ca:	8bfb      	ldrh	r3, [r7, #30]
 80080cc:	461a      	mov	r2, r3
 80080ce:	69b9      	ldr	r1, [r7, #24]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7fe faad 	bl	8006630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080d6:	e037      	b.n	8008148 <USBD_CUSTOM_BULK_Setup+0x234>
            USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7fe fa2b 	bl	8006536 <USBD_CtlError>
            ret = USBD_FAIL;
 80080e0:	2303      	movs	r3, #3
 80080e2:	75fb      	strb	r3, [r7, #23]
          break;
 80080e4:	e030      	b.n	8008148 <USBD_CUSTOM_BULK_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d107      	bne.n	8008102 <USBD_CUSTOM_BULK_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	3348      	adds	r3, #72	@ 0x48
 80080f6:	2201      	movs	r2, #1
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7fe fa98 	bl	8006630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008100:	e022      	b.n	8008148 <USBD_CUSTOM_BULK_Setup+0x234>
            USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fe fa16 	bl	8006536 <USBD_CtlError>
            ret = USBD_FAIL;
 800810a:	2303      	movs	r3, #3
 800810c:	75fb      	strb	r3, [r7, #23]
          break;
 800810e:	e01b      	b.n	8008148 <USBD_CUSTOM_BULK_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b03      	cmp	r3, #3
 800811a:	d106      	bne.n	800812a <USBD_CUSTOM_BULK_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	885b      	ldrh	r3, [r3, #2]
 8008120:	b2db      	uxtb	r3, r3
 8008122:	461a      	mov	r2, r3
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008128:	e00e      	b.n	8008148 <USBD_CUSTOM_BULK_Setup+0x234>
            USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7fe fa02 	bl	8006536 <USBD_CtlError>
            ret = USBD_FAIL;
 8008132:	2303      	movs	r3, #3
 8008134:	75fb      	strb	r3, [r7, #23]
          break;
 8008136:	e007      	b.n	8008148 <USBD_CUSTOM_BULK_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7fe f9fb 	bl	8006536 <USBD_CtlError>
          ret = USBD_FAIL;
 8008140:	2303      	movs	r3, #3
 8008142:	75fb      	strb	r3, [r7, #23]
          break;
 8008144:	e000      	b.n	8008148 <USBD_CUSTOM_BULK_Setup+0x234>
          break;
 8008146:	bf00      	nop
      }
      break;
 8008148:	e006      	b.n	8008158 <USBD_CUSTOM_BULK_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7fe f9f2 	bl	8006536 <USBD_CtlError>
      ret = USBD_FAIL;
 8008152:	2303      	movs	r3, #3
 8008154:	75fb      	strb	r3, [r7, #23]
      break;
 8008156:	bf00      	nop
  }
  return (uint8_t)ret;
 8008158:	7dfb      	ldrb	r3, [r7, #23]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3720      	adds	r7, #32
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000074 	.word	0x20000074

08008168 <USBD_CUSTOM_BULK_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_BULK_GetFSCfgDesc(uint16_t *length)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_BULK_CfgDesc, CUSTOM_BULK_EPIN_ADDR);
 8008170:	2181      	movs	r1, #129	@ 0x81
 8008172:	4815      	ldr	r0, [pc, #84]	@ (80081c8 <USBD_CUSTOM_BULK_GetFSCfgDesc+0x60>)
 8008174:	f7fd fba6 	bl	80058c4 <USBD_GetEpDesc>
 8008178:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_BULK_CfgDesc, CUSTOM_BULK_EPOUT_ADDR);
 800817a:	2101      	movs	r1, #1
 800817c:	4812      	ldr	r0, [pc, #72]	@ (80081c8 <USBD_CUSTOM_BULK_GetFSCfgDesc+0x60>)
 800817e:	f7fd fba1 	bl	80058c4 <USBD_GetEpDesc>
 8008182:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <USBD_CUSTOM_BULK_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_BULK_EPIN_SIZE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008192:	711a      	strb	r2, [r3, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_BULK_FS_BINTERVAL;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d009      	beq.n	80081b8 <USBD_CUSTOM_BULK_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_BULK_EPOUT_SIZE;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081ac:	711a      	strb	r2, [r3, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_BULK_FS_BINTERVAL;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2200      	movs	r2, #0
 80081b6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_BULK_CfgDesc);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2229      	movs	r2, #41	@ 0x29
 80081bc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_BULK_CfgDesc;
 80081be:	4b02      	ldr	r3, [pc, #8]	@ (80081c8 <USBD_CUSTOM_BULK_GetFSCfgDesc+0x60>)
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20000048 	.word	0x20000048

080081cc <USBD_CUSTOM_BULK_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_BULK_GetHSCfgDesc(uint16_t *length)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_BULK_CfgDesc, CUSTOM_BULK_EPIN_ADDR);
 80081d4:	2181      	movs	r1, #129	@ 0x81
 80081d6:	4815      	ldr	r0, [pc, #84]	@ (800822c <USBD_CUSTOM_BULK_GetHSCfgDesc+0x60>)
 80081d8:	f7fd fb74 	bl	80058c4 <USBD_GetEpDesc>
 80081dc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_BULK_CfgDesc, CUSTOM_BULK_EPOUT_ADDR);
 80081de:	2101      	movs	r1, #1
 80081e0:	4812      	ldr	r0, [pc, #72]	@ (800822c <USBD_CUSTOM_BULK_GetHSCfgDesc+0x60>)
 80081e2:	f7fd fb6f 	bl	80058c4 <USBD_GetEpDesc>
 80081e6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <USBD_CUSTOM_BULK_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_BULK_EPIN_SIZE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081f6:	711a      	strb	r2, [r3, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_BULK_HS_BINTERVAL;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2205      	movs	r2, #5
 8008200:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d009      	beq.n	800821c <USBD_CUSTOM_BULK_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_BULK_EPOUT_SIZE;
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2200      	movs	r2, #0
 800820c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008210:	711a      	strb	r2, [r3, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_BULK_HS_BINTERVAL;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2205      	movs	r2, #5
 800821a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_BULK_CfgDesc);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2229      	movs	r2, #41	@ 0x29
 8008220:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_BULK_CfgDesc;
 8008222:	4b02      	ldr	r3, [pc, #8]	@ (800822c <USBD_CUSTOM_BULK_GetHSCfgDesc+0x60>)
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000048 	.word	0x20000048

08008230 <USBD_CUSTOM_BULK_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_BULK_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_BULK_CfgDesc, CUSTOM_BULK_EPIN_ADDR);
 8008238:	2181      	movs	r1, #129	@ 0x81
 800823a:	4815      	ldr	r0, [pc, #84]	@ (8008290 <USBD_CUSTOM_BULK_GetOtherSpeedCfgDesc+0x60>)
 800823c:	f7fd fb42 	bl	80058c4 <USBD_GetEpDesc>
 8008240:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_BULK_CfgDesc, CUSTOM_BULK_EPOUT_ADDR);
 8008242:	2101      	movs	r1, #1
 8008244:	4812      	ldr	r0, [pc, #72]	@ (8008290 <USBD_CUSTOM_BULK_GetOtherSpeedCfgDesc+0x60>)
 8008246:	f7fd fb3d 	bl	80058c4 <USBD_GetEpDesc>
 800824a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <USBD_CUSTOM_BULK_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_BULK_EPIN_SIZE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800825a:	711a      	strb	r2, [r3, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_BULK_FS_BINTERVAL;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d009      	beq.n	8008280 <USBD_CUSTOM_BULK_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_BULK_EPOUT_SIZE;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2200      	movs	r2, #0
 8008270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008274:	711a      	strb	r2, [r3, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_BULK_FS_BINTERVAL;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2200      	movs	r2, #0
 800827e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_BULK_CfgDesc);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2229      	movs	r2, #41	@ 0x29
 8008284:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_BULK_CfgDesc;
 8008286:	4b02      	ldr	r3, [pc, #8]	@ (8008290 <USBD_CUSTOM_BULK_GetOtherSpeedCfgDesc+0x60>)
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20000048 	.word	0x20000048

08008294 <USBD_CUSTOM_BULK_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_BULK_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_BULK_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_BULK_IDLE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	32b0      	adds	r2, #176	@ 0xb0
 80082aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <USBD_CUSTOM_BULK_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_BULK_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_BULK_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	32b0      	adds	r2, #176	@ 0xb0
 80082d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <USBD_CUSTOM_BULK_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e017      	b.n	8008314 <USBD_CUSTOM_BULK_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_BULK_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	32b0      	adds	r2, #176	@ 0xb0
 80082ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f2:	60fb      	str	r3, [r7, #12]
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_BULK_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
  ((USBD_CUSTOM_BULK_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	33b0      	adds	r3, #176	@ 0xb0
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	7810      	ldrb	r0, [r2, #0]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	7852      	ldrb	r2, [r2, #1]
 800830e:	4611      	mov	r1, r2
 8008310:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_CUSTOM_BULK_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_BULK_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_BULK_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	32b0      	adds	r2, #176	@ 0xb0
 800832e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <USBD_CUSTOM_BULK_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008336:	2303      	movs	r3, #3
 8008338:	e00f      	b.n	800835a <USBD_CUSTOM_BULK_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_BULK_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	32b0      	adds	r2, #176	@ 0xb0
 8008344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008348:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800834a:	4b06      	ldr	r3, [pc, #24]	@ (8008364 <USBD_CUSTOM_BULK_ReceivePacket+0x48>)
 800834c:	7819      	ldrb	r1, [r3, #0]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	2340      	movs	r3, #64	@ 0x40
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fc32 	bl	8008bbc <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	2000008b 	.word	0x2000008b

08008368 <USBD_CUSTOM_BULK_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_BULK_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_BULK_HandleTypeDef *hhid = (USBD_CUSTOM_BULK_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	32b0      	adds	r2, #176	@ 0xb0
 800837a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <USBD_CUSTOM_BULK_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008386:	2303      	movs	r3, #3
 8008388:	e016      	b.n	80083b8 <USBD_CUSTOM_BULK_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800838e:	2b01      	cmp	r3, #1
 8008390:	d111      	bne.n	80083b6 <USBD_CUSTOM_BULK_EP0_RxReady+0x4e>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_BULK_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
#else
    ((USBD_CUSTOM_BULK_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	33b0      	adds	r3, #176	@ 0xb0
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	7810      	ldrb	r0, [r2, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	7852      	ldrb	r2, [r2, #1]
 80083ac:	4611      	mov	r1, r2
 80083ae:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBD_CUSTOM_BULK_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_BULK_GetDeviceQualifierDesc(uint16_t *length)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_BULK_DeviceQualifierDesc);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	220a      	movs	r2, #10
 80083cc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_BULK_DeviceQualifierDesc;
 80083ce:	4b03      	ldr	r3, [pc, #12]	@ (80083dc <USBD_CUSTOM_BULK_GetDeviceQualifierDesc+0x1c>)
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	20000080 	.word	0x20000080

080083e0 <CUSTOM_BULK_Init_FS>:
  CUSTOM_BULK_OutEvent_FS
};


static int8_t CUSTOM_BULK_Init_FS(void)
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <CUSTOM_BULK_DeInit_FS>:


static int8_t CUSTOM_BULK_DeInit_FS(void)
{
 80083f0:	b480      	push	{r7}
 80083f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80083f4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <CUSTOM_BULK_OutEvent_FS>:




static int8_t CUSTOM_BULK_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	460a      	mov	r2, r1
 800840a:	71fb      	strb	r3, [r7, #7]
 800840c:	4613      	mov	r3, r2
 800840e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  USBD_CUSTOM_BULK_HandleTypeDef *hhid = (USBD_CUSTOM_BULK_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008410:	4b15      	ldr	r3, [pc, #84]	@ (8008468 <CUSTOM_BULK_OutEvent_FS+0x68>)
 8008412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008416:	60fb      	str	r3, [r7, #12]
  uint8_t *buf = hhid->Report_buf;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	60bb      	str	r3, [r7, #8]

  if (strncmp((char*)buf, "START", 5) == 0)
 800841c:	2205      	movs	r2, #5
 800841e:	4913      	ldr	r1, [pc, #76]	@ (800846c <CUSTOM_BULK_OutEvent_FS+0x6c>)
 8008420:	68b8      	ldr	r0, [r7, #8]
 8008422:	f000 fd7c 	bl	8008f1e <strncmp>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d103      	bne.n	8008434 <CUSTOM_BULK_OutEvent_FS+0x34>
  {
	  is_streaming = 1;
 800842c:	4b10      	ldr	r3, [pc, #64]	@ (8008470 <CUSTOM_BULK_OutEvent_FS+0x70>)
 800842e:	2201      	movs	r2, #1
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	e00a      	b.n	800844a <CUSTOM_BULK_OutEvent_FS+0x4a>

  }
  else if (strncmp((char*)buf, "STOP", 4) == 0)
 8008434:	2204      	movs	r2, #4
 8008436:	490f      	ldr	r1, [pc, #60]	@ (8008474 <CUSTOM_BULK_OutEvent_FS+0x74>)
 8008438:	68b8      	ldr	r0, [r7, #8]
 800843a:	f000 fd70 	bl	8008f1e <strncmp>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <CUSTOM_BULK_OutEvent_FS+0x4a>
  {
	  is_streaming = 0;
 8008444:	4b0a      	ldr	r3, [pc, #40]	@ (8008470 <CUSTOM_BULK_OutEvent_FS+0x70>)
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
  // Send response
  //USBD_CUSTOM_BULK_SendReport(&hUsbDeviceFS, (uint8_t*)response, strlen(response));


  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_BULK_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800844a:	4807      	ldr	r0, [pc, #28]	@ (8008468 <CUSTOM_BULK_OutEvent_FS+0x68>)
 800844c:	f7ff ff66 	bl	800831c <USBD_CUSTOM_BULK_ReceivePacket>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d002      	beq.n	800845c <CUSTOM_BULK_OutEvent_FS+0x5c>
  {
    return -1;
 8008456:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800845a:	e000      	b.n	800845e <CUSTOM_BULK_OutEvent_FS+0x5e>
  }

  return (USBD_OK);
 800845c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	200041c8 	.word	0x200041c8
 800846c:	0800ab3c 	.word	0x0800ab3c
 8008470:	200044a4 	.word	0x200044a4
 8008474:	0800ab44 	.word	0x0800ab44

08008478 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	6039      	str	r1, [r7, #0]
 8008482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2212      	movs	r2, #18
 8008488:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800848a:	4b03      	ldr	r3, [pc, #12]	@ (8008498 <USBD_FS_DeviceDescriptor+0x20>)
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	2000015c 	.word	0x2000015c

0800849c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	6039      	str	r1, [r7, #0]
 80084a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2204      	movs	r2, #4
 80084ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084ae:	4b03      	ldr	r3, [pc, #12]	@ (80084bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	20000170 	.word	0x20000170

080084c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d105      	bne.n	80084de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	4907      	ldr	r1, [pc, #28]	@ (80084f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80084d6:	4808      	ldr	r0, [pc, #32]	@ (80084f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80084d8:	f7fe f83e 	bl	8006558 <USBD_GetString>
 80084dc:	e004      	b.n	80084e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	4904      	ldr	r1, [pc, #16]	@ (80084f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80084e2:	4805      	ldr	r0, [pc, #20]	@ (80084f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80084e4:	f7fe f838 	bl	8006558 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084e8:	4b02      	ldr	r3, [pc, #8]	@ (80084f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200044a8 	.word	0x200044a8
 80084f8:	0800ab4c 	.word	0x0800ab4c

080084fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	6039      	str	r1, [r7, #0]
 8008506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	4904      	ldr	r1, [pc, #16]	@ (800851c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800850c:	4804      	ldr	r0, [pc, #16]	@ (8008520 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800850e:	f7fe f823 	bl	8006558 <USBD_GetString>
  return USBD_StrDesc;
 8008512:	4b02      	ldr	r3, [pc, #8]	@ (800851c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	200044a8 	.word	0x200044a8
 8008520:	0800ab68 	.word	0x0800ab68

08008524 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	4603      	mov	r3, r0
 800852c:	6039      	str	r1, [r7, #0]
 800852e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	221a      	movs	r2, #26
 8008534:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008536:	f000 f843 	bl	80085c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800853a:	4b02      	ldr	r3, [pc, #8]	@ (8008544 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20000174 	.word	0x20000174

08008548 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d105      	bne.n	8008566 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	4907      	ldr	r1, [pc, #28]	@ (800857c <USBD_FS_ConfigStrDescriptor+0x34>)
 800855e:	4808      	ldr	r0, [pc, #32]	@ (8008580 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008560:	f7fd fffa 	bl	8006558 <USBD_GetString>
 8008564:	e004      	b.n	8008570 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	4904      	ldr	r1, [pc, #16]	@ (800857c <USBD_FS_ConfigStrDescriptor+0x34>)
 800856a:	4805      	ldr	r0, [pc, #20]	@ (8008580 <USBD_FS_ConfigStrDescriptor+0x38>)
 800856c:	f7fd fff4 	bl	8006558 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008570:	4b02      	ldr	r3, [pc, #8]	@ (800857c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	200044a8 	.word	0x200044a8
 8008580:	0800ab7c 	.word	0x0800ab7c

08008584 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	6039      	str	r1, [r7, #0]
 800858e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008590:	79fb      	ldrb	r3, [r7, #7]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d105      	bne.n	80085a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	4907      	ldr	r1, [pc, #28]	@ (80085b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800859a:	4808      	ldr	r0, [pc, #32]	@ (80085bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800859c:	f7fd ffdc 	bl	8006558 <USBD_GetString>
 80085a0:	e004      	b.n	80085ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	4904      	ldr	r1, [pc, #16]	@ (80085b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085a6:	4805      	ldr	r0, [pc, #20]	@ (80085bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085a8:	f7fd ffd6 	bl	8006558 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085ac:	4b02      	ldr	r3, [pc, #8]	@ (80085b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	200044a8 	.word	0x200044a8
 80085bc:	0800ab90 	.word	0x0800ab90

080085c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008604 <Get_SerialNum+0x44>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008608 <Get_SerialNum+0x48>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085d2:	4b0e      	ldr	r3, [pc, #56]	@ (800860c <Get_SerialNum+0x4c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4413      	add	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d009      	beq.n	80085fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085e6:	2208      	movs	r2, #8
 80085e8:	4909      	ldr	r1, [pc, #36]	@ (8008610 <Get_SerialNum+0x50>)
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 f814 	bl	8008618 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085f0:	2204      	movs	r2, #4
 80085f2:	4908      	ldr	r1, [pc, #32]	@ (8008614 <Get_SerialNum+0x54>)
 80085f4:	68b8      	ldr	r0, [r7, #8]
 80085f6:	f000 f80f 	bl	8008618 <IntToUnicode>
  }
}
 80085fa:	bf00      	nop
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	1fff7a10 	.word	0x1fff7a10
 8008608:	1fff7a14 	.word	0x1fff7a14
 800860c:	1fff7a18 	.word	0x1fff7a18
 8008610:	20000176 	.word	0x20000176
 8008614:	20000186 	.word	0x20000186

08008618 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	4613      	mov	r3, r2
 8008624:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800862a:	2300      	movs	r3, #0
 800862c:	75fb      	strb	r3, [r7, #23]
 800862e:	e027      	b.n	8008680 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	0f1b      	lsrs	r3, r3, #28
 8008634:	2b09      	cmp	r3, #9
 8008636:	d80b      	bhi.n	8008650 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	0f1b      	lsrs	r3, r3, #28
 800863c:	b2da      	uxtb	r2, r3
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	4619      	mov	r1, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	440b      	add	r3, r1
 8008648:	3230      	adds	r2, #48	@ 0x30
 800864a:	b2d2      	uxtb	r2, r2
 800864c:	701a      	strb	r2, [r3, #0]
 800864e:	e00a      	b.n	8008666 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	0f1b      	lsrs	r3, r3, #28
 8008654:	b2da      	uxtb	r2, r3
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	4619      	mov	r1, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	440b      	add	r3, r1
 8008660:	3237      	adds	r2, #55	@ 0x37
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	3301      	adds	r3, #1
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	4413      	add	r3, r2
 8008676:	2200      	movs	r2, #0
 8008678:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	3301      	adds	r3, #1
 800867e:	75fb      	strb	r3, [r7, #23]
 8008680:	7dfa      	ldrb	r2, [r7, #23]
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	429a      	cmp	r2, r3
 8008686:	d3d3      	bcc.n	8008630 <IntToUnicode+0x18>
  }
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
	...

08008698 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08a      	sub	sp, #40	@ 0x28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086a0:	f107 0314 	add.w	r3, r7, #20
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	605a      	str	r2, [r3, #4]
 80086aa:	609a      	str	r2, [r3, #8]
 80086ac:	60da      	str	r2, [r3, #12]
 80086ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086b8:	d13a      	bne.n	8008730 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086ba:	2300      	movs	r3, #0
 80086bc:	613b      	str	r3, [r7, #16]
 80086be:	4b1e      	ldr	r3, [pc, #120]	@ (8008738 <HAL_PCD_MspInit+0xa0>)
 80086c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008738 <HAL_PCD_MspInit+0xa0>)
 80086c4:	f043 0301 	orr.w	r3, r3, #1
 80086c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80086ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008738 <HAL_PCD_MspInit+0xa0>)
 80086cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	613b      	str	r3, [r7, #16]
 80086d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80086da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086dc:	2302      	movs	r3, #2
 80086de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086e4:	2303      	movs	r3, #3
 80086e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086e8:	230a      	movs	r3, #10
 80086ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086ec:	f107 0314 	add.w	r3, r7, #20
 80086f0:	4619      	mov	r1, r3
 80086f2:	4812      	ldr	r0, [pc, #72]	@ (800873c <HAL_PCD_MspInit+0xa4>)
 80086f4:	f7f9 f994 	bl	8001a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008738 <HAL_PCD_MspInit+0xa0>)
 80086fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fc:	4a0e      	ldr	r2, [pc, #56]	@ (8008738 <HAL_PCD_MspInit+0xa0>)
 80086fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008702:	6353      	str	r3, [r2, #52]	@ 0x34
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	4b0b      	ldr	r3, [pc, #44]	@ (8008738 <HAL_PCD_MspInit+0xa0>)
 800870a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800870c:	4a0a      	ldr	r2, [pc, #40]	@ (8008738 <HAL_PCD_MspInit+0xa0>)
 800870e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008712:	6453      	str	r3, [r2, #68]	@ 0x44
 8008714:	4b08      	ldr	r3, [pc, #32]	@ (8008738 <HAL_PCD_MspInit+0xa0>)
 8008716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8008720:	2200      	movs	r2, #0
 8008722:	2105      	movs	r1, #5
 8008724:	2043      	movs	r0, #67	@ 0x43
 8008726:	f7f9 f944 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800872a:	2043      	movs	r0, #67	@ 0x43
 800872c:	f7f9 f95d 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008730:	bf00      	nop
 8008732:	3728      	adds	r7, #40	@ 0x28
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	40023800 	.word	0x40023800
 800873c:	40020000 	.word	0x40020000

08008740 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f7fc fd85 	bl	8005266 <USBD_LL_SetupStage>
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008776:	78fa      	ldrb	r2, [r7, #3]
 8008778:	6879      	ldr	r1, [r7, #4]
 800877a:	4613      	mov	r3, r2
 800877c:	00db      	lsls	r3, r3, #3
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	440b      	add	r3, r1
 8008784:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	4619      	mov	r1, r3
 800878e:	f7fc fdbf 	bl	8005310 <USBD_LL_DataOutStage>
}
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	460b      	mov	r3, r1
 80087a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80087ac:	78fa      	ldrb	r2, [r7, #3]
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4613      	mov	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	3320      	adds	r3, #32
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	78fb      	ldrb	r3, [r7, #3]
 80087c0:	4619      	mov	r1, r3
 80087c2:	f7fc fe61 	bl	8005488 <USBD_LL_DataInStage>
}
 80087c6:	bf00      	nop
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fc ffa5 	bl	800572c <USBD_LL_SOF>
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087f2:	2301      	movs	r3, #1
 80087f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	79db      	ldrb	r3, [r3, #7]
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d001      	beq.n	8008802 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80087fe:	f7f8 fe01 	bl	8001404 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008808:	7bfa      	ldrb	r2, [r7, #15]
 800880a:	4611      	mov	r1, r2
 800880c:	4618      	mov	r0, r3
 800880e:	f7fc ff49 	bl	80056a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008818:	4618      	mov	r0, r3
 800881a:	f7fc fef0 	bl	80055fe <USBD_LL_Reset>
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008836:	4618      	mov	r0, r3
 8008838:	f7fc ff44 	bl	80056c4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800884e:	f043 0301 	orr.w	r3, r3, #1
 8008852:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	7adb      	ldrb	r3, [r3, #11]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d005      	beq.n	8008868 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800885c:	4b04      	ldr	r3, [pc, #16]	@ (8008870 <HAL_PCD_SuspendCallback+0x48>)
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	4a03      	ldr	r2, [pc, #12]	@ (8008870 <HAL_PCD_SuspendCallback+0x48>)
 8008862:	f043 0306 	orr.w	r3, r3, #6
 8008866:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008868:	bf00      	nop
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	e000ed00 	.word	0xe000ed00

08008874 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008882:	4618      	mov	r0, r3
 8008884:	f7fc ff3a 	bl	80056fc <USBD_LL_Resume>
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	4611      	mov	r1, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fc ff92 	bl	80057d0 <USBD_LL_IsoOUTIncomplete>
}
 80088ac:	bf00      	nop
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088c6:	78fa      	ldrb	r2, [r7, #3]
 80088c8:	4611      	mov	r1, r2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fc ff4e 	bl	800576c <USBD_LL_IsoINIncomplete>
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fc ffa4 	bl	8005834 <USBD_LL_DevConnected>
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008902:	4618      	mov	r0, r3
 8008904:	f7fc ffa1 	bl	800584a <USBD_LL_DevDisconnected>
}
 8008908:	bf00      	nop
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d13c      	bne.n	800899a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008920:	4a20      	ldr	r2, [pc, #128]	@ (80089a4 <USBD_LL_Init+0x94>)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a1e      	ldr	r2, [pc, #120]	@ (80089a4 <USBD_LL_Init+0x94>)
 800892c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008930:	4b1c      	ldr	r3, [pc, #112]	@ (80089a4 <USBD_LL_Init+0x94>)
 8008932:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008936:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008938:	4b1a      	ldr	r3, [pc, #104]	@ (80089a4 <USBD_LL_Init+0x94>)
 800893a:	2204      	movs	r2, #4
 800893c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800893e:	4b19      	ldr	r3, [pc, #100]	@ (80089a4 <USBD_LL_Init+0x94>)
 8008940:	2202      	movs	r2, #2
 8008942:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008944:	4b17      	ldr	r3, [pc, #92]	@ (80089a4 <USBD_LL_Init+0x94>)
 8008946:	2200      	movs	r2, #0
 8008948:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800894a:	4b16      	ldr	r3, [pc, #88]	@ (80089a4 <USBD_LL_Init+0x94>)
 800894c:	2202      	movs	r2, #2
 800894e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008950:	4b14      	ldr	r3, [pc, #80]	@ (80089a4 <USBD_LL_Init+0x94>)
 8008952:	2200      	movs	r2, #0
 8008954:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008956:	4b13      	ldr	r3, [pc, #76]	@ (80089a4 <USBD_LL_Init+0x94>)
 8008958:	2200      	movs	r2, #0
 800895a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800895c:	4b11      	ldr	r3, [pc, #68]	@ (80089a4 <USBD_LL_Init+0x94>)
 800895e:	2200      	movs	r2, #0
 8008960:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008962:	4b10      	ldr	r3, [pc, #64]	@ (80089a4 <USBD_LL_Init+0x94>)
 8008964:	2200      	movs	r2, #0
 8008966:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008968:	4b0e      	ldr	r3, [pc, #56]	@ (80089a4 <USBD_LL_Init+0x94>)
 800896a:	2200      	movs	r2, #0
 800896c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800896e:	480d      	ldr	r0, [pc, #52]	@ (80089a4 <USBD_LL_Init+0x94>)
 8008970:	f7f9 f9f3 	bl	8001d5a <HAL_PCD_Init>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800897a:	f7f8 fd43 	bl	8001404 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800897e:	2180      	movs	r1, #128	@ 0x80
 8008980:	4808      	ldr	r0, [pc, #32]	@ (80089a4 <USBD_LL_Init+0x94>)
 8008982:	f7fa fc08 	bl	8003196 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008986:	2240      	movs	r2, #64	@ 0x40
 8008988:	2100      	movs	r1, #0
 800898a:	4806      	ldr	r0, [pc, #24]	@ (80089a4 <USBD_LL_Init+0x94>)
 800898c:	f7fa fbbc 	bl	8003108 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008990:	2280      	movs	r2, #128	@ 0x80
 8008992:	2101      	movs	r1, #1
 8008994:	4803      	ldr	r0, [pc, #12]	@ (80089a4 <USBD_LL_Init+0x94>)
 8008996:	f7fa fbb7 	bl	8003108 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	200046a8 	.word	0x200046a8

080089a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089be:	4618      	mov	r0, r3
 80089c0:	f7f9 fada 	bl	8001f78 <HAL_PCD_Start>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 f930 	bl	8008c30 <USBD_Get_USB_Status>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	4608      	mov	r0, r1
 80089e8:	4611      	mov	r1, r2
 80089ea:	461a      	mov	r2, r3
 80089ec:	4603      	mov	r3, r0
 80089ee:	70fb      	strb	r3, [r7, #3]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70bb      	strb	r3, [r7, #2]
 80089f4:	4613      	mov	r3, r2
 80089f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008a06:	78bb      	ldrb	r3, [r7, #2]
 8008a08:	883a      	ldrh	r2, [r7, #0]
 8008a0a:	78f9      	ldrb	r1, [r7, #3]
 8008a0c:	f7f9 ffae 	bl	800296c <HAL_PCD_EP_Open>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 f90a 	bl	8008c30 <USBD_Get_USB_Status>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	460b      	mov	r3, r1
 8008a34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a44:	78fa      	ldrb	r2, [r7, #3]
 8008a46:	4611      	mov	r1, r2
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7f9 fff9 	bl	8002a40 <HAL_PCD_EP_Close>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 f8eb 	bl	8008c30 <USBD_Get_USB_Status>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a82:	78fa      	ldrb	r2, [r7, #3]
 8008a84:	4611      	mov	r1, r2
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fa f899 	bl	8002bbe <HAL_PCD_EP_SetStall>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 f8cc 	bl	8008c30 <USBD_Get_USB_Status>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ac0:	78fa      	ldrb	r2, [r7, #3]
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fa f8dd 	bl	8002c84 <HAL_PCD_EP_ClrStall>
 8008aca:	4603      	mov	r3, r0
 8008acc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 f8ad 	bl	8008c30 <USBD_Get_USB_Status>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008af6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	da0b      	bge.n	8008b18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b06:	68f9      	ldr	r1, [r7, #12]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	3316      	adds	r3, #22
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	e00b      	b.n	8008b30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b1e:	68f9      	ldr	r1, [r7, #12]
 8008b20:	4613      	mov	r3, r2
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008b2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b56:	78fa      	ldrb	r2, [r7, #3]
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7f9 fee2 	bl	8002924 <HAL_PCD_SetAddress>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 f862 	bl	8008c30 <USBD_Get_USB_Status>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b086      	sub	sp, #24
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	60f8      	str	r0, [r7, #12]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
 8008b86:	460b      	mov	r3, r1
 8008b88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b98:	7af9      	ldrb	r1, [r7, #11]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	f7f9 ffd4 	bl	8002b4a <HAL_PCD_EP_Transmit>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 f841 	bl	8008c30 <USBD_Get_USB_Status>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	607a      	str	r2, [r7, #4]
 8008bc6:	603b      	str	r3, [r7, #0]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008bda:	7af9      	ldrb	r1, [r7, #11]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	f7f9 ff78 	bl	8002ad4 <HAL_PCD_EP_Receive>
 8008be4:	4603      	mov	r3, r0
 8008be6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 f820 	bl	8008c30 <USBD_Get_USB_Status>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bf4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008c08:	4b03      	ldr	r3, [pc, #12]	@ (8008c18 <USBD_static_malloc+0x18>)
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20004b8c 	.word	0x20004b8c

08008c1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]

}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c3e:	79fb      	ldrb	r3, [r7, #7]
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d817      	bhi.n	8008c74 <USBD_Get_USB_Status+0x44>
 8008c44:	a201      	add	r2, pc, #4	@ (adr r2, 8008c4c <USBD_Get_USB_Status+0x1c>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c5d 	.word	0x08008c5d
 8008c50:	08008c63 	.word	0x08008c63
 8008c54:	08008c69 	.word	0x08008c69
 8008c58:	08008c6f 	.word	0x08008c6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c60:	e00b      	b.n	8008c7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c62:	2303      	movs	r3, #3
 8008c64:	73fb      	strb	r3, [r7, #15]
    break;
 8008c66:	e008      	b.n	8008c7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6c:	e005      	b.n	8008c7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	73fb      	strb	r3, [r7, #15]
    break;
 8008c72:	e002      	b.n	8008c7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c74:	2303      	movs	r3, #3
 8008c76:	73fb      	strb	r3, [r7, #15]
    break;
 8008c78:	bf00      	nop
  }
  return usb_status;
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <rand>:
 8008c88:	4b16      	ldr	r3, [pc, #88]	@ (8008ce4 <rand+0x5c>)
 8008c8a:	b510      	push	{r4, lr}
 8008c8c:	681c      	ldr	r4, [r3, #0]
 8008c8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008c90:	b9b3      	cbnz	r3, 8008cc0 <rand+0x38>
 8008c92:	2018      	movs	r0, #24
 8008c94:	f000 fa32 	bl	80090fc <malloc>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	6320      	str	r0, [r4, #48]	@ 0x30
 8008c9c:	b920      	cbnz	r0, 8008ca8 <rand+0x20>
 8008c9e:	4b12      	ldr	r3, [pc, #72]	@ (8008ce8 <rand+0x60>)
 8008ca0:	4812      	ldr	r0, [pc, #72]	@ (8008cec <rand+0x64>)
 8008ca2:	2152      	movs	r1, #82	@ 0x52
 8008ca4:	f000 f9c2 	bl	800902c <__assert_func>
 8008ca8:	4911      	ldr	r1, [pc, #68]	@ (8008cf0 <rand+0x68>)
 8008caa:	4b12      	ldr	r3, [pc, #72]	@ (8008cf4 <rand+0x6c>)
 8008cac:	e9c0 1300 	strd	r1, r3, [r0]
 8008cb0:	4b11      	ldr	r3, [pc, #68]	@ (8008cf8 <rand+0x70>)
 8008cb2:	6083      	str	r3, [r0, #8]
 8008cb4:	230b      	movs	r3, #11
 8008cb6:	8183      	strh	r3, [r0, #12]
 8008cb8:	2100      	movs	r1, #0
 8008cba:	2001      	movs	r0, #1
 8008cbc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008cc0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008cc2:	480e      	ldr	r0, [pc, #56]	@ (8008cfc <rand+0x74>)
 8008cc4:	690b      	ldr	r3, [r1, #16]
 8008cc6:	694c      	ldr	r4, [r1, #20]
 8008cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8008d00 <rand+0x78>)
 8008cca:	4358      	muls	r0, r3
 8008ccc:	fb02 0004 	mla	r0, r2, r4, r0
 8008cd0:	fba3 3202 	umull	r3, r2, r3, r2
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	eb40 0002 	adc.w	r0, r0, r2
 8008cda:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008cde:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008ce2:	bd10      	pop	{r4, pc}
 8008ce4:	2000019c 	.word	0x2000019c
 8008ce8:	0800abb8 	.word	0x0800abb8
 8008cec:	0800abcf 	.word	0x0800abcf
 8008cf0:	abcd330e 	.word	0xabcd330e
 8008cf4:	e66d1234 	.word	0xe66d1234
 8008cf8:	0005deec 	.word	0x0005deec
 8008cfc:	5851f42d 	.word	0x5851f42d
 8008d00:	4c957f2d 	.word	0x4c957f2d

08008d04 <std>:
 8008d04:	2300      	movs	r3, #0
 8008d06:	b510      	push	{r4, lr}
 8008d08:	4604      	mov	r4, r0
 8008d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d12:	6083      	str	r3, [r0, #8]
 8008d14:	8181      	strh	r1, [r0, #12]
 8008d16:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d18:	81c2      	strh	r2, [r0, #14]
 8008d1a:	6183      	str	r3, [r0, #24]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	2208      	movs	r2, #8
 8008d20:	305c      	adds	r0, #92	@ 0x5c
 8008d22:	f000 f8f4 	bl	8008f0e <memset>
 8008d26:	4b0d      	ldr	r3, [pc, #52]	@ (8008d5c <std+0x58>)
 8008d28:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d60 <std+0x5c>)
 8008d2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d64 <std+0x60>)
 8008d30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d32:	4b0d      	ldr	r3, [pc, #52]	@ (8008d68 <std+0x64>)
 8008d34:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d36:	4b0d      	ldr	r3, [pc, #52]	@ (8008d6c <std+0x68>)
 8008d38:	6224      	str	r4, [r4, #32]
 8008d3a:	429c      	cmp	r4, r3
 8008d3c:	d006      	beq.n	8008d4c <std+0x48>
 8008d3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d42:	4294      	cmp	r4, r2
 8008d44:	d002      	beq.n	8008d4c <std+0x48>
 8008d46:	33d0      	adds	r3, #208	@ 0xd0
 8008d48:	429c      	cmp	r4, r3
 8008d4a:	d105      	bne.n	8008d58 <std+0x54>
 8008d4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d54:	f000 b966 	b.w	8009024 <__retarget_lock_init_recursive>
 8008d58:	bd10      	pop	{r4, pc}
 8008d5a:	bf00      	nop
 8008d5c:	08008e89 	.word	0x08008e89
 8008d60:	08008eab 	.word	0x08008eab
 8008d64:	08008ee3 	.word	0x08008ee3
 8008d68:	08008f07 	.word	0x08008f07
 8008d6c:	20004be4 	.word	0x20004be4

08008d70 <stdio_exit_handler>:
 8008d70:	4a02      	ldr	r2, [pc, #8]	@ (8008d7c <stdio_exit_handler+0xc>)
 8008d72:	4903      	ldr	r1, [pc, #12]	@ (8008d80 <stdio_exit_handler+0x10>)
 8008d74:	4803      	ldr	r0, [pc, #12]	@ (8008d84 <stdio_exit_handler+0x14>)
 8008d76:	f000 b869 	b.w	8008e4c <_fwalk_sglue>
 8008d7a:	bf00      	nop
 8008d7c:	20000190 	.word	0x20000190
 8008d80:	08009371 	.word	0x08009371
 8008d84:	200001a0 	.word	0x200001a0

08008d88 <cleanup_stdio>:
 8008d88:	6841      	ldr	r1, [r0, #4]
 8008d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008dbc <cleanup_stdio+0x34>)
 8008d8c:	4299      	cmp	r1, r3
 8008d8e:	b510      	push	{r4, lr}
 8008d90:	4604      	mov	r4, r0
 8008d92:	d001      	beq.n	8008d98 <cleanup_stdio+0x10>
 8008d94:	f000 faec 	bl	8009370 <_fflush_r>
 8008d98:	68a1      	ldr	r1, [r4, #8]
 8008d9a:	4b09      	ldr	r3, [pc, #36]	@ (8008dc0 <cleanup_stdio+0x38>)
 8008d9c:	4299      	cmp	r1, r3
 8008d9e:	d002      	beq.n	8008da6 <cleanup_stdio+0x1e>
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 fae5 	bl	8009370 <_fflush_r>
 8008da6:	68e1      	ldr	r1, [r4, #12]
 8008da8:	4b06      	ldr	r3, [pc, #24]	@ (8008dc4 <cleanup_stdio+0x3c>)
 8008daa:	4299      	cmp	r1, r3
 8008dac:	d004      	beq.n	8008db8 <cleanup_stdio+0x30>
 8008dae:	4620      	mov	r0, r4
 8008db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008db4:	f000 badc 	b.w	8009370 <_fflush_r>
 8008db8:	bd10      	pop	{r4, pc}
 8008dba:	bf00      	nop
 8008dbc:	20004be4 	.word	0x20004be4
 8008dc0:	20004c4c 	.word	0x20004c4c
 8008dc4:	20004cb4 	.word	0x20004cb4

08008dc8 <global_stdio_init.part.0>:
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	4b0b      	ldr	r3, [pc, #44]	@ (8008df8 <global_stdio_init.part.0+0x30>)
 8008dcc:	4c0b      	ldr	r4, [pc, #44]	@ (8008dfc <global_stdio_init.part.0+0x34>)
 8008dce:	4a0c      	ldr	r2, [pc, #48]	@ (8008e00 <global_stdio_init.part.0+0x38>)
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	2104      	movs	r1, #4
 8008dd8:	f7ff ff94 	bl	8008d04 <std>
 8008ddc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008de0:	2201      	movs	r2, #1
 8008de2:	2109      	movs	r1, #9
 8008de4:	f7ff ff8e 	bl	8008d04 <std>
 8008de8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008dec:	2202      	movs	r2, #2
 8008dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008df2:	2112      	movs	r1, #18
 8008df4:	f7ff bf86 	b.w	8008d04 <std>
 8008df8:	20004d1c 	.word	0x20004d1c
 8008dfc:	20004be4 	.word	0x20004be4
 8008e00:	08008d71 	.word	0x08008d71

08008e04 <__sfp_lock_acquire>:
 8008e04:	4801      	ldr	r0, [pc, #4]	@ (8008e0c <__sfp_lock_acquire+0x8>)
 8008e06:	f000 b90e 	b.w	8009026 <__retarget_lock_acquire_recursive>
 8008e0a:	bf00      	nop
 8008e0c:	20004d25 	.word	0x20004d25

08008e10 <__sfp_lock_release>:
 8008e10:	4801      	ldr	r0, [pc, #4]	@ (8008e18 <__sfp_lock_release+0x8>)
 8008e12:	f000 b909 	b.w	8009028 <__retarget_lock_release_recursive>
 8008e16:	bf00      	nop
 8008e18:	20004d25 	.word	0x20004d25

08008e1c <__sinit>:
 8008e1c:	b510      	push	{r4, lr}
 8008e1e:	4604      	mov	r4, r0
 8008e20:	f7ff fff0 	bl	8008e04 <__sfp_lock_acquire>
 8008e24:	6a23      	ldr	r3, [r4, #32]
 8008e26:	b11b      	cbz	r3, 8008e30 <__sinit+0x14>
 8008e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e2c:	f7ff bff0 	b.w	8008e10 <__sfp_lock_release>
 8008e30:	4b04      	ldr	r3, [pc, #16]	@ (8008e44 <__sinit+0x28>)
 8008e32:	6223      	str	r3, [r4, #32]
 8008e34:	4b04      	ldr	r3, [pc, #16]	@ (8008e48 <__sinit+0x2c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1f5      	bne.n	8008e28 <__sinit+0xc>
 8008e3c:	f7ff ffc4 	bl	8008dc8 <global_stdio_init.part.0>
 8008e40:	e7f2      	b.n	8008e28 <__sinit+0xc>
 8008e42:	bf00      	nop
 8008e44:	08008d89 	.word	0x08008d89
 8008e48:	20004d1c 	.word	0x20004d1c

08008e4c <_fwalk_sglue>:
 8008e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e50:	4607      	mov	r7, r0
 8008e52:	4688      	mov	r8, r1
 8008e54:	4614      	mov	r4, r2
 8008e56:	2600      	movs	r6, #0
 8008e58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e5c:	f1b9 0901 	subs.w	r9, r9, #1
 8008e60:	d505      	bpl.n	8008e6e <_fwalk_sglue+0x22>
 8008e62:	6824      	ldr	r4, [r4, #0]
 8008e64:	2c00      	cmp	r4, #0
 8008e66:	d1f7      	bne.n	8008e58 <_fwalk_sglue+0xc>
 8008e68:	4630      	mov	r0, r6
 8008e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e6e:	89ab      	ldrh	r3, [r5, #12]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d907      	bls.n	8008e84 <_fwalk_sglue+0x38>
 8008e74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	d003      	beq.n	8008e84 <_fwalk_sglue+0x38>
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	4638      	mov	r0, r7
 8008e80:	47c0      	blx	r8
 8008e82:	4306      	orrs	r6, r0
 8008e84:	3568      	adds	r5, #104	@ 0x68
 8008e86:	e7e9      	b.n	8008e5c <_fwalk_sglue+0x10>

08008e88 <__sread>:
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e90:	f000 f87a 	bl	8008f88 <_read_r>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	bfab      	itete	ge
 8008e98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e9c:	181b      	addge	r3, r3, r0
 8008e9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008ea2:	bfac      	ite	ge
 8008ea4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008ea6:	81a3      	strhlt	r3, [r4, #12]
 8008ea8:	bd10      	pop	{r4, pc}

08008eaa <__swrite>:
 8008eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eae:	461f      	mov	r7, r3
 8008eb0:	898b      	ldrh	r3, [r1, #12]
 8008eb2:	05db      	lsls	r3, r3, #23
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	4616      	mov	r6, r2
 8008eba:	d505      	bpl.n	8008ec8 <__swrite+0x1e>
 8008ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f000 f84e 	bl	8008f64 <_lseek_r>
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ece:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	4628      	mov	r0, r5
 8008eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ede:	f000 b865 	b.w	8008fac <_write_r>

08008ee2 <__sseek>:
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eea:	f000 f83b 	bl	8008f64 <_lseek_r>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	bf15      	itete	ne
 8008ef4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ef6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008efa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008efe:	81a3      	strheq	r3, [r4, #12]
 8008f00:	bf18      	it	ne
 8008f02:	81a3      	strhne	r3, [r4, #12]
 8008f04:	bd10      	pop	{r4, pc}

08008f06 <__sclose>:
 8008f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f0a:	f000 b81b 	b.w	8008f44 <_close_r>

08008f0e <memset>:
 8008f0e:	4402      	add	r2, r0
 8008f10:	4603      	mov	r3, r0
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d100      	bne.n	8008f18 <memset+0xa>
 8008f16:	4770      	bx	lr
 8008f18:	f803 1b01 	strb.w	r1, [r3], #1
 8008f1c:	e7f9      	b.n	8008f12 <memset+0x4>

08008f1e <strncmp>:
 8008f1e:	b510      	push	{r4, lr}
 8008f20:	b16a      	cbz	r2, 8008f3e <strncmp+0x20>
 8008f22:	3901      	subs	r1, #1
 8008f24:	1884      	adds	r4, r0, r2
 8008f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f2a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d103      	bne.n	8008f3a <strncmp+0x1c>
 8008f32:	42a0      	cmp	r0, r4
 8008f34:	d001      	beq.n	8008f3a <strncmp+0x1c>
 8008f36:	2a00      	cmp	r2, #0
 8008f38:	d1f5      	bne.n	8008f26 <strncmp+0x8>
 8008f3a:	1ad0      	subs	r0, r2, r3
 8008f3c:	bd10      	pop	{r4, pc}
 8008f3e:	4610      	mov	r0, r2
 8008f40:	e7fc      	b.n	8008f3c <strncmp+0x1e>
	...

08008f44 <_close_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4d06      	ldr	r5, [pc, #24]	@ (8008f60 <_close_r+0x1c>)
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	602b      	str	r3, [r5, #0]
 8008f50:	f7f8 fb18 	bl	8001584 <_close>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_close_r+0x1a>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_close_r+0x1a>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	20004d20 	.word	0x20004d20

08008f64 <_lseek_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4d07      	ldr	r5, [pc, #28]	@ (8008f84 <_lseek_r+0x20>)
 8008f68:	4604      	mov	r4, r0
 8008f6a:	4608      	mov	r0, r1
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	602a      	str	r2, [r5, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	f7f8 fb2d 	bl	80015d2 <_lseek>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d102      	bne.n	8008f82 <_lseek_r+0x1e>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	b103      	cbz	r3, 8008f82 <_lseek_r+0x1e>
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	20004d20 	.word	0x20004d20

08008f88 <_read_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	4d07      	ldr	r5, [pc, #28]	@ (8008fa8 <_read_r+0x20>)
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	4608      	mov	r0, r1
 8008f90:	4611      	mov	r1, r2
 8008f92:	2200      	movs	r2, #0
 8008f94:	602a      	str	r2, [r5, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	f7f8 fabb 	bl	8001512 <_read>
 8008f9c:	1c43      	adds	r3, r0, #1
 8008f9e:	d102      	bne.n	8008fa6 <_read_r+0x1e>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	b103      	cbz	r3, 8008fa6 <_read_r+0x1e>
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
 8008fa8:	20004d20 	.word	0x20004d20

08008fac <_write_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	@ (8008fcc <_write_r+0x20>)
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	4608      	mov	r0, r1
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	602a      	str	r2, [r5, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f7f8 fac6 	bl	800154c <_write>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	d102      	bne.n	8008fca <_write_r+0x1e>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	b103      	cbz	r3, 8008fca <_write_r+0x1e>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	bd38      	pop	{r3, r4, r5, pc}
 8008fcc:	20004d20 	.word	0x20004d20

08008fd0 <__errno>:
 8008fd0:	4b01      	ldr	r3, [pc, #4]	@ (8008fd8 <__errno+0x8>)
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	2000019c 	.word	0x2000019c

08008fdc <__libc_init_array>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	4d0d      	ldr	r5, [pc, #52]	@ (8009014 <__libc_init_array+0x38>)
 8008fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8009018 <__libc_init_array+0x3c>)
 8008fe2:	1b64      	subs	r4, r4, r5
 8008fe4:	10a4      	asrs	r4, r4, #2
 8008fe6:	2600      	movs	r6, #0
 8008fe8:	42a6      	cmp	r6, r4
 8008fea:	d109      	bne.n	8009000 <__libc_init_array+0x24>
 8008fec:	4d0b      	ldr	r5, [pc, #44]	@ (800901c <__libc_init_array+0x40>)
 8008fee:	4c0c      	ldr	r4, [pc, #48]	@ (8009020 <__libc_init_array+0x44>)
 8008ff0:	f001 fd80 	bl	800aaf4 <_init>
 8008ff4:	1b64      	subs	r4, r4, r5
 8008ff6:	10a4      	asrs	r4, r4, #2
 8008ff8:	2600      	movs	r6, #0
 8008ffa:	42a6      	cmp	r6, r4
 8008ffc:	d105      	bne.n	800900a <__libc_init_array+0x2e>
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}
 8009000:	f855 3b04 	ldr.w	r3, [r5], #4
 8009004:	4798      	blx	r3
 8009006:	3601      	adds	r6, #1
 8009008:	e7ee      	b.n	8008fe8 <__libc_init_array+0xc>
 800900a:	f855 3b04 	ldr.w	r3, [r5], #4
 800900e:	4798      	blx	r3
 8009010:	3601      	adds	r6, #1
 8009012:	e7f2      	b.n	8008ffa <__libc_init_array+0x1e>
 8009014:	0800b090 	.word	0x0800b090
 8009018:	0800b090 	.word	0x0800b090
 800901c:	0800b090 	.word	0x0800b090
 8009020:	0800b094 	.word	0x0800b094

08009024 <__retarget_lock_init_recursive>:
 8009024:	4770      	bx	lr

08009026 <__retarget_lock_acquire_recursive>:
 8009026:	4770      	bx	lr

08009028 <__retarget_lock_release_recursive>:
 8009028:	4770      	bx	lr
	...

0800902c <__assert_func>:
 800902c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800902e:	4614      	mov	r4, r2
 8009030:	461a      	mov	r2, r3
 8009032:	4b09      	ldr	r3, [pc, #36]	@ (8009058 <__assert_func+0x2c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4605      	mov	r5, r0
 8009038:	68d8      	ldr	r0, [r3, #12]
 800903a:	b14c      	cbz	r4, 8009050 <__assert_func+0x24>
 800903c:	4b07      	ldr	r3, [pc, #28]	@ (800905c <__assert_func+0x30>)
 800903e:	9100      	str	r1, [sp, #0]
 8009040:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009044:	4906      	ldr	r1, [pc, #24]	@ (8009060 <__assert_func+0x34>)
 8009046:	462b      	mov	r3, r5
 8009048:	f000 f9ba 	bl	80093c0 <fiprintf>
 800904c:	f000 f9da 	bl	8009404 <abort>
 8009050:	4b04      	ldr	r3, [pc, #16]	@ (8009064 <__assert_func+0x38>)
 8009052:	461c      	mov	r4, r3
 8009054:	e7f3      	b.n	800903e <__assert_func+0x12>
 8009056:	bf00      	nop
 8009058:	2000019c 	.word	0x2000019c
 800905c:	0800ac27 	.word	0x0800ac27
 8009060:	0800ac34 	.word	0x0800ac34
 8009064:	0800ac62 	.word	0x0800ac62

08009068 <_free_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4605      	mov	r5, r0
 800906c:	2900      	cmp	r1, #0
 800906e:	d041      	beq.n	80090f4 <_free_r+0x8c>
 8009070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009074:	1f0c      	subs	r4, r1, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	bfb8      	it	lt
 800907a:	18e4      	addlt	r4, r4, r3
 800907c:	f000 f8e8 	bl	8009250 <__malloc_lock>
 8009080:	4a1d      	ldr	r2, [pc, #116]	@ (80090f8 <_free_r+0x90>)
 8009082:	6813      	ldr	r3, [r2, #0]
 8009084:	b933      	cbnz	r3, 8009094 <_free_r+0x2c>
 8009086:	6063      	str	r3, [r4, #4]
 8009088:	6014      	str	r4, [r2, #0]
 800908a:	4628      	mov	r0, r5
 800908c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009090:	f000 b8e4 	b.w	800925c <__malloc_unlock>
 8009094:	42a3      	cmp	r3, r4
 8009096:	d908      	bls.n	80090aa <_free_r+0x42>
 8009098:	6820      	ldr	r0, [r4, #0]
 800909a:	1821      	adds	r1, r4, r0
 800909c:	428b      	cmp	r3, r1
 800909e:	bf01      	itttt	eq
 80090a0:	6819      	ldreq	r1, [r3, #0]
 80090a2:	685b      	ldreq	r3, [r3, #4]
 80090a4:	1809      	addeq	r1, r1, r0
 80090a6:	6021      	streq	r1, [r4, #0]
 80090a8:	e7ed      	b.n	8009086 <_free_r+0x1e>
 80090aa:	461a      	mov	r2, r3
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	b10b      	cbz	r3, 80090b4 <_free_r+0x4c>
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	d9fa      	bls.n	80090aa <_free_r+0x42>
 80090b4:	6811      	ldr	r1, [r2, #0]
 80090b6:	1850      	adds	r0, r2, r1
 80090b8:	42a0      	cmp	r0, r4
 80090ba:	d10b      	bne.n	80090d4 <_free_r+0x6c>
 80090bc:	6820      	ldr	r0, [r4, #0]
 80090be:	4401      	add	r1, r0
 80090c0:	1850      	adds	r0, r2, r1
 80090c2:	4283      	cmp	r3, r0
 80090c4:	6011      	str	r1, [r2, #0]
 80090c6:	d1e0      	bne.n	800908a <_free_r+0x22>
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	6053      	str	r3, [r2, #4]
 80090ce:	4408      	add	r0, r1
 80090d0:	6010      	str	r0, [r2, #0]
 80090d2:	e7da      	b.n	800908a <_free_r+0x22>
 80090d4:	d902      	bls.n	80090dc <_free_r+0x74>
 80090d6:	230c      	movs	r3, #12
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	e7d6      	b.n	800908a <_free_r+0x22>
 80090dc:	6820      	ldr	r0, [r4, #0]
 80090de:	1821      	adds	r1, r4, r0
 80090e0:	428b      	cmp	r3, r1
 80090e2:	bf04      	itt	eq
 80090e4:	6819      	ldreq	r1, [r3, #0]
 80090e6:	685b      	ldreq	r3, [r3, #4]
 80090e8:	6063      	str	r3, [r4, #4]
 80090ea:	bf04      	itt	eq
 80090ec:	1809      	addeq	r1, r1, r0
 80090ee:	6021      	streq	r1, [r4, #0]
 80090f0:	6054      	str	r4, [r2, #4]
 80090f2:	e7ca      	b.n	800908a <_free_r+0x22>
 80090f4:	bd38      	pop	{r3, r4, r5, pc}
 80090f6:	bf00      	nop
 80090f8:	20004d2c 	.word	0x20004d2c

080090fc <malloc>:
 80090fc:	4b02      	ldr	r3, [pc, #8]	@ (8009108 <malloc+0xc>)
 80090fe:	4601      	mov	r1, r0
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	f000 b825 	b.w	8009150 <_malloc_r>
 8009106:	bf00      	nop
 8009108:	2000019c 	.word	0x2000019c

0800910c <sbrk_aligned>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	4e0f      	ldr	r6, [pc, #60]	@ (800914c <sbrk_aligned+0x40>)
 8009110:	460c      	mov	r4, r1
 8009112:	6831      	ldr	r1, [r6, #0]
 8009114:	4605      	mov	r5, r0
 8009116:	b911      	cbnz	r1, 800911e <sbrk_aligned+0x12>
 8009118:	f000 f964 	bl	80093e4 <_sbrk_r>
 800911c:	6030      	str	r0, [r6, #0]
 800911e:	4621      	mov	r1, r4
 8009120:	4628      	mov	r0, r5
 8009122:	f000 f95f 	bl	80093e4 <_sbrk_r>
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d103      	bne.n	8009132 <sbrk_aligned+0x26>
 800912a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800912e:	4620      	mov	r0, r4
 8009130:	bd70      	pop	{r4, r5, r6, pc}
 8009132:	1cc4      	adds	r4, r0, #3
 8009134:	f024 0403 	bic.w	r4, r4, #3
 8009138:	42a0      	cmp	r0, r4
 800913a:	d0f8      	beq.n	800912e <sbrk_aligned+0x22>
 800913c:	1a21      	subs	r1, r4, r0
 800913e:	4628      	mov	r0, r5
 8009140:	f000 f950 	bl	80093e4 <_sbrk_r>
 8009144:	3001      	adds	r0, #1
 8009146:	d1f2      	bne.n	800912e <sbrk_aligned+0x22>
 8009148:	e7ef      	b.n	800912a <sbrk_aligned+0x1e>
 800914a:	bf00      	nop
 800914c:	20004d28 	.word	0x20004d28

08009150 <_malloc_r>:
 8009150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009154:	1ccd      	adds	r5, r1, #3
 8009156:	f025 0503 	bic.w	r5, r5, #3
 800915a:	3508      	adds	r5, #8
 800915c:	2d0c      	cmp	r5, #12
 800915e:	bf38      	it	cc
 8009160:	250c      	movcc	r5, #12
 8009162:	2d00      	cmp	r5, #0
 8009164:	4606      	mov	r6, r0
 8009166:	db01      	blt.n	800916c <_malloc_r+0x1c>
 8009168:	42a9      	cmp	r1, r5
 800916a:	d904      	bls.n	8009176 <_malloc_r+0x26>
 800916c:	230c      	movs	r3, #12
 800916e:	6033      	str	r3, [r6, #0]
 8009170:	2000      	movs	r0, #0
 8009172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800924c <_malloc_r+0xfc>
 800917a:	f000 f869 	bl	8009250 <__malloc_lock>
 800917e:	f8d8 3000 	ldr.w	r3, [r8]
 8009182:	461c      	mov	r4, r3
 8009184:	bb44      	cbnz	r4, 80091d8 <_malloc_r+0x88>
 8009186:	4629      	mov	r1, r5
 8009188:	4630      	mov	r0, r6
 800918a:	f7ff ffbf 	bl	800910c <sbrk_aligned>
 800918e:	1c43      	adds	r3, r0, #1
 8009190:	4604      	mov	r4, r0
 8009192:	d158      	bne.n	8009246 <_malloc_r+0xf6>
 8009194:	f8d8 4000 	ldr.w	r4, [r8]
 8009198:	4627      	mov	r7, r4
 800919a:	2f00      	cmp	r7, #0
 800919c:	d143      	bne.n	8009226 <_malloc_r+0xd6>
 800919e:	2c00      	cmp	r4, #0
 80091a0:	d04b      	beq.n	800923a <_malloc_r+0xea>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	4639      	mov	r1, r7
 80091a6:	4630      	mov	r0, r6
 80091a8:	eb04 0903 	add.w	r9, r4, r3
 80091ac:	f000 f91a 	bl	80093e4 <_sbrk_r>
 80091b0:	4581      	cmp	r9, r0
 80091b2:	d142      	bne.n	800923a <_malloc_r+0xea>
 80091b4:	6821      	ldr	r1, [r4, #0]
 80091b6:	1a6d      	subs	r5, r5, r1
 80091b8:	4629      	mov	r1, r5
 80091ba:	4630      	mov	r0, r6
 80091bc:	f7ff ffa6 	bl	800910c <sbrk_aligned>
 80091c0:	3001      	adds	r0, #1
 80091c2:	d03a      	beq.n	800923a <_malloc_r+0xea>
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	442b      	add	r3, r5
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	f8d8 3000 	ldr.w	r3, [r8]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	bb62      	cbnz	r2, 800922c <_malloc_r+0xdc>
 80091d2:	f8c8 7000 	str.w	r7, [r8]
 80091d6:	e00f      	b.n	80091f8 <_malloc_r+0xa8>
 80091d8:	6822      	ldr	r2, [r4, #0]
 80091da:	1b52      	subs	r2, r2, r5
 80091dc:	d420      	bmi.n	8009220 <_malloc_r+0xd0>
 80091de:	2a0b      	cmp	r2, #11
 80091e0:	d917      	bls.n	8009212 <_malloc_r+0xc2>
 80091e2:	1961      	adds	r1, r4, r5
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	6025      	str	r5, [r4, #0]
 80091e8:	bf18      	it	ne
 80091ea:	6059      	strne	r1, [r3, #4]
 80091ec:	6863      	ldr	r3, [r4, #4]
 80091ee:	bf08      	it	eq
 80091f0:	f8c8 1000 	streq.w	r1, [r8]
 80091f4:	5162      	str	r2, [r4, r5]
 80091f6:	604b      	str	r3, [r1, #4]
 80091f8:	4630      	mov	r0, r6
 80091fa:	f000 f82f 	bl	800925c <__malloc_unlock>
 80091fe:	f104 000b 	add.w	r0, r4, #11
 8009202:	1d23      	adds	r3, r4, #4
 8009204:	f020 0007 	bic.w	r0, r0, #7
 8009208:	1ac2      	subs	r2, r0, r3
 800920a:	bf1c      	itt	ne
 800920c:	1a1b      	subne	r3, r3, r0
 800920e:	50a3      	strne	r3, [r4, r2]
 8009210:	e7af      	b.n	8009172 <_malloc_r+0x22>
 8009212:	6862      	ldr	r2, [r4, #4]
 8009214:	42a3      	cmp	r3, r4
 8009216:	bf0c      	ite	eq
 8009218:	f8c8 2000 	streq.w	r2, [r8]
 800921c:	605a      	strne	r2, [r3, #4]
 800921e:	e7eb      	b.n	80091f8 <_malloc_r+0xa8>
 8009220:	4623      	mov	r3, r4
 8009222:	6864      	ldr	r4, [r4, #4]
 8009224:	e7ae      	b.n	8009184 <_malloc_r+0x34>
 8009226:	463c      	mov	r4, r7
 8009228:	687f      	ldr	r7, [r7, #4]
 800922a:	e7b6      	b.n	800919a <_malloc_r+0x4a>
 800922c:	461a      	mov	r2, r3
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	42a3      	cmp	r3, r4
 8009232:	d1fb      	bne.n	800922c <_malloc_r+0xdc>
 8009234:	2300      	movs	r3, #0
 8009236:	6053      	str	r3, [r2, #4]
 8009238:	e7de      	b.n	80091f8 <_malloc_r+0xa8>
 800923a:	230c      	movs	r3, #12
 800923c:	6033      	str	r3, [r6, #0]
 800923e:	4630      	mov	r0, r6
 8009240:	f000 f80c 	bl	800925c <__malloc_unlock>
 8009244:	e794      	b.n	8009170 <_malloc_r+0x20>
 8009246:	6005      	str	r5, [r0, #0]
 8009248:	e7d6      	b.n	80091f8 <_malloc_r+0xa8>
 800924a:	bf00      	nop
 800924c:	20004d2c 	.word	0x20004d2c

08009250 <__malloc_lock>:
 8009250:	4801      	ldr	r0, [pc, #4]	@ (8009258 <__malloc_lock+0x8>)
 8009252:	f7ff bee8 	b.w	8009026 <__retarget_lock_acquire_recursive>
 8009256:	bf00      	nop
 8009258:	20004d24 	.word	0x20004d24

0800925c <__malloc_unlock>:
 800925c:	4801      	ldr	r0, [pc, #4]	@ (8009264 <__malloc_unlock+0x8>)
 800925e:	f7ff bee3 	b.w	8009028 <__retarget_lock_release_recursive>
 8009262:	bf00      	nop
 8009264:	20004d24 	.word	0x20004d24

08009268 <__sflush_r>:
 8009268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800926c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009270:	0716      	lsls	r6, r2, #28
 8009272:	4605      	mov	r5, r0
 8009274:	460c      	mov	r4, r1
 8009276:	d454      	bmi.n	8009322 <__sflush_r+0xba>
 8009278:	684b      	ldr	r3, [r1, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	dc02      	bgt.n	8009284 <__sflush_r+0x1c>
 800927e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009280:	2b00      	cmp	r3, #0
 8009282:	dd48      	ble.n	8009316 <__sflush_r+0xae>
 8009284:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009286:	2e00      	cmp	r6, #0
 8009288:	d045      	beq.n	8009316 <__sflush_r+0xae>
 800928a:	2300      	movs	r3, #0
 800928c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009290:	682f      	ldr	r7, [r5, #0]
 8009292:	6a21      	ldr	r1, [r4, #32]
 8009294:	602b      	str	r3, [r5, #0]
 8009296:	d030      	beq.n	80092fa <__sflush_r+0x92>
 8009298:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	0759      	lsls	r1, r3, #29
 800929e:	d505      	bpl.n	80092ac <__sflush_r+0x44>
 80092a0:	6863      	ldr	r3, [r4, #4]
 80092a2:	1ad2      	subs	r2, r2, r3
 80092a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092a6:	b10b      	cbz	r3, 80092ac <__sflush_r+0x44>
 80092a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092aa:	1ad2      	subs	r2, r2, r3
 80092ac:	2300      	movs	r3, #0
 80092ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092b0:	6a21      	ldr	r1, [r4, #32]
 80092b2:	4628      	mov	r0, r5
 80092b4:	47b0      	blx	r6
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	d106      	bne.n	80092ca <__sflush_r+0x62>
 80092bc:	6829      	ldr	r1, [r5, #0]
 80092be:	291d      	cmp	r1, #29
 80092c0:	d82b      	bhi.n	800931a <__sflush_r+0xb2>
 80092c2:	4a2a      	ldr	r2, [pc, #168]	@ (800936c <__sflush_r+0x104>)
 80092c4:	40ca      	lsrs	r2, r1
 80092c6:	07d6      	lsls	r6, r2, #31
 80092c8:	d527      	bpl.n	800931a <__sflush_r+0xb2>
 80092ca:	2200      	movs	r2, #0
 80092cc:	6062      	str	r2, [r4, #4]
 80092ce:	04d9      	lsls	r1, r3, #19
 80092d0:	6922      	ldr	r2, [r4, #16]
 80092d2:	6022      	str	r2, [r4, #0]
 80092d4:	d504      	bpl.n	80092e0 <__sflush_r+0x78>
 80092d6:	1c42      	adds	r2, r0, #1
 80092d8:	d101      	bne.n	80092de <__sflush_r+0x76>
 80092da:	682b      	ldr	r3, [r5, #0]
 80092dc:	b903      	cbnz	r3, 80092e0 <__sflush_r+0x78>
 80092de:	6560      	str	r0, [r4, #84]	@ 0x54
 80092e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092e2:	602f      	str	r7, [r5, #0]
 80092e4:	b1b9      	cbz	r1, 8009316 <__sflush_r+0xae>
 80092e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092ea:	4299      	cmp	r1, r3
 80092ec:	d002      	beq.n	80092f4 <__sflush_r+0x8c>
 80092ee:	4628      	mov	r0, r5
 80092f0:	f7ff feba 	bl	8009068 <_free_r>
 80092f4:	2300      	movs	r3, #0
 80092f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80092f8:	e00d      	b.n	8009316 <__sflush_r+0xae>
 80092fa:	2301      	movs	r3, #1
 80092fc:	4628      	mov	r0, r5
 80092fe:	47b0      	blx	r6
 8009300:	4602      	mov	r2, r0
 8009302:	1c50      	adds	r0, r2, #1
 8009304:	d1c9      	bne.n	800929a <__sflush_r+0x32>
 8009306:	682b      	ldr	r3, [r5, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d0c6      	beq.n	800929a <__sflush_r+0x32>
 800930c:	2b1d      	cmp	r3, #29
 800930e:	d001      	beq.n	8009314 <__sflush_r+0xac>
 8009310:	2b16      	cmp	r3, #22
 8009312:	d11e      	bne.n	8009352 <__sflush_r+0xea>
 8009314:	602f      	str	r7, [r5, #0]
 8009316:	2000      	movs	r0, #0
 8009318:	e022      	b.n	8009360 <__sflush_r+0xf8>
 800931a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800931e:	b21b      	sxth	r3, r3
 8009320:	e01b      	b.n	800935a <__sflush_r+0xf2>
 8009322:	690f      	ldr	r7, [r1, #16]
 8009324:	2f00      	cmp	r7, #0
 8009326:	d0f6      	beq.n	8009316 <__sflush_r+0xae>
 8009328:	0793      	lsls	r3, r2, #30
 800932a:	680e      	ldr	r6, [r1, #0]
 800932c:	bf08      	it	eq
 800932e:	694b      	ldreq	r3, [r1, #20]
 8009330:	600f      	str	r7, [r1, #0]
 8009332:	bf18      	it	ne
 8009334:	2300      	movne	r3, #0
 8009336:	eba6 0807 	sub.w	r8, r6, r7
 800933a:	608b      	str	r3, [r1, #8]
 800933c:	f1b8 0f00 	cmp.w	r8, #0
 8009340:	dde9      	ble.n	8009316 <__sflush_r+0xae>
 8009342:	6a21      	ldr	r1, [r4, #32]
 8009344:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009346:	4643      	mov	r3, r8
 8009348:	463a      	mov	r2, r7
 800934a:	4628      	mov	r0, r5
 800934c:	47b0      	blx	r6
 800934e:	2800      	cmp	r0, #0
 8009350:	dc08      	bgt.n	8009364 <__sflush_r+0xfc>
 8009352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800935a:	81a3      	strh	r3, [r4, #12]
 800935c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009364:	4407      	add	r7, r0
 8009366:	eba8 0800 	sub.w	r8, r8, r0
 800936a:	e7e7      	b.n	800933c <__sflush_r+0xd4>
 800936c:	20400001 	.word	0x20400001

08009370 <_fflush_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	690b      	ldr	r3, [r1, #16]
 8009374:	4605      	mov	r5, r0
 8009376:	460c      	mov	r4, r1
 8009378:	b913      	cbnz	r3, 8009380 <_fflush_r+0x10>
 800937a:	2500      	movs	r5, #0
 800937c:	4628      	mov	r0, r5
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	b118      	cbz	r0, 800938a <_fflush_r+0x1a>
 8009382:	6a03      	ldr	r3, [r0, #32]
 8009384:	b90b      	cbnz	r3, 800938a <_fflush_r+0x1a>
 8009386:	f7ff fd49 	bl	8008e1c <__sinit>
 800938a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d0f3      	beq.n	800937a <_fflush_r+0xa>
 8009392:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009394:	07d0      	lsls	r0, r2, #31
 8009396:	d404      	bmi.n	80093a2 <_fflush_r+0x32>
 8009398:	0599      	lsls	r1, r3, #22
 800939a:	d402      	bmi.n	80093a2 <_fflush_r+0x32>
 800939c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800939e:	f7ff fe42 	bl	8009026 <__retarget_lock_acquire_recursive>
 80093a2:	4628      	mov	r0, r5
 80093a4:	4621      	mov	r1, r4
 80093a6:	f7ff ff5f 	bl	8009268 <__sflush_r>
 80093aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093ac:	07da      	lsls	r2, r3, #31
 80093ae:	4605      	mov	r5, r0
 80093b0:	d4e4      	bmi.n	800937c <_fflush_r+0xc>
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	059b      	lsls	r3, r3, #22
 80093b6:	d4e1      	bmi.n	800937c <_fflush_r+0xc>
 80093b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ba:	f7ff fe35 	bl	8009028 <__retarget_lock_release_recursive>
 80093be:	e7dd      	b.n	800937c <_fflush_r+0xc>

080093c0 <fiprintf>:
 80093c0:	b40e      	push	{r1, r2, r3}
 80093c2:	b503      	push	{r0, r1, lr}
 80093c4:	4601      	mov	r1, r0
 80093c6:	ab03      	add	r3, sp, #12
 80093c8:	4805      	ldr	r0, [pc, #20]	@ (80093e0 <fiprintf+0x20>)
 80093ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ce:	6800      	ldr	r0, [r0, #0]
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	f000 f847 	bl	8009464 <_vfiprintf_r>
 80093d6:	b002      	add	sp, #8
 80093d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093dc:	b003      	add	sp, #12
 80093de:	4770      	bx	lr
 80093e0:	2000019c 	.word	0x2000019c

080093e4 <_sbrk_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4d06      	ldr	r5, [pc, #24]	@ (8009400 <_sbrk_r+0x1c>)
 80093e8:	2300      	movs	r3, #0
 80093ea:	4604      	mov	r4, r0
 80093ec:	4608      	mov	r0, r1
 80093ee:	602b      	str	r3, [r5, #0]
 80093f0:	f7f8 f8fc 	bl	80015ec <_sbrk>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d102      	bne.n	80093fe <_sbrk_r+0x1a>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	b103      	cbz	r3, 80093fe <_sbrk_r+0x1a>
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	20004d20 	.word	0x20004d20

08009404 <abort>:
 8009404:	b508      	push	{r3, lr}
 8009406:	2006      	movs	r0, #6
 8009408:	f000 fb8c 	bl	8009b24 <raise>
 800940c:	2001      	movs	r0, #1
 800940e:	f7f8 f875 	bl	80014fc <_exit>

08009412 <__sfputc_r>:
 8009412:	6893      	ldr	r3, [r2, #8]
 8009414:	3b01      	subs	r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	b410      	push	{r4}
 800941a:	6093      	str	r3, [r2, #8]
 800941c:	da08      	bge.n	8009430 <__sfputc_r+0x1e>
 800941e:	6994      	ldr	r4, [r2, #24]
 8009420:	42a3      	cmp	r3, r4
 8009422:	db01      	blt.n	8009428 <__sfputc_r+0x16>
 8009424:	290a      	cmp	r1, #10
 8009426:	d103      	bne.n	8009430 <__sfputc_r+0x1e>
 8009428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800942c:	f000 babe 	b.w	80099ac <__swbuf_r>
 8009430:	6813      	ldr	r3, [r2, #0]
 8009432:	1c58      	adds	r0, r3, #1
 8009434:	6010      	str	r0, [r2, #0]
 8009436:	7019      	strb	r1, [r3, #0]
 8009438:	4608      	mov	r0, r1
 800943a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800943e:	4770      	bx	lr

08009440 <__sfputs_r>:
 8009440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009442:	4606      	mov	r6, r0
 8009444:	460f      	mov	r7, r1
 8009446:	4614      	mov	r4, r2
 8009448:	18d5      	adds	r5, r2, r3
 800944a:	42ac      	cmp	r4, r5
 800944c:	d101      	bne.n	8009452 <__sfputs_r+0x12>
 800944e:	2000      	movs	r0, #0
 8009450:	e007      	b.n	8009462 <__sfputs_r+0x22>
 8009452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009456:	463a      	mov	r2, r7
 8009458:	4630      	mov	r0, r6
 800945a:	f7ff ffda 	bl	8009412 <__sfputc_r>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	d1f3      	bne.n	800944a <__sfputs_r+0xa>
 8009462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009464 <_vfiprintf_r>:
 8009464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009468:	460d      	mov	r5, r1
 800946a:	b09d      	sub	sp, #116	@ 0x74
 800946c:	4614      	mov	r4, r2
 800946e:	4698      	mov	r8, r3
 8009470:	4606      	mov	r6, r0
 8009472:	b118      	cbz	r0, 800947c <_vfiprintf_r+0x18>
 8009474:	6a03      	ldr	r3, [r0, #32]
 8009476:	b90b      	cbnz	r3, 800947c <_vfiprintf_r+0x18>
 8009478:	f7ff fcd0 	bl	8008e1c <__sinit>
 800947c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800947e:	07d9      	lsls	r1, r3, #31
 8009480:	d405      	bmi.n	800948e <_vfiprintf_r+0x2a>
 8009482:	89ab      	ldrh	r3, [r5, #12]
 8009484:	059a      	lsls	r2, r3, #22
 8009486:	d402      	bmi.n	800948e <_vfiprintf_r+0x2a>
 8009488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800948a:	f7ff fdcc 	bl	8009026 <__retarget_lock_acquire_recursive>
 800948e:	89ab      	ldrh	r3, [r5, #12]
 8009490:	071b      	lsls	r3, r3, #28
 8009492:	d501      	bpl.n	8009498 <_vfiprintf_r+0x34>
 8009494:	692b      	ldr	r3, [r5, #16]
 8009496:	b99b      	cbnz	r3, 80094c0 <_vfiprintf_r+0x5c>
 8009498:	4629      	mov	r1, r5
 800949a:	4630      	mov	r0, r6
 800949c:	f000 fac4 	bl	8009a28 <__swsetup_r>
 80094a0:	b170      	cbz	r0, 80094c0 <_vfiprintf_r+0x5c>
 80094a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094a4:	07dc      	lsls	r4, r3, #31
 80094a6:	d504      	bpl.n	80094b2 <_vfiprintf_r+0x4e>
 80094a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094ac:	b01d      	add	sp, #116	@ 0x74
 80094ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b2:	89ab      	ldrh	r3, [r5, #12]
 80094b4:	0598      	lsls	r0, r3, #22
 80094b6:	d4f7      	bmi.n	80094a8 <_vfiprintf_r+0x44>
 80094b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094ba:	f7ff fdb5 	bl	8009028 <__retarget_lock_release_recursive>
 80094be:	e7f3      	b.n	80094a8 <_vfiprintf_r+0x44>
 80094c0:	2300      	movs	r3, #0
 80094c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80094c4:	2320      	movs	r3, #32
 80094c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80094ce:	2330      	movs	r3, #48	@ 0x30
 80094d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009680 <_vfiprintf_r+0x21c>
 80094d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094d8:	f04f 0901 	mov.w	r9, #1
 80094dc:	4623      	mov	r3, r4
 80094de:	469a      	mov	sl, r3
 80094e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094e4:	b10a      	cbz	r2, 80094ea <_vfiprintf_r+0x86>
 80094e6:	2a25      	cmp	r2, #37	@ 0x25
 80094e8:	d1f9      	bne.n	80094de <_vfiprintf_r+0x7a>
 80094ea:	ebba 0b04 	subs.w	fp, sl, r4
 80094ee:	d00b      	beq.n	8009508 <_vfiprintf_r+0xa4>
 80094f0:	465b      	mov	r3, fp
 80094f2:	4622      	mov	r2, r4
 80094f4:	4629      	mov	r1, r5
 80094f6:	4630      	mov	r0, r6
 80094f8:	f7ff ffa2 	bl	8009440 <__sfputs_r>
 80094fc:	3001      	adds	r0, #1
 80094fe:	f000 80a7 	beq.w	8009650 <_vfiprintf_r+0x1ec>
 8009502:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009504:	445a      	add	r2, fp
 8009506:	9209      	str	r2, [sp, #36]	@ 0x24
 8009508:	f89a 3000 	ldrb.w	r3, [sl]
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 809f 	beq.w	8009650 <_vfiprintf_r+0x1ec>
 8009512:	2300      	movs	r3, #0
 8009514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800951c:	f10a 0a01 	add.w	sl, sl, #1
 8009520:	9304      	str	r3, [sp, #16]
 8009522:	9307      	str	r3, [sp, #28]
 8009524:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009528:	931a      	str	r3, [sp, #104]	@ 0x68
 800952a:	4654      	mov	r4, sl
 800952c:	2205      	movs	r2, #5
 800952e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009532:	4853      	ldr	r0, [pc, #332]	@ (8009680 <_vfiprintf_r+0x21c>)
 8009534:	f7f6 fe54 	bl	80001e0 <memchr>
 8009538:	9a04      	ldr	r2, [sp, #16]
 800953a:	b9d8      	cbnz	r0, 8009574 <_vfiprintf_r+0x110>
 800953c:	06d1      	lsls	r1, r2, #27
 800953e:	bf44      	itt	mi
 8009540:	2320      	movmi	r3, #32
 8009542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009546:	0713      	lsls	r3, r2, #28
 8009548:	bf44      	itt	mi
 800954a:	232b      	movmi	r3, #43	@ 0x2b
 800954c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009550:	f89a 3000 	ldrb.w	r3, [sl]
 8009554:	2b2a      	cmp	r3, #42	@ 0x2a
 8009556:	d015      	beq.n	8009584 <_vfiprintf_r+0x120>
 8009558:	9a07      	ldr	r2, [sp, #28]
 800955a:	4654      	mov	r4, sl
 800955c:	2000      	movs	r0, #0
 800955e:	f04f 0c0a 	mov.w	ip, #10
 8009562:	4621      	mov	r1, r4
 8009564:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009568:	3b30      	subs	r3, #48	@ 0x30
 800956a:	2b09      	cmp	r3, #9
 800956c:	d94b      	bls.n	8009606 <_vfiprintf_r+0x1a2>
 800956e:	b1b0      	cbz	r0, 800959e <_vfiprintf_r+0x13a>
 8009570:	9207      	str	r2, [sp, #28]
 8009572:	e014      	b.n	800959e <_vfiprintf_r+0x13a>
 8009574:	eba0 0308 	sub.w	r3, r0, r8
 8009578:	fa09 f303 	lsl.w	r3, r9, r3
 800957c:	4313      	orrs	r3, r2
 800957e:	9304      	str	r3, [sp, #16]
 8009580:	46a2      	mov	sl, r4
 8009582:	e7d2      	b.n	800952a <_vfiprintf_r+0xc6>
 8009584:	9b03      	ldr	r3, [sp, #12]
 8009586:	1d19      	adds	r1, r3, #4
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	9103      	str	r1, [sp, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	bfbb      	ittet	lt
 8009590:	425b      	neglt	r3, r3
 8009592:	f042 0202 	orrlt.w	r2, r2, #2
 8009596:	9307      	strge	r3, [sp, #28]
 8009598:	9307      	strlt	r3, [sp, #28]
 800959a:	bfb8      	it	lt
 800959c:	9204      	strlt	r2, [sp, #16]
 800959e:	7823      	ldrb	r3, [r4, #0]
 80095a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80095a2:	d10a      	bne.n	80095ba <_vfiprintf_r+0x156>
 80095a4:	7863      	ldrb	r3, [r4, #1]
 80095a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80095a8:	d132      	bne.n	8009610 <_vfiprintf_r+0x1ac>
 80095aa:	9b03      	ldr	r3, [sp, #12]
 80095ac:	1d1a      	adds	r2, r3, #4
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	9203      	str	r2, [sp, #12]
 80095b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095b6:	3402      	adds	r4, #2
 80095b8:	9305      	str	r3, [sp, #20]
 80095ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009690 <_vfiprintf_r+0x22c>
 80095be:	7821      	ldrb	r1, [r4, #0]
 80095c0:	2203      	movs	r2, #3
 80095c2:	4650      	mov	r0, sl
 80095c4:	f7f6 fe0c 	bl	80001e0 <memchr>
 80095c8:	b138      	cbz	r0, 80095da <_vfiprintf_r+0x176>
 80095ca:	9b04      	ldr	r3, [sp, #16]
 80095cc:	eba0 000a 	sub.w	r0, r0, sl
 80095d0:	2240      	movs	r2, #64	@ 0x40
 80095d2:	4082      	lsls	r2, r0
 80095d4:	4313      	orrs	r3, r2
 80095d6:	3401      	adds	r4, #1
 80095d8:	9304      	str	r3, [sp, #16]
 80095da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095de:	4829      	ldr	r0, [pc, #164]	@ (8009684 <_vfiprintf_r+0x220>)
 80095e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095e4:	2206      	movs	r2, #6
 80095e6:	f7f6 fdfb 	bl	80001e0 <memchr>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d03f      	beq.n	800966e <_vfiprintf_r+0x20a>
 80095ee:	4b26      	ldr	r3, [pc, #152]	@ (8009688 <_vfiprintf_r+0x224>)
 80095f0:	bb1b      	cbnz	r3, 800963a <_vfiprintf_r+0x1d6>
 80095f2:	9b03      	ldr	r3, [sp, #12]
 80095f4:	3307      	adds	r3, #7
 80095f6:	f023 0307 	bic.w	r3, r3, #7
 80095fa:	3308      	adds	r3, #8
 80095fc:	9303      	str	r3, [sp, #12]
 80095fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009600:	443b      	add	r3, r7
 8009602:	9309      	str	r3, [sp, #36]	@ 0x24
 8009604:	e76a      	b.n	80094dc <_vfiprintf_r+0x78>
 8009606:	fb0c 3202 	mla	r2, ip, r2, r3
 800960a:	460c      	mov	r4, r1
 800960c:	2001      	movs	r0, #1
 800960e:	e7a8      	b.n	8009562 <_vfiprintf_r+0xfe>
 8009610:	2300      	movs	r3, #0
 8009612:	3401      	adds	r4, #1
 8009614:	9305      	str	r3, [sp, #20]
 8009616:	4619      	mov	r1, r3
 8009618:	f04f 0c0a 	mov.w	ip, #10
 800961c:	4620      	mov	r0, r4
 800961e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009622:	3a30      	subs	r2, #48	@ 0x30
 8009624:	2a09      	cmp	r2, #9
 8009626:	d903      	bls.n	8009630 <_vfiprintf_r+0x1cc>
 8009628:	2b00      	cmp	r3, #0
 800962a:	d0c6      	beq.n	80095ba <_vfiprintf_r+0x156>
 800962c:	9105      	str	r1, [sp, #20]
 800962e:	e7c4      	b.n	80095ba <_vfiprintf_r+0x156>
 8009630:	fb0c 2101 	mla	r1, ip, r1, r2
 8009634:	4604      	mov	r4, r0
 8009636:	2301      	movs	r3, #1
 8009638:	e7f0      	b.n	800961c <_vfiprintf_r+0x1b8>
 800963a:	ab03      	add	r3, sp, #12
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	462a      	mov	r2, r5
 8009640:	4b12      	ldr	r3, [pc, #72]	@ (800968c <_vfiprintf_r+0x228>)
 8009642:	a904      	add	r1, sp, #16
 8009644:	4630      	mov	r0, r6
 8009646:	f3af 8000 	nop.w
 800964a:	4607      	mov	r7, r0
 800964c:	1c78      	adds	r0, r7, #1
 800964e:	d1d6      	bne.n	80095fe <_vfiprintf_r+0x19a>
 8009650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009652:	07d9      	lsls	r1, r3, #31
 8009654:	d405      	bmi.n	8009662 <_vfiprintf_r+0x1fe>
 8009656:	89ab      	ldrh	r3, [r5, #12]
 8009658:	059a      	lsls	r2, r3, #22
 800965a:	d402      	bmi.n	8009662 <_vfiprintf_r+0x1fe>
 800965c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800965e:	f7ff fce3 	bl	8009028 <__retarget_lock_release_recursive>
 8009662:	89ab      	ldrh	r3, [r5, #12]
 8009664:	065b      	lsls	r3, r3, #25
 8009666:	f53f af1f 	bmi.w	80094a8 <_vfiprintf_r+0x44>
 800966a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800966c:	e71e      	b.n	80094ac <_vfiprintf_r+0x48>
 800966e:	ab03      	add	r3, sp, #12
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	462a      	mov	r2, r5
 8009674:	4b05      	ldr	r3, [pc, #20]	@ (800968c <_vfiprintf_r+0x228>)
 8009676:	a904      	add	r1, sp, #16
 8009678:	4630      	mov	r0, r6
 800967a:	f000 f879 	bl	8009770 <_printf_i>
 800967e:	e7e4      	b.n	800964a <_vfiprintf_r+0x1e6>
 8009680:	0800ac63 	.word	0x0800ac63
 8009684:	0800ac6d 	.word	0x0800ac6d
 8009688:	00000000 	.word	0x00000000
 800968c:	08009441 	.word	0x08009441
 8009690:	0800ac69 	.word	0x0800ac69

08009694 <_printf_common>:
 8009694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009698:	4616      	mov	r6, r2
 800969a:	4698      	mov	r8, r3
 800969c:	688a      	ldr	r2, [r1, #8]
 800969e:	690b      	ldr	r3, [r1, #16]
 80096a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096a4:	4293      	cmp	r3, r2
 80096a6:	bfb8      	it	lt
 80096a8:	4613      	movlt	r3, r2
 80096aa:	6033      	str	r3, [r6, #0]
 80096ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096b0:	4607      	mov	r7, r0
 80096b2:	460c      	mov	r4, r1
 80096b4:	b10a      	cbz	r2, 80096ba <_printf_common+0x26>
 80096b6:	3301      	adds	r3, #1
 80096b8:	6033      	str	r3, [r6, #0]
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	0699      	lsls	r1, r3, #26
 80096be:	bf42      	ittt	mi
 80096c0:	6833      	ldrmi	r3, [r6, #0]
 80096c2:	3302      	addmi	r3, #2
 80096c4:	6033      	strmi	r3, [r6, #0]
 80096c6:	6825      	ldr	r5, [r4, #0]
 80096c8:	f015 0506 	ands.w	r5, r5, #6
 80096cc:	d106      	bne.n	80096dc <_printf_common+0x48>
 80096ce:	f104 0a19 	add.w	sl, r4, #25
 80096d2:	68e3      	ldr	r3, [r4, #12]
 80096d4:	6832      	ldr	r2, [r6, #0]
 80096d6:	1a9b      	subs	r3, r3, r2
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dc26      	bgt.n	800972a <_printf_common+0x96>
 80096dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096e0:	6822      	ldr	r2, [r4, #0]
 80096e2:	3b00      	subs	r3, #0
 80096e4:	bf18      	it	ne
 80096e6:	2301      	movne	r3, #1
 80096e8:	0692      	lsls	r2, r2, #26
 80096ea:	d42b      	bmi.n	8009744 <_printf_common+0xb0>
 80096ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096f0:	4641      	mov	r1, r8
 80096f2:	4638      	mov	r0, r7
 80096f4:	47c8      	blx	r9
 80096f6:	3001      	adds	r0, #1
 80096f8:	d01e      	beq.n	8009738 <_printf_common+0xa4>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	6922      	ldr	r2, [r4, #16]
 80096fe:	f003 0306 	and.w	r3, r3, #6
 8009702:	2b04      	cmp	r3, #4
 8009704:	bf02      	ittt	eq
 8009706:	68e5      	ldreq	r5, [r4, #12]
 8009708:	6833      	ldreq	r3, [r6, #0]
 800970a:	1aed      	subeq	r5, r5, r3
 800970c:	68a3      	ldr	r3, [r4, #8]
 800970e:	bf0c      	ite	eq
 8009710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009714:	2500      	movne	r5, #0
 8009716:	4293      	cmp	r3, r2
 8009718:	bfc4      	itt	gt
 800971a:	1a9b      	subgt	r3, r3, r2
 800971c:	18ed      	addgt	r5, r5, r3
 800971e:	2600      	movs	r6, #0
 8009720:	341a      	adds	r4, #26
 8009722:	42b5      	cmp	r5, r6
 8009724:	d11a      	bne.n	800975c <_printf_common+0xc8>
 8009726:	2000      	movs	r0, #0
 8009728:	e008      	b.n	800973c <_printf_common+0xa8>
 800972a:	2301      	movs	r3, #1
 800972c:	4652      	mov	r2, sl
 800972e:	4641      	mov	r1, r8
 8009730:	4638      	mov	r0, r7
 8009732:	47c8      	blx	r9
 8009734:	3001      	adds	r0, #1
 8009736:	d103      	bne.n	8009740 <_printf_common+0xac>
 8009738:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800973c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009740:	3501      	adds	r5, #1
 8009742:	e7c6      	b.n	80096d2 <_printf_common+0x3e>
 8009744:	18e1      	adds	r1, r4, r3
 8009746:	1c5a      	adds	r2, r3, #1
 8009748:	2030      	movs	r0, #48	@ 0x30
 800974a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800974e:	4422      	add	r2, r4
 8009750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009758:	3302      	adds	r3, #2
 800975a:	e7c7      	b.n	80096ec <_printf_common+0x58>
 800975c:	2301      	movs	r3, #1
 800975e:	4622      	mov	r2, r4
 8009760:	4641      	mov	r1, r8
 8009762:	4638      	mov	r0, r7
 8009764:	47c8      	blx	r9
 8009766:	3001      	adds	r0, #1
 8009768:	d0e6      	beq.n	8009738 <_printf_common+0xa4>
 800976a:	3601      	adds	r6, #1
 800976c:	e7d9      	b.n	8009722 <_printf_common+0x8e>
	...

08009770 <_printf_i>:
 8009770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009774:	7e0f      	ldrb	r7, [r1, #24]
 8009776:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009778:	2f78      	cmp	r7, #120	@ 0x78
 800977a:	4691      	mov	r9, r2
 800977c:	4680      	mov	r8, r0
 800977e:	460c      	mov	r4, r1
 8009780:	469a      	mov	sl, r3
 8009782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009786:	d807      	bhi.n	8009798 <_printf_i+0x28>
 8009788:	2f62      	cmp	r7, #98	@ 0x62
 800978a:	d80a      	bhi.n	80097a2 <_printf_i+0x32>
 800978c:	2f00      	cmp	r7, #0
 800978e:	f000 80d1 	beq.w	8009934 <_printf_i+0x1c4>
 8009792:	2f58      	cmp	r7, #88	@ 0x58
 8009794:	f000 80b8 	beq.w	8009908 <_printf_i+0x198>
 8009798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800979c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097a0:	e03a      	b.n	8009818 <_printf_i+0xa8>
 80097a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097a6:	2b15      	cmp	r3, #21
 80097a8:	d8f6      	bhi.n	8009798 <_printf_i+0x28>
 80097aa:	a101      	add	r1, pc, #4	@ (adr r1, 80097b0 <_printf_i+0x40>)
 80097ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097b0:	08009809 	.word	0x08009809
 80097b4:	0800981d 	.word	0x0800981d
 80097b8:	08009799 	.word	0x08009799
 80097bc:	08009799 	.word	0x08009799
 80097c0:	08009799 	.word	0x08009799
 80097c4:	08009799 	.word	0x08009799
 80097c8:	0800981d 	.word	0x0800981d
 80097cc:	08009799 	.word	0x08009799
 80097d0:	08009799 	.word	0x08009799
 80097d4:	08009799 	.word	0x08009799
 80097d8:	08009799 	.word	0x08009799
 80097dc:	0800991b 	.word	0x0800991b
 80097e0:	08009847 	.word	0x08009847
 80097e4:	080098d5 	.word	0x080098d5
 80097e8:	08009799 	.word	0x08009799
 80097ec:	08009799 	.word	0x08009799
 80097f0:	0800993d 	.word	0x0800993d
 80097f4:	08009799 	.word	0x08009799
 80097f8:	08009847 	.word	0x08009847
 80097fc:	08009799 	.word	0x08009799
 8009800:	08009799 	.word	0x08009799
 8009804:	080098dd 	.word	0x080098dd
 8009808:	6833      	ldr	r3, [r6, #0]
 800980a:	1d1a      	adds	r2, r3, #4
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6032      	str	r2, [r6, #0]
 8009810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009818:	2301      	movs	r3, #1
 800981a:	e09c      	b.n	8009956 <_printf_i+0x1e6>
 800981c:	6833      	ldr	r3, [r6, #0]
 800981e:	6820      	ldr	r0, [r4, #0]
 8009820:	1d19      	adds	r1, r3, #4
 8009822:	6031      	str	r1, [r6, #0]
 8009824:	0606      	lsls	r6, r0, #24
 8009826:	d501      	bpl.n	800982c <_printf_i+0xbc>
 8009828:	681d      	ldr	r5, [r3, #0]
 800982a:	e003      	b.n	8009834 <_printf_i+0xc4>
 800982c:	0645      	lsls	r5, r0, #25
 800982e:	d5fb      	bpl.n	8009828 <_printf_i+0xb8>
 8009830:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009834:	2d00      	cmp	r5, #0
 8009836:	da03      	bge.n	8009840 <_printf_i+0xd0>
 8009838:	232d      	movs	r3, #45	@ 0x2d
 800983a:	426d      	negs	r5, r5
 800983c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009840:	4858      	ldr	r0, [pc, #352]	@ (80099a4 <_printf_i+0x234>)
 8009842:	230a      	movs	r3, #10
 8009844:	e011      	b.n	800986a <_printf_i+0xfa>
 8009846:	6821      	ldr	r1, [r4, #0]
 8009848:	6833      	ldr	r3, [r6, #0]
 800984a:	0608      	lsls	r0, r1, #24
 800984c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009850:	d402      	bmi.n	8009858 <_printf_i+0xe8>
 8009852:	0649      	lsls	r1, r1, #25
 8009854:	bf48      	it	mi
 8009856:	b2ad      	uxthmi	r5, r5
 8009858:	2f6f      	cmp	r7, #111	@ 0x6f
 800985a:	4852      	ldr	r0, [pc, #328]	@ (80099a4 <_printf_i+0x234>)
 800985c:	6033      	str	r3, [r6, #0]
 800985e:	bf14      	ite	ne
 8009860:	230a      	movne	r3, #10
 8009862:	2308      	moveq	r3, #8
 8009864:	2100      	movs	r1, #0
 8009866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800986a:	6866      	ldr	r6, [r4, #4]
 800986c:	60a6      	str	r6, [r4, #8]
 800986e:	2e00      	cmp	r6, #0
 8009870:	db05      	blt.n	800987e <_printf_i+0x10e>
 8009872:	6821      	ldr	r1, [r4, #0]
 8009874:	432e      	orrs	r6, r5
 8009876:	f021 0104 	bic.w	r1, r1, #4
 800987a:	6021      	str	r1, [r4, #0]
 800987c:	d04b      	beq.n	8009916 <_printf_i+0x1a6>
 800987e:	4616      	mov	r6, r2
 8009880:	fbb5 f1f3 	udiv	r1, r5, r3
 8009884:	fb03 5711 	mls	r7, r3, r1, r5
 8009888:	5dc7      	ldrb	r7, [r0, r7]
 800988a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800988e:	462f      	mov	r7, r5
 8009890:	42bb      	cmp	r3, r7
 8009892:	460d      	mov	r5, r1
 8009894:	d9f4      	bls.n	8009880 <_printf_i+0x110>
 8009896:	2b08      	cmp	r3, #8
 8009898:	d10b      	bne.n	80098b2 <_printf_i+0x142>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	07df      	lsls	r7, r3, #31
 800989e:	d508      	bpl.n	80098b2 <_printf_i+0x142>
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	6861      	ldr	r1, [r4, #4]
 80098a4:	4299      	cmp	r1, r3
 80098a6:	bfde      	ittt	le
 80098a8:	2330      	movle	r3, #48	@ 0x30
 80098aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098ae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80098b2:	1b92      	subs	r2, r2, r6
 80098b4:	6122      	str	r2, [r4, #16]
 80098b6:	f8cd a000 	str.w	sl, [sp]
 80098ba:	464b      	mov	r3, r9
 80098bc:	aa03      	add	r2, sp, #12
 80098be:	4621      	mov	r1, r4
 80098c0:	4640      	mov	r0, r8
 80098c2:	f7ff fee7 	bl	8009694 <_printf_common>
 80098c6:	3001      	adds	r0, #1
 80098c8:	d14a      	bne.n	8009960 <_printf_i+0x1f0>
 80098ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098ce:	b004      	add	sp, #16
 80098d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	f043 0320 	orr.w	r3, r3, #32
 80098da:	6023      	str	r3, [r4, #0]
 80098dc:	4832      	ldr	r0, [pc, #200]	@ (80099a8 <_printf_i+0x238>)
 80098de:	2778      	movs	r7, #120	@ 0x78
 80098e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	6831      	ldr	r1, [r6, #0]
 80098e8:	061f      	lsls	r7, r3, #24
 80098ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80098ee:	d402      	bmi.n	80098f6 <_printf_i+0x186>
 80098f0:	065f      	lsls	r7, r3, #25
 80098f2:	bf48      	it	mi
 80098f4:	b2ad      	uxthmi	r5, r5
 80098f6:	6031      	str	r1, [r6, #0]
 80098f8:	07d9      	lsls	r1, r3, #31
 80098fa:	bf44      	itt	mi
 80098fc:	f043 0320 	orrmi.w	r3, r3, #32
 8009900:	6023      	strmi	r3, [r4, #0]
 8009902:	b11d      	cbz	r5, 800990c <_printf_i+0x19c>
 8009904:	2310      	movs	r3, #16
 8009906:	e7ad      	b.n	8009864 <_printf_i+0xf4>
 8009908:	4826      	ldr	r0, [pc, #152]	@ (80099a4 <_printf_i+0x234>)
 800990a:	e7e9      	b.n	80098e0 <_printf_i+0x170>
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	f023 0320 	bic.w	r3, r3, #32
 8009912:	6023      	str	r3, [r4, #0]
 8009914:	e7f6      	b.n	8009904 <_printf_i+0x194>
 8009916:	4616      	mov	r6, r2
 8009918:	e7bd      	b.n	8009896 <_printf_i+0x126>
 800991a:	6833      	ldr	r3, [r6, #0]
 800991c:	6825      	ldr	r5, [r4, #0]
 800991e:	6961      	ldr	r1, [r4, #20]
 8009920:	1d18      	adds	r0, r3, #4
 8009922:	6030      	str	r0, [r6, #0]
 8009924:	062e      	lsls	r6, r5, #24
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	d501      	bpl.n	800992e <_printf_i+0x1be>
 800992a:	6019      	str	r1, [r3, #0]
 800992c:	e002      	b.n	8009934 <_printf_i+0x1c4>
 800992e:	0668      	lsls	r0, r5, #25
 8009930:	d5fb      	bpl.n	800992a <_printf_i+0x1ba>
 8009932:	8019      	strh	r1, [r3, #0]
 8009934:	2300      	movs	r3, #0
 8009936:	6123      	str	r3, [r4, #16]
 8009938:	4616      	mov	r6, r2
 800993a:	e7bc      	b.n	80098b6 <_printf_i+0x146>
 800993c:	6833      	ldr	r3, [r6, #0]
 800993e:	1d1a      	adds	r2, r3, #4
 8009940:	6032      	str	r2, [r6, #0]
 8009942:	681e      	ldr	r6, [r3, #0]
 8009944:	6862      	ldr	r2, [r4, #4]
 8009946:	2100      	movs	r1, #0
 8009948:	4630      	mov	r0, r6
 800994a:	f7f6 fc49 	bl	80001e0 <memchr>
 800994e:	b108      	cbz	r0, 8009954 <_printf_i+0x1e4>
 8009950:	1b80      	subs	r0, r0, r6
 8009952:	6060      	str	r0, [r4, #4]
 8009954:	6863      	ldr	r3, [r4, #4]
 8009956:	6123      	str	r3, [r4, #16]
 8009958:	2300      	movs	r3, #0
 800995a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800995e:	e7aa      	b.n	80098b6 <_printf_i+0x146>
 8009960:	6923      	ldr	r3, [r4, #16]
 8009962:	4632      	mov	r2, r6
 8009964:	4649      	mov	r1, r9
 8009966:	4640      	mov	r0, r8
 8009968:	47d0      	blx	sl
 800996a:	3001      	adds	r0, #1
 800996c:	d0ad      	beq.n	80098ca <_printf_i+0x15a>
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	079b      	lsls	r3, r3, #30
 8009972:	d413      	bmi.n	800999c <_printf_i+0x22c>
 8009974:	68e0      	ldr	r0, [r4, #12]
 8009976:	9b03      	ldr	r3, [sp, #12]
 8009978:	4298      	cmp	r0, r3
 800997a:	bfb8      	it	lt
 800997c:	4618      	movlt	r0, r3
 800997e:	e7a6      	b.n	80098ce <_printf_i+0x15e>
 8009980:	2301      	movs	r3, #1
 8009982:	4632      	mov	r2, r6
 8009984:	4649      	mov	r1, r9
 8009986:	4640      	mov	r0, r8
 8009988:	47d0      	blx	sl
 800998a:	3001      	adds	r0, #1
 800998c:	d09d      	beq.n	80098ca <_printf_i+0x15a>
 800998e:	3501      	adds	r5, #1
 8009990:	68e3      	ldr	r3, [r4, #12]
 8009992:	9903      	ldr	r1, [sp, #12]
 8009994:	1a5b      	subs	r3, r3, r1
 8009996:	42ab      	cmp	r3, r5
 8009998:	dcf2      	bgt.n	8009980 <_printf_i+0x210>
 800999a:	e7eb      	b.n	8009974 <_printf_i+0x204>
 800999c:	2500      	movs	r5, #0
 800999e:	f104 0619 	add.w	r6, r4, #25
 80099a2:	e7f5      	b.n	8009990 <_printf_i+0x220>
 80099a4:	0800ac74 	.word	0x0800ac74
 80099a8:	0800ac85 	.word	0x0800ac85

080099ac <__swbuf_r>:
 80099ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ae:	460e      	mov	r6, r1
 80099b0:	4614      	mov	r4, r2
 80099b2:	4605      	mov	r5, r0
 80099b4:	b118      	cbz	r0, 80099be <__swbuf_r+0x12>
 80099b6:	6a03      	ldr	r3, [r0, #32]
 80099b8:	b90b      	cbnz	r3, 80099be <__swbuf_r+0x12>
 80099ba:	f7ff fa2f 	bl	8008e1c <__sinit>
 80099be:	69a3      	ldr	r3, [r4, #24]
 80099c0:	60a3      	str	r3, [r4, #8]
 80099c2:	89a3      	ldrh	r3, [r4, #12]
 80099c4:	071a      	lsls	r2, r3, #28
 80099c6:	d501      	bpl.n	80099cc <__swbuf_r+0x20>
 80099c8:	6923      	ldr	r3, [r4, #16]
 80099ca:	b943      	cbnz	r3, 80099de <__swbuf_r+0x32>
 80099cc:	4621      	mov	r1, r4
 80099ce:	4628      	mov	r0, r5
 80099d0:	f000 f82a 	bl	8009a28 <__swsetup_r>
 80099d4:	b118      	cbz	r0, 80099de <__swbuf_r+0x32>
 80099d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80099da:	4638      	mov	r0, r7
 80099dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	6922      	ldr	r2, [r4, #16]
 80099e2:	1a98      	subs	r0, r3, r2
 80099e4:	6963      	ldr	r3, [r4, #20]
 80099e6:	b2f6      	uxtb	r6, r6
 80099e8:	4283      	cmp	r3, r0
 80099ea:	4637      	mov	r7, r6
 80099ec:	dc05      	bgt.n	80099fa <__swbuf_r+0x4e>
 80099ee:	4621      	mov	r1, r4
 80099f0:	4628      	mov	r0, r5
 80099f2:	f7ff fcbd 	bl	8009370 <_fflush_r>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d1ed      	bne.n	80099d6 <__swbuf_r+0x2a>
 80099fa:	68a3      	ldr	r3, [r4, #8]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	60a3      	str	r3, [r4, #8]
 8009a00:	6823      	ldr	r3, [r4, #0]
 8009a02:	1c5a      	adds	r2, r3, #1
 8009a04:	6022      	str	r2, [r4, #0]
 8009a06:	701e      	strb	r6, [r3, #0]
 8009a08:	6962      	ldr	r2, [r4, #20]
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d004      	beq.n	8009a1a <__swbuf_r+0x6e>
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	07db      	lsls	r3, r3, #31
 8009a14:	d5e1      	bpl.n	80099da <__swbuf_r+0x2e>
 8009a16:	2e0a      	cmp	r6, #10
 8009a18:	d1df      	bne.n	80099da <__swbuf_r+0x2e>
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	f7ff fca7 	bl	8009370 <_fflush_r>
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d0d9      	beq.n	80099da <__swbuf_r+0x2e>
 8009a26:	e7d6      	b.n	80099d6 <__swbuf_r+0x2a>

08009a28 <__swsetup_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4b29      	ldr	r3, [pc, #164]	@ (8009ad0 <__swsetup_r+0xa8>)
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	460c      	mov	r4, r1
 8009a32:	b118      	cbz	r0, 8009a3c <__swsetup_r+0x14>
 8009a34:	6a03      	ldr	r3, [r0, #32]
 8009a36:	b90b      	cbnz	r3, 8009a3c <__swsetup_r+0x14>
 8009a38:	f7ff f9f0 	bl	8008e1c <__sinit>
 8009a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a40:	0719      	lsls	r1, r3, #28
 8009a42:	d422      	bmi.n	8009a8a <__swsetup_r+0x62>
 8009a44:	06da      	lsls	r2, r3, #27
 8009a46:	d407      	bmi.n	8009a58 <__swsetup_r+0x30>
 8009a48:	2209      	movs	r2, #9
 8009a4a:	602a      	str	r2, [r5, #0]
 8009a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a50:	81a3      	strh	r3, [r4, #12]
 8009a52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a56:	e033      	b.n	8009ac0 <__swsetup_r+0x98>
 8009a58:	0758      	lsls	r0, r3, #29
 8009a5a:	d512      	bpl.n	8009a82 <__swsetup_r+0x5a>
 8009a5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a5e:	b141      	cbz	r1, 8009a72 <__swsetup_r+0x4a>
 8009a60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a64:	4299      	cmp	r1, r3
 8009a66:	d002      	beq.n	8009a6e <__swsetup_r+0x46>
 8009a68:	4628      	mov	r0, r5
 8009a6a:	f7ff fafd 	bl	8009068 <_free_r>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a78:	81a3      	strh	r3, [r4, #12]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	6063      	str	r3, [r4, #4]
 8009a7e:	6923      	ldr	r3, [r4, #16]
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	f043 0308 	orr.w	r3, r3, #8
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	b94b      	cbnz	r3, 8009aa2 <__swsetup_r+0x7a>
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a98:	d003      	beq.n	8009aa2 <__swsetup_r+0x7a>
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	f000 f883 	bl	8009ba8 <__smakebuf_r>
 8009aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa6:	f013 0201 	ands.w	r2, r3, #1
 8009aaa:	d00a      	beq.n	8009ac2 <__swsetup_r+0x9a>
 8009aac:	2200      	movs	r2, #0
 8009aae:	60a2      	str	r2, [r4, #8]
 8009ab0:	6962      	ldr	r2, [r4, #20]
 8009ab2:	4252      	negs	r2, r2
 8009ab4:	61a2      	str	r2, [r4, #24]
 8009ab6:	6922      	ldr	r2, [r4, #16]
 8009ab8:	b942      	cbnz	r2, 8009acc <__swsetup_r+0xa4>
 8009aba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009abe:	d1c5      	bne.n	8009a4c <__swsetup_r+0x24>
 8009ac0:	bd38      	pop	{r3, r4, r5, pc}
 8009ac2:	0799      	lsls	r1, r3, #30
 8009ac4:	bf58      	it	pl
 8009ac6:	6962      	ldrpl	r2, [r4, #20]
 8009ac8:	60a2      	str	r2, [r4, #8]
 8009aca:	e7f4      	b.n	8009ab6 <__swsetup_r+0x8e>
 8009acc:	2000      	movs	r0, #0
 8009ace:	e7f7      	b.n	8009ac0 <__swsetup_r+0x98>
 8009ad0:	2000019c 	.word	0x2000019c

08009ad4 <_raise_r>:
 8009ad4:	291f      	cmp	r1, #31
 8009ad6:	b538      	push	{r3, r4, r5, lr}
 8009ad8:	4605      	mov	r5, r0
 8009ada:	460c      	mov	r4, r1
 8009adc:	d904      	bls.n	8009ae8 <_raise_r+0x14>
 8009ade:	2316      	movs	r3, #22
 8009ae0:	6003      	str	r3, [r0, #0]
 8009ae2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ae6:	bd38      	pop	{r3, r4, r5, pc}
 8009ae8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009aea:	b112      	cbz	r2, 8009af2 <_raise_r+0x1e>
 8009aec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009af0:	b94b      	cbnz	r3, 8009b06 <_raise_r+0x32>
 8009af2:	4628      	mov	r0, r5
 8009af4:	f000 f830 	bl	8009b58 <_getpid_r>
 8009af8:	4622      	mov	r2, r4
 8009afa:	4601      	mov	r1, r0
 8009afc:	4628      	mov	r0, r5
 8009afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b02:	f000 b817 	b.w	8009b34 <_kill_r>
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d00a      	beq.n	8009b20 <_raise_r+0x4c>
 8009b0a:	1c59      	adds	r1, r3, #1
 8009b0c:	d103      	bne.n	8009b16 <_raise_r+0x42>
 8009b0e:	2316      	movs	r3, #22
 8009b10:	6003      	str	r3, [r0, #0]
 8009b12:	2001      	movs	r0, #1
 8009b14:	e7e7      	b.n	8009ae6 <_raise_r+0x12>
 8009b16:	2100      	movs	r1, #0
 8009b18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	4798      	blx	r3
 8009b20:	2000      	movs	r0, #0
 8009b22:	e7e0      	b.n	8009ae6 <_raise_r+0x12>

08009b24 <raise>:
 8009b24:	4b02      	ldr	r3, [pc, #8]	@ (8009b30 <raise+0xc>)
 8009b26:	4601      	mov	r1, r0
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	f7ff bfd3 	b.w	8009ad4 <_raise_r>
 8009b2e:	bf00      	nop
 8009b30:	2000019c 	.word	0x2000019c

08009b34 <_kill_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d07      	ldr	r5, [pc, #28]	@ (8009b54 <_kill_r+0x20>)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	4611      	mov	r1, r2
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	f7f7 fccb 	bl	80014dc <_kill>
 8009b46:	1c43      	adds	r3, r0, #1
 8009b48:	d102      	bne.n	8009b50 <_kill_r+0x1c>
 8009b4a:	682b      	ldr	r3, [r5, #0]
 8009b4c:	b103      	cbz	r3, 8009b50 <_kill_r+0x1c>
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	bd38      	pop	{r3, r4, r5, pc}
 8009b52:	bf00      	nop
 8009b54:	20004d20 	.word	0x20004d20

08009b58 <_getpid_r>:
 8009b58:	f7f7 bcb8 	b.w	80014cc <_getpid>

08009b5c <__swhatbuf_r>:
 8009b5c:	b570      	push	{r4, r5, r6, lr}
 8009b5e:	460c      	mov	r4, r1
 8009b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b64:	2900      	cmp	r1, #0
 8009b66:	b096      	sub	sp, #88	@ 0x58
 8009b68:	4615      	mov	r5, r2
 8009b6a:	461e      	mov	r6, r3
 8009b6c:	da0d      	bge.n	8009b8a <__swhatbuf_r+0x2e>
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b74:	f04f 0100 	mov.w	r1, #0
 8009b78:	bf14      	ite	ne
 8009b7a:	2340      	movne	r3, #64	@ 0x40
 8009b7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b80:	2000      	movs	r0, #0
 8009b82:	6031      	str	r1, [r6, #0]
 8009b84:	602b      	str	r3, [r5, #0]
 8009b86:	b016      	add	sp, #88	@ 0x58
 8009b88:	bd70      	pop	{r4, r5, r6, pc}
 8009b8a:	466a      	mov	r2, sp
 8009b8c:	f000 f848 	bl	8009c20 <_fstat_r>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	dbec      	blt.n	8009b6e <__swhatbuf_r+0x12>
 8009b94:	9901      	ldr	r1, [sp, #4]
 8009b96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b9e:	4259      	negs	r1, r3
 8009ba0:	4159      	adcs	r1, r3
 8009ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ba6:	e7eb      	b.n	8009b80 <__swhatbuf_r+0x24>

08009ba8 <__smakebuf_r>:
 8009ba8:	898b      	ldrh	r3, [r1, #12]
 8009baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bac:	079d      	lsls	r5, r3, #30
 8009bae:	4606      	mov	r6, r0
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	d507      	bpl.n	8009bc4 <__smakebuf_r+0x1c>
 8009bb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	6163      	str	r3, [r4, #20]
 8009bc0:	b003      	add	sp, #12
 8009bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bc4:	ab01      	add	r3, sp, #4
 8009bc6:	466a      	mov	r2, sp
 8009bc8:	f7ff ffc8 	bl	8009b5c <__swhatbuf_r>
 8009bcc:	9f00      	ldr	r7, [sp, #0]
 8009bce:	4605      	mov	r5, r0
 8009bd0:	4639      	mov	r1, r7
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f7ff fabc 	bl	8009150 <_malloc_r>
 8009bd8:	b948      	cbnz	r0, 8009bee <__smakebuf_r+0x46>
 8009bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bde:	059a      	lsls	r2, r3, #22
 8009be0:	d4ee      	bmi.n	8009bc0 <__smakebuf_r+0x18>
 8009be2:	f023 0303 	bic.w	r3, r3, #3
 8009be6:	f043 0302 	orr.w	r3, r3, #2
 8009bea:	81a3      	strh	r3, [r4, #12]
 8009bec:	e7e2      	b.n	8009bb4 <__smakebuf_r+0xc>
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	6020      	str	r0, [r4, #0]
 8009bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	9b01      	ldr	r3, [sp, #4]
 8009bfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bfe:	b15b      	cbz	r3, 8009c18 <__smakebuf_r+0x70>
 8009c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c04:	4630      	mov	r0, r6
 8009c06:	f000 f81d 	bl	8009c44 <_isatty_r>
 8009c0a:	b128      	cbz	r0, 8009c18 <__smakebuf_r+0x70>
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	f023 0303 	bic.w	r3, r3, #3
 8009c12:	f043 0301 	orr.w	r3, r3, #1
 8009c16:	81a3      	strh	r3, [r4, #12]
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	431d      	orrs	r5, r3
 8009c1c:	81a5      	strh	r5, [r4, #12]
 8009c1e:	e7cf      	b.n	8009bc0 <__smakebuf_r+0x18>

08009c20 <_fstat_r>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4d07      	ldr	r5, [pc, #28]	@ (8009c40 <_fstat_r+0x20>)
 8009c24:	2300      	movs	r3, #0
 8009c26:	4604      	mov	r4, r0
 8009c28:	4608      	mov	r0, r1
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	602b      	str	r3, [r5, #0]
 8009c2e:	f7f7 fcb5 	bl	800159c <_fstat>
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	d102      	bne.n	8009c3c <_fstat_r+0x1c>
 8009c36:	682b      	ldr	r3, [r5, #0]
 8009c38:	b103      	cbz	r3, 8009c3c <_fstat_r+0x1c>
 8009c3a:	6023      	str	r3, [r4, #0]
 8009c3c:	bd38      	pop	{r3, r4, r5, pc}
 8009c3e:	bf00      	nop
 8009c40:	20004d20 	.word	0x20004d20

08009c44 <_isatty_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d06      	ldr	r5, [pc, #24]	@ (8009c60 <_isatty_r+0x1c>)
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	602b      	str	r3, [r5, #0]
 8009c50:	f7f7 fcb4 	bl	80015bc <_isatty>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d102      	bne.n	8009c5e <_isatty_r+0x1a>
 8009c58:	682b      	ldr	r3, [r5, #0]
 8009c5a:	b103      	cbz	r3, 8009c5e <_isatty_r+0x1a>
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	20004d20 	.word	0x20004d20

08009c64 <expf>:
 8009c64:	b508      	push	{r3, lr}
 8009c66:	ed2d 8b02 	vpush	{d8}
 8009c6a:	eef0 8a40 	vmov.f32	s17, s0
 8009c6e:	f000 f983 	bl	8009f78 <__ieee754_expf>
 8009c72:	eeb0 8a40 	vmov.f32	s16, s0
 8009c76:	eeb0 0a68 	vmov.f32	s0, s17
 8009c7a:	f000 f8d3 	bl	8009e24 <finitef>
 8009c7e:	b160      	cbz	r0, 8009c9a <expf+0x36>
 8009c80:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8009cc0 <expf+0x5c>
 8009c84:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8c:	dd0a      	ble.n	8009ca4 <expf+0x40>
 8009c8e:	f7ff f99f 	bl	8008fd0 <__errno>
 8009c92:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8009cc4 <expf+0x60>
 8009c96:	2322      	movs	r3, #34	@ 0x22
 8009c98:	6003      	str	r3, [r0, #0]
 8009c9a:	eeb0 0a48 	vmov.f32	s0, s16
 8009c9e:	ecbd 8b02 	vpop	{d8}
 8009ca2:	bd08      	pop	{r3, pc}
 8009ca4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009cc8 <expf+0x64>
 8009ca8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb0:	d5f3      	bpl.n	8009c9a <expf+0x36>
 8009cb2:	f7ff f98d 	bl	8008fd0 <__errno>
 8009cb6:	2322      	movs	r3, #34	@ 0x22
 8009cb8:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8009ccc <expf+0x68>
 8009cbc:	6003      	str	r3, [r0, #0]
 8009cbe:	e7ec      	b.n	8009c9a <expf+0x36>
 8009cc0:	42b17217 	.word	0x42b17217
 8009cc4:	7f800000 	.word	0x7f800000
 8009cc8:	c2cff1b5 	.word	0xc2cff1b5
 8009ccc:	00000000 	.word	0x00000000

08009cd0 <fmodf>:
 8009cd0:	b508      	push	{r3, lr}
 8009cd2:	ed2d 8b02 	vpush	{d8}
 8009cd6:	eef0 8a40 	vmov.f32	s17, s0
 8009cda:	eeb0 8a60 	vmov.f32	s16, s1
 8009cde:	f000 fa19 	bl	800a114 <__ieee754_fmodf>
 8009ce2:	eef4 8a48 	vcmp.f32	s17, s16
 8009ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cea:	d60c      	bvs.n	8009d06 <fmodf+0x36>
 8009cec:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009d0c <fmodf+0x3c>
 8009cf0:	eeb4 8a68 	vcmp.f32	s16, s17
 8009cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf8:	d105      	bne.n	8009d06 <fmodf+0x36>
 8009cfa:	f7ff f969 	bl	8008fd0 <__errno>
 8009cfe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009d02:	2321      	movs	r3, #33	@ 0x21
 8009d04:	6003      	str	r3, [r0, #0]
 8009d06:	ecbd 8b02 	vpop	{d8}
 8009d0a:	bd08      	pop	{r3, pc}
 8009d0c:	00000000 	.word	0x00000000

08009d10 <cosf>:
 8009d10:	ee10 3a10 	vmov	r3, s0
 8009d14:	b507      	push	{r0, r1, r2, lr}
 8009d16:	4a1e      	ldr	r2, [pc, #120]	@ (8009d90 <cosf+0x80>)
 8009d18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d806      	bhi.n	8009d2e <cosf+0x1e>
 8009d20:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8009d94 <cosf+0x84>
 8009d24:	b003      	add	sp, #12
 8009d26:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d2a:	f000 b885 	b.w	8009e38 <__kernel_cosf>
 8009d2e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009d32:	d304      	bcc.n	8009d3e <cosf+0x2e>
 8009d34:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009d38:	b003      	add	sp, #12
 8009d3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d3e:	4668      	mov	r0, sp
 8009d40:	f000 fa6a 	bl	800a218 <__ieee754_rem_pio2f>
 8009d44:	f000 0003 	and.w	r0, r0, #3
 8009d48:	2801      	cmp	r0, #1
 8009d4a:	d009      	beq.n	8009d60 <cosf+0x50>
 8009d4c:	2802      	cmp	r0, #2
 8009d4e:	d010      	beq.n	8009d72 <cosf+0x62>
 8009d50:	b9b0      	cbnz	r0, 8009d80 <cosf+0x70>
 8009d52:	eddd 0a01 	vldr	s1, [sp, #4]
 8009d56:	ed9d 0a00 	vldr	s0, [sp]
 8009d5a:	f000 f86d 	bl	8009e38 <__kernel_cosf>
 8009d5e:	e7eb      	b.n	8009d38 <cosf+0x28>
 8009d60:	eddd 0a01 	vldr	s1, [sp, #4]
 8009d64:	ed9d 0a00 	vldr	s0, [sp]
 8009d68:	f000 f8be 	bl	8009ee8 <__kernel_sinf>
 8009d6c:	eeb1 0a40 	vneg.f32	s0, s0
 8009d70:	e7e2      	b.n	8009d38 <cosf+0x28>
 8009d72:	eddd 0a01 	vldr	s1, [sp, #4]
 8009d76:	ed9d 0a00 	vldr	s0, [sp]
 8009d7a:	f000 f85d 	bl	8009e38 <__kernel_cosf>
 8009d7e:	e7f5      	b.n	8009d6c <cosf+0x5c>
 8009d80:	eddd 0a01 	vldr	s1, [sp, #4]
 8009d84:	ed9d 0a00 	vldr	s0, [sp]
 8009d88:	2001      	movs	r0, #1
 8009d8a:	f000 f8ad 	bl	8009ee8 <__kernel_sinf>
 8009d8e:	e7d3      	b.n	8009d38 <cosf+0x28>
 8009d90:	3f490fd8 	.word	0x3f490fd8
 8009d94:	00000000 	.word	0x00000000

08009d98 <sinf>:
 8009d98:	ee10 3a10 	vmov	r3, s0
 8009d9c:	b507      	push	{r0, r1, r2, lr}
 8009d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8009e1c <sinf+0x84>)
 8009da0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d807      	bhi.n	8009db8 <sinf+0x20>
 8009da8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8009e20 <sinf+0x88>
 8009dac:	2000      	movs	r0, #0
 8009dae:	b003      	add	sp, #12
 8009db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009db4:	f000 b898 	b.w	8009ee8 <__kernel_sinf>
 8009db8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009dbc:	d304      	bcc.n	8009dc8 <sinf+0x30>
 8009dbe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009dc2:	b003      	add	sp, #12
 8009dc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009dc8:	4668      	mov	r0, sp
 8009dca:	f000 fa25 	bl	800a218 <__ieee754_rem_pio2f>
 8009dce:	f000 0003 	and.w	r0, r0, #3
 8009dd2:	2801      	cmp	r0, #1
 8009dd4:	d00a      	beq.n	8009dec <sinf+0x54>
 8009dd6:	2802      	cmp	r0, #2
 8009dd8:	d00f      	beq.n	8009dfa <sinf+0x62>
 8009dda:	b9c0      	cbnz	r0, 8009e0e <sinf+0x76>
 8009ddc:	eddd 0a01 	vldr	s1, [sp, #4]
 8009de0:	ed9d 0a00 	vldr	s0, [sp]
 8009de4:	2001      	movs	r0, #1
 8009de6:	f000 f87f 	bl	8009ee8 <__kernel_sinf>
 8009dea:	e7ea      	b.n	8009dc2 <sinf+0x2a>
 8009dec:	eddd 0a01 	vldr	s1, [sp, #4]
 8009df0:	ed9d 0a00 	vldr	s0, [sp]
 8009df4:	f000 f820 	bl	8009e38 <__kernel_cosf>
 8009df8:	e7e3      	b.n	8009dc2 <sinf+0x2a>
 8009dfa:	eddd 0a01 	vldr	s1, [sp, #4]
 8009dfe:	ed9d 0a00 	vldr	s0, [sp]
 8009e02:	2001      	movs	r0, #1
 8009e04:	f000 f870 	bl	8009ee8 <__kernel_sinf>
 8009e08:	eeb1 0a40 	vneg.f32	s0, s0
 8009e0c:	e7d9      	b.n	8009dc2 <sinf+0x2a>
 8009e0e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009e12:	ed9d 0a00 	vldr	s0, [sp]
 8009e16:	f000 f80f 	bl	8009e38 <__kernel_cosf>
 8009e1a:	e7f5      	b.n	8009e08 <sinf+0x70>
 8009e1c:	3f490fd8 	.word	0x3f490fd8
 8009e20:	00000000 	.word	0x00000000

08009e24 <finitef>:
 8009e24:	ee10 3a10 	vmov	r3, s0
 8009e28:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8009e2c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009e30:	bfac      	ite	ge
 8009e32:	2000      	movge	r0, #0
 8009e34:	2001      	movlt	r0, #1
 8009e36:	4770      	bx	lr

08009e38 <__kernel_cosf>:
 8009e38:	ee10 3a10 	vmov	r3, s0
 8009e3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e40:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009e44:	eef0 6a40 	vmov.f32	s13, s0
 8009e48:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009e4c:	d204      	bcs.n	8009e58 <__kernel_cosf+0x20>
 8009e4e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8009e52:	ee17 2a90 	vmov	r2, s15
 8009e56:	b342      	cbz	r2, 8009eaa <__kernel_cosf+0x72>
 8009e58:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009e5c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8009ec8 <__kernel_cosf+0x90>
 8009e60:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8009ecc <__kernel_cosf+0x94>
 8009e64:	4a1a      	ldr	r2, [pc, #104]	@ (8009ed0 <__kernel_cosf+0x98>)
 8009e66:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009ed4 <__kernel_cosf+0x9c>
 8009e70:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009e74:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8009ed8 <__kernel_cosf+0xa0>
 8009e78:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009e7c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8009edc <__kernel_cosf+0xa4>
 8009e80:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009e84:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8009ee0 <__kernel_cosf+0xa8>
 8009e88:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009e8c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8009e90:	ee26 6a07 	vmul.f32	s12, s12, s14
 8009e94:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009e98:	eee7 0a06 	vfma.f32	s1, s14, s12
 8009e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ea0:	d804      	bhi.n	8009eac <__kernel_cosf+0x74>
 8009ea2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009ea6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009eaa:	4770      	bx	lr
 8009eac:	4a0d      	ldr	r2, [pc, #52]	@ (8009ee4 <__kernel_cosf+0xac>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	bf9a      	itte	ls
 8009eb2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8009eb6:	ee07 3a10 	vmovls	s14, r3
 8009eba:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8009ebe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009ec2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ec6:	e7ec      	b.n	8009ea2 <__kernel_cosf+0x6a>
 8009ec8:	ad47d74e 	.word	0xad47d74e
 8009ecc:	310f74f6 	.word	0x310f74f6
 8009ed0:	3e999999 	.word	0x3e999999
 8009ed4:	b493f27c 	.word	0xb493f27c
 8009ed8:	37d00d01 	.word	0x37d00d01
 8009edc:	bab60b61 	.word	0xbab60b61
 8009ee0:	3d2aaaab 	.word	0x3d2aaaab
 8009ee4:	3f480000 	.word	0x3f480000

08009ee8 <__kernel_sinf>:
 8009ee8:	ee10 3a10 	vmov	r3, s0
 8009eec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ef0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009ef4:	d204      	bcs.n	8009f00 <__kernel_sinf+0x18>
 8009ef6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009efa:	ee17 3a90 	vmov	r3, s15
 8009efe:	b35b      	cbz	r3, 8009f58 <__kernel_sinf+0x70>
 8009f00:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009f04:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009f5c <__kernel_sinf+0x74>
 8009f08:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009f60 <__kernel_sinf+0x78>
 8009f0c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009f10:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8009f64 <__kernel_sinf+0x7c>
 8009f14:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009f18:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8009f68 <__kernel_sinf+0x80>
 8009f1c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009f20:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8009f6c <__kernel_sinf+0x84>
 8009f24:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009f28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009f2c:	b930      	cbnz	r0, 8009f3c <__kernel_sinf+0x54>
 8009f2e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8009f70 <__kernel_sinf+0x88>
 8009f32:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009f36:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009f3a:	4770      	bx	lr
 8009f3c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009f40:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009f44:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009f48:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009f4c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8009f74 <__kernel_sinf+0x8c>
 8009f50:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009f54:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009f60:	b2d72f34 	.word	0xb2d72f34
 8009f64:	3638ef1b 	.word	0x3638ef1b
 8009f68:	b9500d01 	.word	0xb9500d01
 8009f6c:	3c088889 	.word	0x3c088889
 8009f70:	be2aaaab 	.word	0xbe2aaaab
 8009f74:	3e2aaaab 	.word	0x3e2aaaab

08009f78 <__ieee754_expf>:
 8009f78:	ee10 2a10 	vmov	r2, s0
 8009f7c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8009f80:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009f84:	d902      	bls.n	8009f8c <__ieee754_expf+0x14>
 8009f86:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009f8a:	4770      	bx	lr
 8009f8c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8009f90:	d106      	bne.n	8009fa0 <__ieee754_expf+0x28>
 8009f92:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800a0cc <__ieee754_expf+0x154>
 8009f96:	2900      	cmp	r1, #0
 8009f98:	bf18      	it	ne
 8009f9a:	eeb0 0a67 	vmovne.f32	s0, s15
 8009f9e:	4770      	bx	lr
 8009fa0:	484b      	ldr	r0, [pc, #300]	@ (800a0d0 <__ieee754_expf+0x158>)
 8009fa2:	4282      	cmp	r2, r0
 8009fa4:	dd02      	ble.n	8009fac <__ieee754_expf+0x34>
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	f000 ba8c 	b.w	800a4c4 <__math_oflowf>
 8009fac:	2a00      	cmp	r2, #0
 8009fae:	da05      	bge.n	8009fbc <__ieee754_expf+0x44>
 8009fb0:	4a48      	ldr	r2, [pc, #288]	@ (800a0d4 <__ieee754_expf+0x15c>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d902      	bls.n	8009fbc <__ieee754_expf+0x44>
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	f000 ba7e 	b.w	800a4b8 <__math_uflowf>
 8009fbc:	4a46      	ldr	r2, [pc, #280]	@ (800a0d8 <__ieee754_expf+0x160>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8009fc4:	d952      	bls.n	800a06c <__ieee754_expf+0xf4>
 8009fc6:	4a45      	ldr	r2, [pc, #276]	@ (800a0dc <__ieee754_expf+0x164>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8009fce:	d834      	bhi.n	800a03a <__ieee754_expf+0xc2>
 8009fd0:	4b43      	ldr	r3, [pc, #268]	@ (800a0e0 <__ieee754_expf+0x168>)
 8009fd2:	4413      	add	r3, r2
 8009fd4:	ed93 7a00 	vldr	s14, [r3]
 8009fd8:	4b42      	ldr	r3, [pc, #264]	@ (800a0e4 <__ieee754_expf+0x16c>)
 8009fda:	4413      	add	r3, r2
 8009fdc:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009fe0:	f081 0201 	eor.w	r2, r1, #1
 8009fe4:	edd3 7a00 	vldr	s15, [r3]
 8009fe8:	1a52      	subs	r2, r2, r1
 8009fea:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009fee:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009ff2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800a0e8 <__ieee754_expf+0x170>
 8009ff6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a0ec <__ieee754_expf+0x174>
 8009ffa:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009ffe:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800a0f0 <__ieee754_expf+0x178>
 800a002:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a006:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a0f4 <__ieee754_expf+0x17c>
 800a00a:	eee5 6a06 	vfma.f32	s13, s10, s12
 800a00e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800a0f8 <__ieee754_expf+0x180>
 800a012:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a016:	eef0 6a40 	vmov.f32	s13, s0
 800a01a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800a01e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800a022:	ee20 5a26 	vmul.f32	s10, s0, s13
 800a026:	bb92      	cbnz	r2, 800a08e <__ieee754_expf+0x116>
 800a028:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800a02c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800a030:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a034:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800a038:	4770      	bx	lr
 800a03a:	4b30      	ldr	r3, [pc, #192]	@ (800a0fc <__ieee754_expf+0x184>)
 800a03c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800a100 <__ieee754_expf+0x188>
 800a040:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800a104 <__ieee754_expf+0x18c>
 800a044:	4413      	add	r3, r2
 800a046:	edd3 7a00 	vldr	s15, [r3]
 800a04a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a04e:	eeb0 7a40 	vmov.f32	s14, s0
 800a052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a056:	ee17 2a90 	vmov	r2, s15
 800a05a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a05e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a062:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800a108 <__ieee754_expf+0x190>
 800a066:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a06a:	e7be      	b.n	8009fea <__ieee754_expf+0x72>
 800a06c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800a070:	d20b      	bcs.n	800a08a <__ieee754_expf+0x112>
 800a072:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a10c <__ieee754_expf+0x194>
 800a076:	ee70 6a26 	vadd.f32	s13, s0, s13
 800a07a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800a07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a082:	dd02      	ble.n	800a08a <__ieee754_expf+0x112>
 800a084:	ee30 0a25 	vadd.f32	s0, s0, s11
 800a088:	4770      	bx	lr
 800a08a:	2200      	movs	r2, #0
 800a08c:	e7af      	b.n	8009fee <__ieee754_expf+0x76>
 800a08e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a092:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800a096:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800a09a:	bfb8      	it	lt
 800a09c:	3264      	addlt	r2, #100	@ 0x64
 800a09e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a0a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0a6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a0aa:	ee17 3a90 	vmov	r3, s15
 800a0ae:	bfab      	itete	ge
 800a0b0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a0b4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a0b8:	ee00 3a10 	vmovge	s0, r3
 800a0bc:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800a110 <__ieee754_expf+0x198>
 800a0c0:	bfbc      	itt	lt
 800a0c2:	ee00 3a10 	vmovlt	s0, r3
 800a0c6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a0ca:	4770      	bx	lr
 800a0cc:	00000000 	.word	0x00000000
 800a0d0:	42b17217 	.word	0x42b17217
 800a0d4:	42cff1b5 	.word	0x42cff1b5
 800a0d8:	3eb17218 	.word	0x3eb17218
 800a0dc:	3f851591 	.word	0x3f851591
 800a0e0:	0800aca0 	.word	0x0800aca0
 800a0e4:	0800ac98 	.word	0x0800ac98
 800a0e8:	3331bb4c 	.word	0x3331bb4c
 800a0ec:	b5ddea0e 	.word	0xb5ddea0e
 800a0f0:	388ab355 	.word	0x388ab355
 800a0f4:	bb360b61 	.word	0xbb360b61
 800a0f8:	3e2aaaab 	.word	0x3e2aaaab
 800a0fc:	0800aca8 	.word	0x0800aca8
 800a100:	3fb8aa3b 	.word	0x3fb8aa3b
 800a104:	3f317180 	.word	0x3f317180
 800a108:	3717f7d1 	.word	0x3717f7d1
 800a10c:	7149f2ca 	.word	0x7149f2ca
 800a110:	0d800000 	.word	0x0d800000

0800a114 <__ieee754_fmodf>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	ee10 6a90 	vmov	r6, s1
 800a11a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a11e:	1e5a      	subs	r2, r3, #1
 800a120:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a124:	d206      	bcs.n	800a134 <__ieee754_fmodf+0x20>
 800a126:	ee10 4a10 	vmov	r4, s0
 800a12a:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800a12e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a132:	d304      	bcc.n	800a13e <__ieee754_fmodf+0x2a>
 800a134:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a138:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a13c:	bd70      	pop	{r4, r5, r6, pc}
 800a13e:	4299      	cmp	r1, r3
 800a140:	dbfc      	blt.n	800a13c <__ieee754_fmodf+0x28>
 800a142:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800a146:	d105      	bne.n	800a154 <__ieee754_fmodf+0x40>
 800a148:	4b32      	ldr	r3, [pc, #200]	@ (800a214 <__ieee754_fmodf+0x100>)
 800a14a:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800a14e:	ed93 0a00 	vldr	s0, [r3]
 800a152:	e7f3      	b.n	800a13c <__ieee754_fmodf+0x28>
 800a154:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800a158:	d146      	bne.n	800a1e8 <__ieee754_fmodf+0xd4>
 800a15a:	020a      	lsls	r2, r1, #8
 800a15c:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800a160:	2a00      	cmp	r2, #0
 800a162:	dc3e      	bgt.n	800a1e2 <__ieee754_fmodf+0xce>
 800a164:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800a168:	bf01      	itttt	eq
 800a16a:	021a      	lsleq	r2, r3, #8
 800a16c:	fab2 f282 	clzeq	r2, r2
 800a170:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800a174:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800a178:	bf16      	itet	ne
 800a17a:	15da      	asrne	r2, r3, #23
 800a17c:	3282      	addeq	r2, #130	@ 0x82
 800a17e:	3a7f      	subne	r2, #127	@ 0x7f
 800a180:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800a184:	bfbb      	ittet	lt
 800a186:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800a18a:	1a24      	sublt	r4, r4, r0
 800a18c:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800a190:	40a1      	lsllt	r1, r4
 800a192:	bfa8      	it	ge
 800a194:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800a198:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800a19c:	bfb5      	itete	lt
 800a19e:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800a1a2:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800a1a6:	1aa4      	sublt	r4, r4, r2
 800a1a8:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800a1ac:	bfb8      	it	lt
 800a1ae:	fa03 f404 	lsllt.w	r4, r3, r4
 800a1b2:	1a80      	subs	r0, r0, r2
 800a1b4:	1b0b      	subs	r3, r1, r4
 800a1b6:	b9d0      	cbnz	r0, 800a1ee <__ieee754_fmodf+0xda>
 800a1b8:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800a1bc:	bf28      	it	cs
 800a1be:	460b      	movcs	r3, r1
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0c1      	beq.n	800a148 <__ieee754_fmodf+0x34>
 800a1c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a1c8:	db19      	blt.n	800a1fe <__ieee754_fmodf+0xea>
 800a1ca:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800a1ce:	db19      	blt.n	800a204 <__ieee754_fmodf+0xf0>
 800a1d0:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800a1d4:	327f      	adds	r2, #127	@ 0x7f
 800a1d6:	432b      	orrs	r3, r5
 800a1d8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a1dc:	ee00 3a10 	vmov	s0, r3
 800a1e0:	e7ac      	b.n	800a13c <__ieee754_fmodf+0x28>
 800a1e2:	3801      	subs	r0, #1
 800a1e4:	0052      	lsls	r2, r2, #1
 800a1e6:	e7bb      	b.n	800a160 <__ieee754_fmodf+0x4c>
 800a1e8:	15c8      	asrs	r0, r1, #23
 800a1ea:	387f      	subs	r0, #127	@ 0x7f
 800a1ec:	e7ba      	b.n	800a164 <__ieee754_fmodf+0x50>
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	da02      	bge.n	800a1f8 <__ieee754_fmodf+0xe4>
 800a1f2:	0049      	lsls	r1, r1, #1
 800a1f4:	3801      	subs	r0, #1
 800a1f6:	e7dd      	b.n	800a1b4 <__ieee754_fmodf+0xa0>
 800a1f8:	d0a6      	beq.n	800a148 <__ieee754_fmodf+0x34>
 800a1fa:	0059      	lsls	r1, r3, #1
 800a1fc:	e7fa      	b.n	800a1f4 <__ieee754_fmodf+0xe0>
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	3a01      	subs	r2, #1
 800a202:	e7df      	b.n	800a1c4 <__ieee754_fmodf+0xb0>
 800a204:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800a208:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800a20c:	3282      	adds	r2, #130	@ 0x82
 800a20e:	4113      	asrs	r3, r2
 800a210:	432b      	orrs	r3, r5
 800a212:	e7e3      	b.n	800a1dc <__ieee754_fmodf+0xc8>
 800a214:	0800acb0 	.word	0x0800acb0

0800a218 <__ieee754_rem_pio2f>:
 800a218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a21a:	ee10 6a10 	vmov	r6, s0
 800a21e:	4b88      	ldr	r3, [pc, #544]	@ (800a440 <__ieee754_rem_pio2f+0x228>)
 800a220:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800a224:	429d      	cmp	r5, r3
 800a226:	b087      	sub	sp, #28
 800a228:	4604      	mov	r4, r0
 800a22a:	d805      	bhi.n	800a238 <__ieee754_rem_pio2f+0x20>
 800a22c:	2300      	movs	r3, #0
 800a22e:	ed80 0a00 	vstr	s0, [r0]
 800a232:	6043      	str	r3, [r0, #4]
 800a234:	2000      	movs	r0, #0
 800a236:	e022      	b.n	800a27e <__ieee754_rem_pio2f+0x66>
 800a238:	4b82      	ldr	r3, [pc, #520]	@ (800a444 <__ieee754_rem_pio2f+0x22c>)
 800a23a:	429d      	cmp	r5, r3
 800a23c:	d83a      	bhi.n	800a2b4 <__ieee754_rem_pio2f+0x9c>
 800a23e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a242:	2e00      	cmp	r6, #0
 800a244:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800a448 <__ieee754_rem_pio2f+0x230>
 800a248:	4a80      	ldr	r2, [pc, #512]	@ (800a44c <__ieee754_rem_pio2f+0x234>)
 800a24a:	f023 030f 	bic.w	r3, r3, #15
 800a24e:	dd18      	ble.n	800a282 <__ieee754_rem_pio2f+0x6a>
 800a250:	4293      	cmp	r3, r2
 800a252:	ee70 7a47 	vsub.f32	s15, s0, s14
 800a256:	bf09      	itett	eq
 800a258:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800a450 <__ieee754_rem_pio2f+0x238>
 800a25c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800a454 <__ieee754_rem_pio2f+0x23c>
 800a260:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800a458 <__ieee754_rem_pio2f+0x240>
 800a264:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800a268:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800a26c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a270:	ed80 7a00 	vstr	s14, [r0]
 800a274:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a278:	edc0 7a01 	vstr	s15, [r0, #4]
 800a27c:	2001      	movs	r0, #1
 800a27e:	b007      	add	sp, #28
 800a280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a282:	4293      	cmp	r3, r2
 800a284:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a288:	bf09      	itett	eq
 800a28a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800a450 <__ieee754_rem_pio2f+0x238>
 800a28e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800a454 <__ieee754_rem_pio2f+0x23c>
 800a292:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800a458 <__ieee754_rem_pio2f+0x240>
 800a296:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800a29a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a29e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2a2:	ed80 7a00 	vstr	s14, [r0]
 800a2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2aa:	edc0 7a01 	vstr	s15, [r0, #4]
 800a2ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2b2:	e7e4      	b.n	800a27e <__ieee754_rem_pio2f+0x66>
 800a2b4:	4b69      	ldr	r3, [pc, #420]	@ (800a45c <__ieee754_rem_pio2f+0x244>)
 800a2b6:	429d      	cmp	r5, r3
 800a2b8:	d873      	bhi.n	800a3a2 <__ieee754_rem_pio2f+0x18a>
 800a2ba:	f000 f8dd 	bl	800a478 <fabsf>
 800a2be:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800a460 <__ieee754_rem_pio2f+0x248>
 800a2c2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a2c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a2ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a2ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a2d2:	ee17 0a90 	vmov	r0, s15
 800a2d6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800a448 <__ieee754_rem_pio2f+0x230>
 800a2da:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a2de:	281f      	cmp	r0, #31
 800a2e0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800a454 <__ieee754_rem_pio2f+0x23c>
 800a2e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2e8:	eeb1 6a47 	vneg.f32	s12, s14
 800a2ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a2f0:	ee16 1a90 	vmov	r1, s13
 800a2f4:	dc09      	bgt.n	800a30a <__ieee754_rem_pio2f+0xf2>
 800a2f6:	4a5b      	ldr	r2, [pc, #364]	@ (800a464 <__ieee754_rem_pio2f+0x24c>)
 800a2f8:	1e47      	subs	r7, r0, #1
 800a2fa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a2fe:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800a302:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a306:	4293      	cmp	r3, r2
 800a308:	d107      	bne.n	800a31a <__ieee754_rem_pio2f+0x102>
 800a30a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800a30e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800a312:	2a08      	cmp	r2, #8
 800a314:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800a318:	dc14      	bgt.n	800a344 <__ieee754_rem_pio2f+0x12c>
 800a31a:	6021      	str	r1, [r4, #0]
 800a31c:	ed94 7a00 	vldr	s14, [r4]
 800a320:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a324:	2e00      	cmp	r6, #0
 800a326:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a32a:	ed84 0a01 	vstr	s0, [r4, #4]
 800a32e:	daa6      	bge.n	800a27e <__ieee754_rem_pio2f+0x66>
 800a330:	eeb1 7a47 	vneg.f32	s14, s14
 800a334:	eeb1 0a40 	vneg.f32	s0, s0
 800a338:	ed84 7a00 	vstr	s14, [r4]
 800a33c:	ed84 0a01 	vstr	s0, [r4, #4]
 800a340:	4240      	negs	r0, r0
 800a342:	e79c      	b.n	800a27e <__ieee754_rem_pio2f+0x66>
 800a344:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800a450 <__ieee754_rem_pio2f+0x238>
 800a348:	eef0 6a40 	vmov.f32	s13, s0
 800a34c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a350:	ee70 7a66 	vsub.f32	s15, s0, s13
 800a354:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a358:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a458 <__ieee754_rem_pio2f+0x240>
 800a35c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a360:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a364:	ee15 2a90 	vmov	r2, s11
 800a368:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a36c:	1a5b      	subs	r3, r3, r1
 800a36e:	2b19      	cmp	r3, #25
 800a370:	dc04      	bgt.n	800a37c <__ieee754_rem_pio2f+0x164>
 800a372:	edc4 5a00 	vstr	s11, [r4]
 800a376:	eeb0 0a66 	vmov.f32	s0, s13
 800a37a:	e7cf      	b.n	800a31c <__ieee754_rem_pio2f+0x104>
 800a37c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800a468 <__ieee754_rem_pio2f+0x250>
 800a380:	eeb0 0a66 	vmov.f32	s0, s13
 800a384:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a388:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a38c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800a46c <__ieee754_rem_pio2f+0x254>
 800a390:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a394:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a398:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a39c:	ed84 7a00 	vstr	s14, [r4]
 800a3a0:	e7bc      	b.n	800a31c <__ieee754_rem_pio2f+0x104>
 800a3a2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800a3a6:	d306      	bcc.n	800a3b6 <__ieee754_rem_pio2f+0x19e>
 800a3a8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a3ac:	edc0 7a01 	vstr	s15, [r0, #4]
 800a3b0:	edc0 7a00 	vstr	s15, [r0]
 800a3b4:	e73e      	b.n	800a234 <__ieee754_rem_pio2f+0x1c>
 800a3b6:	15ea      	asrs	r2, r5, #23
 800a3b8:	3a86      	subs	r2, #134	@ 0x86
 800a3ba:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a3be:	ee07 3a90 	vmov	s15, r3
 800a3c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a3c6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800a470 <__ieee754_rem_pio2f+0x258>
 800a3ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a3ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3d2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a3d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a3da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a3de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a3e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3e6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a3ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a3ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f6:	edcd 7a05 	vstr	s15, [sp, #20]
 800a3fa:	d11e      	bne.n	800a43a <__ieee754_rem_pio2f+0x222>
 800a3fc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a404:	bf0c      	ite	eq
 800a406:	2301      	moveq	r3, #1
 800a408:	2302      	movne	r3, #2
 800a40a:	491a      	ldr	r1, [pc, #104]	@ (800a474 <__ieee754_rem_pio2f+0x25c>)
 800a40c:	9101      	str	r1, [sp, #4]
 800a40e:	2102      	movs	r1, #2
 800a410:	9100      	str	r1, [sp, #0]
 800a412:	a803      	add	r0, sp, #12
 800a414:	4621      	mov	r1, r4
 800a416:	f000 f85b 	bl	800a4d0 <__kernel_rem_pio2f>
 800a41a:	2e00      	cmp	r6, #0
 800a41c:	f6bf af2f 	bge.w	800a27e <__ieee754_rem_pio2f+0x66>
 800a420:	edd4 7a00 	vldr	s15, [r4]
 800a424:	eef1 7a67 	vneg.f32	s15, s15
 800a428:	edc4 7a00 	vstr	s15, [r4]
 800a42c:	edd4 7a01 	vldr	s15, [r4, #4]
 800a430:	eef1 7a67 	vneg.f32	s15, s15
 800a434:	edc4 7a01 	vstr	s15, [r4, #4]
 800a438:	e782      	b.n	800a340 <__ieee754_rem_pio2f+0x128>
 800a43a:	2303      	movs	r3, #3
 800a43c:	e7e5      	b.n	800a40a <__ieee754_rem_pio2f+0x1f2>
 800a43e:	bf00      	nop
 800a440:	3f490fd8 	.word	0x3f490fd8
 800a444:	4016cbe3 	.word	0x4016cbe3
 800a448:	3fc90f80 	.word	0x3fc90f80
 800a44c:	3fc90fd0 	.word	0x3fc90fd0
 800a450:	37354400 	.word	0x37354400
 800a454:	37354443 	.word	0x37354443
 800a458:	2e85a308 	.word	0x2e85a308
 800a45c:	43490f80 	.word	0x43490f80
 800a460:	3f22f984 	.word	0x3f22f984
 800a464:	0800acb8 	.word	0x0800acb8
 800a468:	2e85a300 	.word	0x2e85a300
 800a46c:	248d3132 	.word	0x248d3132
 800a470:	43800000 	.word	0x43800000
 800a474:	0800ad38 	.word	0x0800ad38

0800a478 <fabsf>:
 800a478:	ee10 3a10 	vmov	r3, s0
 800a47c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a480:	ee00 3a10 	vmov	s0, r3
 800a484:	4770      	bx	lr

0800a486 <with_errnof>:
 800a486:	b510      	push	{r4, lr}
 800a488:	ed2d 8b02 	vpush	{d8}
 800a48c:	eeb0 8a40 	vmov.f32	s16, s0
 800a490:	4604      	mov	r4, r0
 800a492:	f7fe fd9d 	bl	8008fd0 <__errno>
 800a496:	eeb0 0a48 	vmov.f32	s0, s16
 800a49a:	ecbd 8b02 	vpop	{d8}
 800a49e:	6004      	str	r4, [r0, #0]
 800a4a0:	bd10      	pop	{r4, pc}

0800a4a2 <xflowf>:
 800a4a2:	b130      	cbz	r0, 800a4b2 <xflowf+0x10>
 800a4a4:	eef1 7a40 	vneg.f32	s15, s0
 800a4a8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a4ac:	2022      	movs	r0, #34	@ 0x22
 800a4ae:	f7ff bfea 	b.w	800a486 <with_errnof>
 800a4b2:	eef0 7a40 	vmov.f32	s15, s0
 800a4b6:	e7f7      	b.n	800a4a8 <xflowf+0x6>

0800a4b8 <__math_uflowf>:
 800a4b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a4c0 <__math_uflowf+0x8>
 800a4bc:	f7ff bff1 	b.w	800a4a2 <xflowf>
 800a4c0:	10000000 	.word	0x10000000

0800a4c4 <__math_oflowf>:
 800a4c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a4cc <__math_oflowf+0x8>
 800a4c8:	f7ff bfeb 	b.w	800a4a2 <xflowf>
 800a4cc:	70000000 	.word	0x70000000

0800a4d0 <__kernel_rem_pio2f>:
 800a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d4:	ed2d 8b04 	vpush	{d8-d9}
 800a4d8:	b0d9      	sub	sp, #356	@ 0x164
 800a4da:	4690      	mov	r8, r2
 800a4dc:	9001      	str	r0, [sp, #4]
 800a4de:	4ab6      	ldr	r2, [pc, #728]	@ (800a7b8 <__kernel_rem_pio2f+0x2e8>)
 800a4e0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800a4e2:	f118 0f04 	cmn.w	r8, #4
 800a4e6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800a4ea:	460f      	mov	r7, r1
 800a4ec:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a4f0:	db26      	blt.n	800a540 <__kernel_rem_pio2f+0x70>
 800a4f2:	f1b8 0203 	subs.w	r2, r8, #3
 800a4f6:	bf48      	it	mi
 800a4f8:	f108 0204 	addmi.w	r2, r8, #4
 800a4fc:	10d2      	asrs	r2, r2, #3
 800a4fe:	1c55      	adds	r5, r2, #1
 800a500:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800a502:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800a7c8 <__kernel_rem_pio2f+0x2f8>
 800a506:	00e8      	lsls	r0, r5, #3
 800a508:	eba2 060b 	sub.w	r6, r2, fp
 800a50c:	9002      	str	r0, [sp, #8]
 800a50e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800a512:	eb0a 0c0b 	add.w	ip, sl, fp
 800a516:	ac1c      	add	r4, sp, #112	@ 0x70
 800a518:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800a51c:	2000      	movs	r0, #0
 800a51e:	4560      	cmp	r0, ip
 800a520:	dd10      	ble.n	800a544 <__kernel_rem_pio2f+0x74>
 800a522:	a91c      	add	r1, sp, #112	@ 0x70
 800a524:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800a528:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800a52c:	2600      	movs	r6, #0
 800a52e:	4556      	cmp	r6, sl
 800a530:	dc24      	bgt.n	800a57c <__kernel_rem_pio2f+0xac>
 800a532:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a536:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800a7c8 <__kernel_rem_pio2f+0x2f8>
 800a53a:	4684      	mov	ip, r0
 800a53c:	2400      	movs	r4, #0
 800a53e:	e016      	b.n	800a56e <__kernel_rem_pio2f+0x9e>
 800a540:	2200      	movs	r2, #0
 800a542:	e7dc      	b.n	800a4fe <__kernel_rem_pio2f+0x2e>
 800a544:	42c6      	cmn	r6, r0
 800a546:	bf5d      	ittte	pl
 800a548:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800a54c:	ee07 1a90 	vmovpl	s15, r1
 800a550:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a554:	eef0 7a47 	vmovmi.f32	s15, s14
 800a558:	ece4 7a01 	vstmia	r4!, {s15}
 800a55c:	3001      	adds	r0, #1
 800a55e:	e7de      	b.n	800a51e <__kernel_rem_pio2f+0x4e>
 800a560:	ecfe 6a01 	vldmia	lr!, {s13}
 800a564:	ed3c 7a01 	vldmdb	ip!, {s14}
 800a568:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a56c:	3401      	adds	r4, #1
 800a56e:	455c      	cmp	r4, fp
 800a570:	ddf6      	ble.n	800a560 <__kernel_rem_pio2f+0x90>
 800a572:	ece9 7a01 	vstmia	r9!, {s15}
 800a576:	3601      	adds	r6, #1
 800a578:	3004      	adds	r0, #4
 800a57a:	e7d8      	b.n	800a52e <__kernel_rem_pio2f+0x5e>
 800a57c:	a908      	add	r1, sp, #32
 800a57e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a582:	9104      	str	r1, [sp, #16]
 800a584:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800a586:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800a7c4 <__kernel_rem_pio2f+0x2f4>
 800a58a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800a7c0 <__kernel_rem_pio2f+0x2f0>
 800a58e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a592:	9203      	str	r2, [sp, #12]
 800a594:	4654      	mov	r4, sl
 800a596:	00a2      	lsls	r2, r4, #2
 800a598:	9205      	str	r2, [sp, #20]
 800a59a:	aa58      	add	r2, sp, #352	@ 0x160
 800a59c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800a5a0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800a5a4:	a944      	add	r1, sp, #272	@ 0x110
 800a5a6:	aa08      	add	r2, sp, #32
 800a5a8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800a5ac:	4694      	mov	ip, r2
 800a5ae:	4626      	mov	r6, r4
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	dc4c      	bgt.n	800a64e <__kernel_rem_pio2f+0x17e>
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5ba:	f000 f9f1 	bl	800a9a0 <scalbnf>
 800a5be:	eeb0 8a40 	vmov.f32	s16, s0
 800a5c2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800a5c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a5ca:	f000 fa4f 	bl	800aa6c <floorf>
 800a5ce:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800a5d2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a5d6:	2d00      	cmp	r5, #0
 800a5d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5dc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a5e0:	ee17 9a90 	vmov	r9, s15
 800a5e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5e8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a5ec:	dd41      	ble.n	800a672 <__kernel_rem_pio2f+0x1a2>
 800a5ee:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800a5f2:	a908      	add	r1, sp, #32
 800a5f4:	f1c5 0e08 	rsb	lr, r5, #8
 800a5f8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800a5fc:	fa46 f00e 	asr.w	r0, r6, lr
 800a600:	4481      	add	r9, r0
 800a602:	fa00 f00e 	lsl.w	r0, r0, lr
 800a606:	1a36      	subs	r6, r6, r0
 800a608:	f1c5 0007 	rsb	r0, r5, #7
 800a60c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800a610:	4106      	asrs	r6, r0
 800a612:	2e00      	cmp	r6, #0
 800a614:	dd3c      	ble.n	800a690 <__kernel_rem_pio2f+0x1c0>
 800a616:	f04f 0e00 	mov.w	lr, #0
 800a61a:	f109 0901 	add.w	r9, r9, #1
 800a61e:	4670      	mov	r0, lr
 800a620:	4574      	cmp	r4, lr
 800a622:	dc68      	bgt.n	800a6f6 <__kernel_rem_pio2f+0x226>
 800a624:	2d00      	cmp	r5, #0
 800a626:	dd03      	ble.n	800a630 <__kernel_rem_pio2f+0x160>
 800a628:	2d01      	cmp	r5, #1
 800a62a:	d074      	beq.n	800a716 <__kernel_rem_pio2f+0x246>
 800a62c:	2d02      	cmp	r5, #2
 800a62e:	d07d      	beq.n	800a72c <__kernel_rem_pio2f+0x25c>
 800a630:	2e02      	cmp	r6, #2
 800a632:	d12d      	bne.n	800a690 <__kernel_rem_pio2f+0x1c0>
 800a634:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a638:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a63c:	b340      	cbz	r0, 800a690 <__kernel_rem_pio2f+0x1c0>
 800a63e:	4628      	mov	r0, r5
 800a640:	9306      	str	r3, [sp, #24]
 800a642:	f000 f9ad 	bl	800a9a0 <scalbnf>
 800a646:	9b06      	ldr	r3, [sp, #24]
 800a648:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a64c:	e020      	b.n	800a690 <__kernel_rem_pio2f+0x1c0>
 800a64e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a652:	3e01      	subs	r6, #1
 800a654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a65c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a660:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a664:	ecac 0a01 	vstmia	ip!, {s0}
 800a668:	ed30 0a01 	vldmdb	r0!, {s0}
 800a66c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a670:	e79e      	b.n	800a5b0 <__kernel_rem_pio2f+0xe0>
 800a672:	d105      	bne.n	800a680 <__kernel_rem_pio2f+0x1b0>
 800a674:	1e60      	subs	r0, r4, #1
 800a676:	a908      	add	r1, sp, #32
 800a678:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800a67c:	11f6      	asrs	r6, r6, #7
 800a67e:	e7c8      	b.n	800a612 <__kernel_rem_pio2f+0x142>
 800a680:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a684:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68c:	da31      	bge.n	800a6f2 <__kernel_rem_pio2f+0x222>
 800a68e:	2600      	movs	r6, #0
 800a690:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a698:	f040 8098 	bne.w	800a7cc <__kernel_rem_pio2f+0x2fc>
 800a69c:	1e60      	subs	r0, r4, #1
 800a69e:	2200      	movs	r2, #0
 800a6a0:	4550      	cmp	r0, sl
 800a6a2:	da4b      	bge.n	800a73c <__kernel_rem_pio2f+0x26c>
 800a6a4:	2a00      	cmp	r2, #0
 800a6a6:	d065      	beq.n	800a774 <__kernel_rem_pio2f+0x2a4>
 800a6a8:	3c01      	subs	r4, #1
 800a6aa:	ab08      	add	r3, sp, #32
 800a6ac:	3d08      	subs	r5, #8
 800a6ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d0f8      	beq.n	800a6a8 <__kernel_rem_pio2f+0x1d8>
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a6bc:	f000 f970 	bl	800a9a0 <scalbnf>
 800a6c0:	1c63      	adds	r3, r4, #1
 800a6c2:	aa44      	add	r2, sp, #272	@ 0x110
 800a6c4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800a7c4 <__kernel_rem_pio2f+0x2f4>
 800a6c8:	0099      	lsls	r1, r3, #2
 800a6ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a6ce:	4623      	mov	r3, r4
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f280 80a9 	bge.w	800a828 <__kernel_rem_pio2f+0x358>
 800a6d6:	4623      	mov	r3, r4
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f2c0 80c7 	blt.w	800a86c <__kernel_rem_pio2f+0x39c>
 800a6de:	aa44      	add	r2, sp, #272	@ 0x110
 800a6e0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800a6e4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800a7bc <__kernel_rem_pio2f+0x2ec>
 800a6e8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800a7c8 <__kernel_rem_pio2f+0x2f8>
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	1ae2      	subs	r2, r4, r3
 800a6f0:	e0b1      	b.n	800a856 <__kernel_rem_pio2f+0x386>
 800a6f2:	2602      	movs	r6, #2
 800a6f4:	e78f      	b.n	800a616 <__kernel_rem_pio2f+0x146>
 800a6f6:	f852 1b04 	ldr.w	r1, [r2], #4
 800a6fa:	b948      	cbnz	r0, 800a710 <__kernel_rem_pio2f+0x240>
 800a6fc:	b121      	cbz	r1, 800a708 <__kernel_rem_pio2f+0x238>
 800a6fe:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800a702:	f842 1c04 	str.w	r1, [r2, #-4]
 800a706:	2101      	movs	r1, #1
 800a708:	f10e 0e01 	add.w	lr, lr, #1
 800a70c:	4608      	mov	r0, r1
 800a70e:	e787      	b.n	800a620 <__kernel_rem_pio2f+0x150>
 800a710:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800a714:	e7f5      	b.n	800a702 <__kernel_rem_pio2f+0x232>
 800a716:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800a71a:	aa08      	add	r2, sp, #32
 800a71c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800a720:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a724:	a908      	add	r1, sp, #32
 800a726:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800a72a:	e781      	b.n	800a630 <__kernel_rem_pio2f+0x160>
 800a72c:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800a730:	aa08      	add	r2, sp, #32
 800a732:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800a736:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800a73a:	e7f3      	b.n	800a724 <__kernel_rem_pio2f+0x254>
 800a73c:	a908      	add	r1, sp, #32
 800a73e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a742:	3801      	subs	r0, #1
 800a744:	430a      	orrs	r2, r1
 800a746:	e7ab      	b.n	800a6a0 <__kernel_rem_pio2f+0x1d0>
 800a748:	3201      	adds	r2, #1
 800a74a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800a74e:	2e00      	cmp	r6, #0
 800a750:	d0fa      	beq.n	800a748 <__kernel_rem_pio2f+0x278>
 800a752:	9905      	ldr	r1, [sp, #20]
 800a754:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800a758:	eb0d 0001 	add.w	r0, sp, r1
 800a75c:	18e6      	adds	r6, r4, r3
 800a75e:	a91c      	add	r1, sp, #112	@ 0x70
 800a760:	f104 0c01 	add.w	ip, r4, #1
 800a764:	384c      	subs	r0, #76	@ 0x4c
 800a766:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800a76a:	4422      	add	r2, r4
 800a76c:	4562      	cmp	r2, ip
 800a76e:	da04      	bge.n	800a77a <__kernel_rem_pio2f+0x2aa>
 800a770:	4614      	mov	r4, r2
 800a772:	e710      	b.n	800a596 <__kernel_rem_pio2f+0xc6>
 800a774:	9804      	ldr	r0, [sp, #16]
 800a776:	2201      	movs	r2, #1
 800a778:	e7e7      	b.n	800a74a <__kernel_rem_pio2f+0x27a>
 800a77a:	9903      	ldr	r1, [sp, #12]
 800a77c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a780:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800a784:	9105      	str	r1, [sp, #20]
 800a786:	ee07 1a90 	vmov	s15, r1
 800a78a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a78e:	2400      	movs	r4, #0
 800a790:	ece6 7a01 	vstmia	r6!, {s15}
 800a794:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800a7c8 <__kernel_rem_pio2f+0x2f8>
 800a798:	46b1      	mov	r9, r6
 800a79a:	455c      	cmp	r4, fp
 800a79c:	dd04      	ble.n	800a7a8 <__kernel_rem_pio2f+0x2d8>
 800a79e:	ece0 7a01 	vstmia	r0!, {s15}
 800a7a2:	f10c 0c01 	add.w	ip, ip, #1
 800a7a6:	e7e1      	b.n	800a76c <__kernel_rem_pio2f+0x29c>
 800a7a8:	ecfe 6a01 	vldmia	lr!, {s13}
 800a7ac:	ed39 7a01 	vldmdb	r9!, {s14}
 800a7b0:	3401      	adds	r4, #1
 800a7b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a7b6:	e7f0      	b.n	800a79a <__kernel_rem_pio2f+0x2ca>
 800a7b8:	0800b07c 	.word	0x0800b07c
 800a7bc:	0800b050 	.word	0x0800b050
 800a7c0:	43800000 	.word	0x43800000
 800a7c4:	3b800000 	.word	0x3b800000
 800a7c8:	00000000 	.word	0x00000000
 800a7cc:	9b02      	ldr	r3, [sp, #8]
 800a7ce:	eeb0 0a48 	vmov.f32	s0, s16
 800a7d2:	eba3 0008 	sub.w	r0, r3, r8
 800a7d6:	f000 f8e3 	bl	800a9a0 <scalbnf>
 800a7da:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800a7c0 <__kernel_rem_pio2f+0x2f0>
 800a7de:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e6:	db19      	blt.n	800a81c <__kernel_rem_pio2f+0x34c>
 800a7e8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800a7c4 <__kernel_rem_pio2f+0x2f4>
 800a7ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a7f0:	aa08      	add	r2, sp, #32
 800a7f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a7f6:	3508      	adds	r5, #8
 800a7f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7fc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a804:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a808:	ee10 3a10 	vmov	r3, s0
 800a80c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a810:	ee17 3a90 	vmov	r3, s15
 800a814:	3401      	adds	r4, #1
 800a816:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a81a:	e74c      	b.n	800a6b6 <__kernel_rem_pio2f+0x1e6>
 800a81c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a820:	aa08      	add	r2, sp, #32
 800a822:	ee10 3a10 	vmov	r3, s0
 800a826:	e7f6      	b.n	800a816 <__kernel_rem_pio2f+0x346>
 800a828:	a808      	add	r0, sp, #32
 800a82a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800a82e:	9001      	str	r0, [sp, #4]
 800a830:	ee07 0a90 	vmov	s15, r0
 800a834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a838:	3b01      	subs	r3, #1
 800a83a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a83e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a842:	ed62 7a01 	vstmdb	r2!, {s15}
 800a846:	e743      	b.n	800a6d0 <__kernel_rem_pio2f+0x200>
 800a848:	ecfc 6a01 	vldmia	ip!, {s13}
 800a84c:	ecb5 7a01 	vldmia	r5!, {s14}
 800a850:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a854:	3001      	adds	r0, #1
 800a856:	4550      	cmp	r0, sl
 800a858:	dc01      	bgt.n	800a85e <__kernel_rem_pio2f+0x38e>
 800a85a:	4290      	cmp	r0, r2
 800a85c:	ddf4      	ble.n	800a848 <__kernel_rem_pio2f+0x378>
 800a85e:	a858      	add	r0, sp, #352	@ 0x160
 800a860:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a864:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800a868:	3b01      	subs	r3, #1
 800a86a:	e735      	b.n	800a6d8 <__kernel_rem_pio2f+0x208>
 800a86c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a86e:	2b02      	cmp	r3, #2
 800a870:	dc09      	bgt.n	800a886 <__kernel_rem_pio2f+0x3b6>
 800a872:	2b00      	cmp	r3, #0
 800a874:	dc27      	bgt.n	800a8c6 <__kernel_rem_pio2f+0x3f6>
 800a876:	d040      	beq.n	800a8fa <__kernel_rem_pio2f+0x42a>
 800a878:	f009 0007 	and.w	r0, r9, #7
 800a87c:	b059      	add	sp, #356	@ 0x164
 800a87e:	ecbd 8b04 	vpop	{d8-d9}
 800a882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a886:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d1f5      	bne.n	800a878 <__kernel_rem_pio2f+0x3a8>
 800a88c:	aa30      	add	r2, sp, #192	@ 0xc0
 800a88e:	1f0b      	subs	r3, r1, #4
 800a890:	4413      	add	r3, r2
 800a892:	461a      	mov	r2, r3
 800a894:	4620      	mov	r0, r4
 800a896:	2800      	cmp	r0, #0
 800a898:	dc50      	bgt.n	800a93c <__kernel_rem_pio2f+0x46c>
 800a89a:	4622      	mov	r2, r4
 800a89c:	2a01      	cmp	r2, #1
 800a89e:	dc5d      	bgt.n	800a95c <__kernel_rem_pio2f+0x48c>
 800a8a0:	ab30      	add	r3, sp, #192	@ 0xc0
 800a8a2:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800a7c8 <__kernel_rem_pio2f+0x2f8>
 800a8a6:	440b      	add	r3, r1
 800a8a8:	2c01      	cmp	r4, #1
 800a8aa:	dc67      	bgt.n	800a97c <__kernel_rem_pio2f+0x4ac>
 800a8ac:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800a8b0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800a8b4:	2e00      	cmp	r6, #0
 800a8b6:	d167      	bne.n	800a988 <__kernel_rem_pio2f+0x4b8>
 800a8b8:	edc7 6a00 	vstr	s13, [r7]
 800a8bc:	ed87 7a01 	vstr	s14, [r7, #4]
 800a8c0:	edc7 7a02 	vstr	s15, [r7, #8]
 800a8c4:	e7d8      	b.n	800a878 <__kernel_rem_pio2f+0x3a8>
 800a8c6:	ab30      	add	r3, sp, #192	@ 0xc0
 800a8c8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800a7c8 <__kernel_rem_pio2f+0x2f8>
 800a8cc:	440b      	add	r3, r1
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	2a00      	cmp	r2, #0
 800a8d2:	da24      	bge.n	800a91e <__kernel_rem_pio2f+0x44e>
 800a8d4:	b34e      	cbz	r6, 800a92a <__kernel_rem_pio2f+0x45a>
 800a8d6:	eef1 7a47 	vneg.f32	s15, s14
 800a8da:	edc7 7a00 	vstr	s15, [r7]
 800a8de:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800a8e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a8e6:	aa31      	add	r2, sp, #196	@ 0xc4
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	429c      	cmp	r4, r3
 800a8ec:	da20      	bge.n	800a930 <__kernel_rem_pio2f+0x460>
 800a8ee:	b10e      	cbz	r6, 800a8f4 <__kernel_rem_pio2f+0x424>
 800a8f0:	eef1 7a67 	vneg.f32	s15, s15
 800a8f4:	edc7 7a01 	vstr	s15, [r7, #4]
 800a8f8:	e7be      	b.n	800a878 <__kernel_rem_pio2f+0x3a8>
 800a8fa:	ab30      	add	r3, sp, #192	@ 0xc0
 800a8fc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800a7c8 <__kernel_rem_pio2f+0x2f8>
 800a900:	440b      	add	r3, r1
 800a902:	2c00      	cmp	r4, #0
 800a904:	da05      	bge.n	800a912 <__kernel_rem_pio2f+0x442>
 800a906:	b10e      	cbz	r6, 800a90c <__kernel_rem_pio2f+0x43c>
 800a908:	eef1 7a67 	vneg.f32	s15, s15
 800a90c:	edc7 7a00 	vstr	s15, [r7]
 800a910:	e7b2      	b.n	800a878 <__kernel_rem_pio2f+0x3a8>
 800a912:	ed33 7a01 	vldmdb	r3!, {s14}
 800a916:	3c01      	subs	r4, #1
 800a918:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a91c:	e7f1      	b.n	800a902 <__kernel_rem_pio2f+0x432>
 800a91e:	ed73 7a01 	vldmdb	r3!, {s15}
 800a922:	3a01      	subs	r2, #1
 800a924:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a928:	e7d2      	b.n	800a8d0 <__kernel_rem_pio2f+0x400>
 800a92a:	eef0 7a47 	vmov.f32	s15, s14
 800a92e:	e7d4      	b.n	800a8da <__kernel_rem_pio2f+0x40a>
 800a930:	ecb2 7a01 	vldmia	r2!, {s14}
 800a934:	3301      	adds	r3, #1
 800a936:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a93a:	e7d6      	b.n	800a8ea <__kernel_rem_pio2f+0x41a>
 800a93c:	ed72 7a01 	vldmdb	r2!, {s15}
 800a940:	edd2 6a01 	vldr	s13, [r2, #4]
 800a944:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a948:	3801      	subs	r0, #1
 800a94a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a94e:	ed82 7a00 	vstr	s14, [r2]
 800a952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a956:	edc2 7a01 	vstr	s15, [r2, #4]
 800a95a:	e79c      	b.n	800a896 <__kernel_rem_pio2f+0x3c6>
 800a95c:	ed73 7a01 	vldmdb	r3!, {s15}
 800a960:	edd3 6a01 	vldr	s13, [r3, #4]
 800a964:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a968:	3a01      	subs	r2, #1
 800a96a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a96e:	ed83 7a00 	vstr	s14, [r3]
 800a972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a976:	edc3 7a01 	vstr	s15, [r3, #4]
 800a97a:	e78f      	b.n	800a89c <__kernel_rem_pio2f+0x3cc>
 800a97c:	ed33 7a01 	vldmdb	r3!, {s14}
 800a980:	3c01      	subs	r4, #1
 800a982:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a986:	e78f      	b.n	800a8a8 <__kernel_rem_pio2f+0x3d8>
 800a988:	eef1 6a66 	vneg.f32	s13, s13
 800a98c:	eeb1 7a47 	vneg.f32	s14, s14
 800a990:	edc7 6a00 	vstr	s13, [r7]
 800a994:	ed87 7a01 	vstr	s14, [r7, #4]
 800a998:	eef1 7a67 	vneg.f32	s15, s15
 800a99c:	e790      	b.n	800a8c0 <__kernel_rem_pio2f+0x3f0>
 800a99e:	bf00      	nop

0800a9a0 <scalbnf>:
 800a9a0:	ee10 3a10 	vmov	r3, s0
 800a9a4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a9a8:	d02b      	beq.n	800aa02 <scalbnf+0x62>
 800a9aa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a9ae:	d302      	bcc.n	800a9b6 <scalbnf+0x16>
 800a9b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a9b4:	4770      	bx	lr
 800a9b6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a9ba:	d123      	bne.n	800aa04 <scalbnf+0x64>
 800a9bc:	4b24      	ldr	r3, [pc, #144]	@ (800aa50 <scalbnf+0xb0>)
 800a9be:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800aa54 <scalbnf+0xb4>
 800a9c2:	4298      	cmp	r0, r3
 800a9c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a9c8:	db17      	blt.n	800a9fa <scalbnf+0x5a>
 800a9ca:	ee10 3a10 	vmov	r3, s0
 800a9ce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a9d2:	3a19      	subs	r2, #25
 800a9d4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a9d8:	4288      	cmp	r0, r1
 800a9da:	dd15      	ble.n	800aa08 <scalbnf+0x68>
 800a9dc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800aa58 <scalbnf+0xb8>
 800a9e0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800aa5c <scalbnf+0xbc>
 800a9e4:	ee10 3a10 	vmov	r3, s0
 800a9e8:	eeb0 7a67 	vmov.f32	s14, s15
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bfb8      	it	lt
 800a9f0:	eef0 7a66 	vmovlt.f32	s15, s13
 800a9f4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a9f8:	4770      	bx	lr
 800a9fa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800aa60 <scalbnf+0xc0>
 800a9fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aa02:	4770      	bx	lr
 800aa04:	0dd2      	lsrs	r2, r2, #23
 800aa06:	e7e5      	b.n	800a9d4 <scalbnf+0x34>
 800aa08:	4410      	add	r0, r2
 800aa0a:	28fe      	cmp	r0, #254	@ 0xfe
 800aa0c:	dce6      	bgt.n	800a9dc <scalbnf+0x3c>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	dd06      	ble.n	800aa20 <scalbnf+0x80>
 800aa12:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aa16:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800aa1a:	ee00 3a10 	vmov	s0, r3
 800aa1e:	4770      	bx	lr
 800aa20:	f110 0f16 	cmn.w	r0, #22
 800aa24:	da09      	bge.n	800aa3a <scalbnf+0x9a>
 800aa26:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800aa60 <scalbnf+0xc0>
 800aa2a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800aa64 <scalbnf+0xc4>
 800aa2e:	ee10 3a10 	vmov	r3, s0
 800aa32:	eeb0 7a67 	vmov.f32	s14, s15
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	e7d9      	b.n	800a9ee <scalbnf+0x4e>
 800aa3a:	3019      	adds	r0, #25
 800aa3c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aa40:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800aa44:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800aa68 <scalbnf+0xc8>
 800aa48:	ee07 3a90 	vmov	s15, r3
 800aa4c:	e7d7      	b.n	800a9fe <scalbnf+0x5e>
 800aa4e:	bf00      	nop
 800aa50:	ffff3cb0 	.word	0xffff3cb0
 800aa54:	4c000000 	.word	0x4c000000
 800aa58:	7149f2ca 	.word	0x7149f2ca
 800aa5c:	f149f2ca 	.word	0xf149f2ca
 800aa60:	0da24260 	.word	0x0da24260
 800aa64:	8da24260 	.word	0x8da24260
 800aa68:	33000000 	.word	0x33000000

0800aa6c <floorf>:
 800aa6c:	ee10 3a10 	vmov	r3, s0
 800aa70:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aa74:	3a7f      	subs	r2, #127	@ 0x7f
 800aa76:	2a16      	cmp	r2, #22
 800aa78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aa7c:	dc2b      	bgt.n	800aad6 <floorf+0x6a>
 800aa7e:	2a00      	cmp	r2, #0
 800aa80:	da12      	bge.n	800aaa8 <floorf+0x3c>
 800aa82:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800aae8 <floorf+0x7c>
 800aa86:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aa8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aa8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa92:	dd06      	ble.n	800aaa2 <floorf+0x36>
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	da24      	bge.n	800aae2 <floorf+0x76>
 800aa98:	2900      	cmp	r1, #0
 800aa9a:	4b14      	ldr	r3, [pc, #80]	@ (800aaec <floorf+0x80>)
 800aa9c:	bf08      	it	eq
 800aa9e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800aaa2:	ee00 3a10 	vmov	s0, r3
 800aaa6:	4770      	bx	lr
 800aaa8:	4911      	ldr	r1, [pc, #68]	@ (800aaf0 <floorf+0x84>)
 800aaaa:	4111      	asrs	r1, r2
 800aaac:	420b      	tst	r3, r1
 800aaae:	d0fa      	beq.n	800aaa6 <floorf+0x3a>
 800aab0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800aae8 <floorf+0x7c>
 800aab4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aab8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac0:	ddef      	ble.n	800aaa2 <floorf+0x36>
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	bfbe      	ittt	lt
 800aac6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800aaca:	fa40 f202 	asrlt.w	r2, r0, r2
 800aace:	189b      	addlt	r3, r3, r2
 800aad0:	ea23 0301 	bic.w	r3, r3, r1
 800aad4:	e7e5      	b.n	800aaa2 <floorf+0x36>
 800aad6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800aada:	d3e4      	bcc.n	800aaa6 <floorf+0x3a>
 800aadc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aae0:	4770      	bx	lr
 800aae2:	2300      	movs	r3, #0
 800aae4:	e7dd      	b.n	800aaa2 <floorf+0x36>
 800aae6:	bf00      	nop
 800aae8:	7149f2ca 	.word	0x7149f2ca
 800aaec:	bf800000 	.word	0xbf800000
 800aaf0:	007fffff 	.word	0x007fffff

0800aaf4 <_init>:
 800aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf6:	bf00      	nop
 800aaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aafa:	bc08      	pop	{r3}
 800aafc:	469e      	mov	lr, r3
 800aafe:	4770      	bx	lr

0800ab00 <_fini>:
 800ab00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab02:	bf00      	nop
 800ab04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab06:	bc08      	pop	{r3}
 800ab08:	469e      	mov	lr, r3
 800ab0a:	4770      	bx	lr
